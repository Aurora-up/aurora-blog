import{_ as r}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as m,c as k,e as d,d as c,w as n,a as s,b as a,f as i,r as p}from"./app.16899950.js";const h="/aurora-blog/assets/image-20221226171731561.e8e6f350.png",g="/aurora-blog/assets/image-20221226170711039.a144a6f6.png",b="/aurora-blog/assets/image-20221226171138593.f2bd3670.png",v="/aurora-blog/assets/image-20221226171646207.80e54f32.png",y="/aurora-blog/assets/image-20221226172224641.9a87eb5c.png",w="/aurora-blog/assets/image-20221226172820794.6a313c76.png",x="/aurora-blog/assets/image-20221226211652090.31ebc537.png",_="/aurora-blog/assets/image-20221226212356195.8980499c.png",f="/aurora-blog/assets/image-20221226212749450.c45d0972.png",M="/aurora-blog/assets/image-20221227141036889.f51f2b9d.png",T="/aurora-blog/assets/image-20221227141626481.137d4752.png",z="/aurora-blog/assets/image-20230101154717176.7c4e767a.png",L="/aurora-blog/assets/image-20221227191400186.23841648.png",N="/aurora-blog/assets/image-20221231175137232.5281ed69.png",A="/aurora-blog/assets/image-20221231175204123.af2fa5a1.png",j="/aurora-blog/assets/image-20221231175322716.87bdaa03.png",O="/aurora-blog/assets/image-20221231175356852.443c358a.png",B="/aurora-blog/assets/image-20221231175423051.25f722cf.png",E="/aurora-blog/assets/image-20221231175443249.d726c5a8.png",S="/aurora-blog/assets/image-20230101155358861.a637ee51.png",C="/aurora-blog/assets/image-20221227194004998.a056c38f.png",q="/aurora-blog/assets/image-20221227200349823.d71f07e5.png",P={},R=s("p",null,"「二叉树 Binary Tree」",-1),V=s("h4",{id:"二叉树的定义及主要特征",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#二叉树的定义及主要特征","aria-hidden":"true"},"#"),a(" 二叉树的定义及主要特征")],-1),D=s("p",null,"二叉树是一种特殊的树型结构，其特点有：",-1),F=s("ul",null,[s("li",null,[a("每个结点"),s("strong",null,"至多有两颗子树"),a(" ( 即不存在度大于 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2")])])]),a(" 的结点 )")]),s("li",null,"二叉树的子树有左右之分，其次序是不能任意颠倒。( 若将二叉树的左、右子树颠倒，其会变为另一颗二叉树 )")],-1),H=s("div",{class:"custom-container warning"},[s("p",{class:"custom-container-title"},"区分二叉树与度为 2 的树"),s("ul",null,[s("li",null,[a("二叉树并不是度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2")])])]),a(" 的树，二叉树上的结点的度可以是 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0"),s("mo",{separator:"true"},","),s("mn",null,"1"),s("mo",{separator:"true"},","),s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"0,1,2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},"0"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"2")])])]),a(" 。")])])],-1),I=s("h2",{id:"二叉树常用术语",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#二叉树常用术语","aria-hidden":"true"},"#"),a(" 二叉树常用术语")],-1),Q=s("ul",null,[s("li",null,"「根结点 Root Node」：二叉树最顶层的结点，其没有父结点；"),s("li",null,[a("「叶结点 Leaf Node」：没有子结点的结点，其两个指针都指向 "),s("code",null,"null"),a(" ；")]),s("li",null,[a("结点所处「层 Level」：从顶置底依次增加，根结点所处层为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(" ；")]),s("li",null,[a("结点「度 Degree」：结点的子结点数量，二叉树中度的范围是 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0"),s("mo",{separator:"true"},","),s("mn",null,"1"),s("mo",{separator:"true"},","),s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"0, 1, 2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},"0"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"2")])])]),a(" ；")]),s("li",null,"「边 Edge」：连接两个结点的边，即结点指针；"),s("li",null,[a("二叉树「高度 、深度」：二叉树中根结点到最远叶结点走过"),s("strong",null,"边"),a("的数量；(根 — 叶)")]),s("li",null,"结点「深度 Depth」 ：根结点到该结点走过边的数量；(根 — 结点)"),s("li",null,"结点「高度 Height」：最远叶结点到该结点走过边的数量；(结点 — 叶)")],-1),G=i('<p><img src="'+h+'" alt="image-20221226171731561" loading="lazy"></p><div class="custom-container info"><p class="custom-container-title">高度和深度的定义</p><p>高度和深度的定义并不只有 <strong>“边”</strong> 的定义，也有以 <strong>“结点个数”</strong> 定义的，所以当以结点个数作为定义时，需要在以边为标准的基础上 + 1.</p></div><h2 id="常见二叉树" tabindex="-1"><a class="header-anchor" href="#常见二叉树" aria-hidden="true">#</a> 常见二叉树</h2><h3 id="完美二叉树-满二叉树" tabindex="-1"><a class="header-anchor" href="#完美二叉树-满二叉树" aria-hidden="true">#</a> 完美二叉树（满二叉树）</h3>',4),J=s("p",null,[a("​ 「完美二叉树 Perfect Binary Tree」的所有层的结点都被完全填满。在完美二叉树中，所有结点的度 = 2 ；若树高度 = "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"h")]),s("annotation",{encoding:"application/x-tex"},"h")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"h")])])]),a(" ，则结点总数 = "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mrow",null,[s("mi",null,"h"),s("mo",null,"+"),s("mn",null,"1")])]),s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"2^{h+1}-1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9324em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8491em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"h"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},"1")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(" ，呈标准的指数级关系。")],-1),K=i('<p><img src="'+g+'" alt="image-20221226170711039" loading="lazy"></p><h3 id="完全二叉树" tabindex="-1"><a class="header-anchor" href="#完全二叉树" aria-hidden="true">#</a> 完全二叉树</h3><p>「完全二叉树 Complete Binary Tree」只有最底层的结点未被填满，且最底层结点尽量靠左填充。</p><p><img src="'+b+'" alt="image-20221226171138593" loading="lazy"></p><p><strong>完全二叉树非常适合用数组来表示</strong>。如果按照<strong>层序遍历</strong>序列的顺序来存储，那么空结点 <code>null</code> 一定全部出现在序列的尾部，因此我们就可以不用存储这些 <code>null</code> 了。</p><h3 id="完满二叉树" tabindex="-1"><a class="header-anchor" href="#完满二叉树" aria-hidden="true">#</a> 完满二叉树</h3><p>「完满二叉树 Full Binary Tree」除了叶结点之外，其余所有结点都有两个子结点。</p><p><img src="'+v+'" alt="image-20221226171646207" loading="lazy"></p><h3 id="平衡二叉树" tabindex="-1"><a class="header-anchor" href="#平衡二叉树" aria-hidden="true">#</a> 平衡二叉树</h3>',9),U=s("p",null,[a("「平衡二叉树 Balanced Binary Tree」中任意结点的左子树和右子树的高度之差的绝对值 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"≤"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"≤1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7719em","vertical-align":"-0.136em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(" 。")],-1),W=s("p",null,[s("img",{src:y,alt:"image-20221226172224641",loading:"lazy"})],-1),X=s("h2",{id:"二叉树的退化",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#二叉树的退化","aria-hidden":"true"},"#"),a(" 二叉树的退化")],-1),Y=s("p",null,"当二叉树的每层的结点都被填满时，达到「完美二叉树」；而当所有结点都偏向一边时，二叉树退化为「链表」。",-1),Z=s("ul",null,[s("li",null,"完美二叉树是一个二叉树的“最佳状态”，可以完全发挥出二叉树“分治”的优势；"),s("li",null,[a("链表则是另一个极端，各项操作都变为线性操作，时间复杂度退化至 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),a(" ；")])],-1),$=s("p",null,[s("img",{src:w,alt:"image-20221226172820794",loading:"lazy"})],-1),ss=s("p",null,"完美二叉树和退化为链表的二叉树的叶结点数量、结点总数、高度等达到极大或极小值。",-1),as=s("table",null,[s("thead",null,[s("tr",null,[s("th",{style:{"text-align":"center"}}),s("th",{style:{"text-align":"center"}},"完美二叉树"),s("th",{style:{"text-align":"center"}},"链表")])]),s("tbody",null,[s("tr",null,[s("td",{style:{"text-align":"center"}},[s("strong",null,[a("第 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i")])])]),a(" 层")]),a("结点数量")]),s("td",{style:{"text-align":"center"}},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"−"),s("mn",null,"1")])])]),s("annotation",{encoding:"application/x-tex"},"2^{i-1}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8247em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8247em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mbin mtight"},"−"),s("span",{class:"mord mtight"},"1")])])])])])])])])])])])]),s("td",{style:{"text-align":"center"}},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])])])]),s("tr",null,[s("td",{style:{"text-align":"center"}},[a("树的高度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"h")]),s("annotation",{encoding:"application/x-tex"},"h")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"h")])])]),a(" 时"),s("strong",null,"叶结点"),a("的数量")]),s("td",{style:{"text-align":"center"}},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mi",null,"h")])]),s("annotation",{encoding:"application/x-tex"},"2^h")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8491em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8491em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"h")])])])])])])])])])])]),s("td",{style:{"text-align":"center"}},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])])])]),s("tr",null,[s("td",{style:{"text-align":"center"}},[a("树的高度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"h")]),s("annotation",{encoding:"application/x-tex"},"h")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"h")])])]),a(" 时"),s("strong",null,"结点"),a("的数量")]),s("td",{style:{"text-align":"center"}},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mrow",null,[s("mi",null,"h"),s("mo",null,"+"),s("mn",null,"1")])]),s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"2^{h+1}-1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9324em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8491em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"h"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},"1")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])])]),s("td",{style:{"text-align":"center"}},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"h"),s("mo",null,"+"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"h+1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7778em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"h"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])])])]),s("tr",null,[s("td",{style:{"text-align":"center"}},[a("树的结点总数为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])])]),a(" 时的"),s("strong",null,"深度")]),s("td",{style:{"text-align":"center"}},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"⌊"),s("mi",null,"l"),s("mi",null,"o"),s("msub",null,[s("mi",null,"g"),s("mn",null,"2")]),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",null,"+"),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},"⌋"),s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"⌊log_2(n+1)⌋-1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"⌊"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0359em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")⌋"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])])]),s("td",{style:{"text-align":"center"}},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n"),s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"n-1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])])])])])],-1),ns=s("h2",{id:"二叉树的基本特征",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#二叉树的基本特征","aria-hidden":"true"},"#"),a(" 二叉树的基本特征")],-1),ts=s("p",null,[a("二叉树也是树，而树是 "),s("strong",null,"无环连通图"),a(" ，所以有 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])])]),a(" 个结点的树，其边的数量 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"B"),s("mo",null,"="),s("mi",null,"n"),s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"B = n-1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(" .")],-1),es=s("ol",null,[s("li",null,[a("非空二叉树上的叶子结点数等于度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2")])])]),a(" 的结点数加 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(" ，即 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"n"),s("mn",null,"0")]),s("mo",null,"="),s("msub",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mo",null,"+"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"n_0 = n_2 + 1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(".")]),s("li",null,[a("对一颗具有 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])])]),a(" 个结点的完全二叉树中的结点从 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(" 开始按层序编号，则对于任意的编号为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",null,"≤"),s("mi",null,"i"),s("mo",null,"≤"),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"i(1≤i≤n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7955em","vertical-align":"-0.136em"}}),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),a(" 的结点有： "),s("ul",null,[s("li",null,[a("如果 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i"),s("mo",null,">"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"i>1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6986em","vertical-align":"-0.0391em"}}),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},">"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(" ，则结点 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i")])])]),a(" 的双亲的编号为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"⌊"),s("mfrac",null,[s("mi",null,"i"),s("mn",null,"2")]),s("mo",{stretchy:"false"},"⌋")]),s("annotation",{encoding:"application/x-tex"},"⌊\\frac{i}{2}⌋")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.2007em","vertical-align":"-0.345em"}}),s("span",{class:"mopen"},"⌊"),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8557em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.345em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mclose"},"⌋")])])]),a(" ；否则结点 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i")])])]),a(" 为根结点.")]),s("li",null,[a("如果 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2"),s("mi",null,"i"),s("mo",null,"≤"),s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"2i ≤ n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7955em","vertical-align":"-0.136em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])])]),a(" ，则结点 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i")])])]),a(" 的左孩子的编号为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2"),s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"2i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mord mathnormal"},"i")])])]),a(" ，否则结点 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i")])])]),a(" 无左孩子.")]),s("li",null,[a("如果 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2"),s("mi",null,"i"),s("mo",null,"+"),s("mn",null,"1"),s("mo",null,"≤"),s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"2i+1≤ n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7429em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7804em","vertical-align":"-0.136em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])])]),a(" ，则结点 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i")])])]),a(" 的右孩子的编号为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2"),s("mi",null,"i"),s("mo",null,"+"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"2i+1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7429em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(" ，否则结点 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i")])])]),a(" 无右孩子.")]),s("li",null,[a("结点所在的深度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"⌊"),s("mi",null,"l"),s("mi",null,"o"),s("msub",null,[s("mi",null,"g"),s("mn",null,"2")]),s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mo",null,"+"),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},"⌋"),s("mo",null,"+"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"⌊log_2(i+1)⌋+1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"⌊"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0359em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")⌋"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(" .")])])])],-1),ls=s("details",{class:"custom-container details"},[s("summary",null,"对性质的推导"),s("ul",null,[s("li",null,"性质 1 的证明：")]),s("p",null,[a("一颗二叉树的结点总数 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n"),s("mo",null,"="),s("msub",null,[s("mi",null,"n"),s("mn",null,"0")]),s("mo",null,"+"),s("msub",null,[s("mi",null,"n"),s("mn",null,"1")]),s("mo",null,"+"),s("msub",null,[s("mi",null,"n"),s("mn",null,"2")])]),s("annotation",{encoding:"application/x-tex"},"n = n_0+n_1+n_2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a(" ，边的总数 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"B"),s("mo",null,"="),s("mi",null,"n"),s("mo",null,"−"),s("mn",null,"1"),s("mo",null,"="),s("msub",null,[s("mi",null,"n"),s("mn",null,"1")]),s("mo",null,"+"),s("mn",null,"2"),s("msub",null,[s("mi",null,"n"),s("mn",null,"2")])]),s("annotation",{encoding:"application/x-tex"},"B = n -1 = n_1 + 2n_2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7944em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a(" ，所以得："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"n"),s("mn",null,"0")]),s("mo",null,"+"),s("msub",null,[s("mi",null,"n"),s("mn",null,"1")]),s("mo",null,"+"),s("msub",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mo",null,"="),s("msub",null,[s("mi",null,"n"),s("mn",null,"1")]),s("mo",null,"+"),s("mn",null,"2"),s("msub",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mo",null,"+"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"n_0+n_1+n_2=n_1+2n_2+1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7944em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(" . 即："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"n"),s("mn",null,"0")]),s("mo",null,"="),s("msub",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mo",null,"+"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"n_0=n_2+1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(".")])],-1),cs=s("h2",{id:"二叉树的表示方式",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#二叉树的表示方式","aria-hidden":"true"},"#"),a(" 二叉树的表示方式")],-1),os=s("h3",{id:"_1-数组表示",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-数组表示","aria-hidden":"true"},"#"),a(" 1.数组表示")],-1),is=s("p",null,[a("使用普通数组存储二叉树时，不能直接在结点中存储结点之间的关系，需要推导父结点索引与子结点索引的「映射公式」："),s("strong",null,[a("设结点的索引为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i")])])]),a(" ，则该结点的左子结点索引为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2"),s("mi",null,"i"),s("mo",null,"+"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"2i+1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7429em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(" 、右子结点索引为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2"),s("mi",null,"i"),s("mo",null,"+"),s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"2i+2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7429em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2")])])])]),a(" 。")],-1),ps=i('<p>例如数组存储满二叉树：</p><p><img src="'+x+'" alt="image-20221226211652090" loading="lazy"></p><p>但是满二叉树的并不常见，要想使用使用数组存储其他类型的二叉树，就必然存在 <code>null</code> 值，即需要将一颗不是满二叉树的二叉树用<strong>空结点</strong>填充为一颗满二叉树。如下图：</p><p><img src="'+_+'" alt="image-20221226212356195" loading="lazy"></p><p>对于<strong>完全二叉树</strong>来说，其虽然有<strong>空结点</strong>，但是由于使用层序遍历的顺序存储的原因，这些空结点都在数组的结尾，这使得可以直接不对其进行存储，所以使用数组表示完全二叉树更加合适。</p><p><img src="'+f+'" alt="image-20221226212749450" loading="lazy"></p>',6),us=s("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[s("pre",{class:"language-rust"},[s("code",null,`
`)]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),rs=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"language-java"},[s("code",null,`
`)]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),ms=s("div",{class:"language-c++ line-numbers-mode","data-ext":"c++"},[s("pre",{class:"language-c++"},[s("code",null,`
`)]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),ks=s("h3",{id:"_2-链表表示",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_2-链表表示","aria-hidden":"true"},"#"),a(" 2.链表表示")],-1),ds=s("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[s("pre",{class:"language-rust"},[s("code",null,`
`)]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),hs=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"language-java"},[s("code",null,[s("span",{class:"token keyword"},"public"),a(),s("span",{class:"token keyword"},"class"),a(),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),s("span",{class:"token punctuation"},"{"),a(`
  `),s("span",{class:"token keyword"},"public"),a(),s("span",{class:"token class-name"},"T"),a(" value"),s("span",{class:"token punctuation"},";"),a("             "),s("span",{class:"token comment"},"// 结点值"),a(`
  `),s("span",{class:"token keyword"},"public"),a(),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),a(" left"),s("span",{class:"token punctuation"},";"),a("    "),s("span",{class:"token comment"},"// 左子结点"),a(`
  `),s("span",{class:"token keyword"},"public"),a(),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),a(" right"),s("span",{class:"token punctuation"},";"),a("   "),s("span",{class:"token comment"},"// 右子结点"),a(`
  
  `),s("span",{class:"token keyword"},"public"),a(),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"T"),a(" value"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
    `),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},"."),a("value "),s("span",{class:"token operator"},"="),a(" value"),s("span",{class:"token punctuation"},";"),a(`
  `),s("span",{class:"token punctuation"},"}"),a(`
`),s("span",{class:"token punctuation"},"}"),a(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),gs=s("div",{class:"language-c++ line-numbers-mode","data-ext":"c++"},[s("pre",{class:"language-c++"},[s("code",null,`
`)]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),bs=i('<h2 id="二叉树的遍历" tabindex="-1"><a class="header-anchor" href="#二叉树的遍历" aria-hidden="true">#</a> 二叉树的遍历</h2><h3 id="层序遍历" tabindex="-1"><a class="header-anchor" href="#层序遍历" aria-hidden="true">#</a> 层序遍历</h3><p>「层序遍历 Hierarchical-Order Traversal」从顶至底、一层一层地遍历二叉树，并在每层中按照从左到右的顺序访问结点。层序遍历本质上是「广度优先遍历 Breadth-First Traversal」.</p><p><img src="'+M+'" alt="层序遍历" loading="lazy"></p>',4),vs=s("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[s("pre",{class:"language-rust"},[s("code",null,`
`)]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),ys=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"language-java"},[s("code",null,[s("span",{class:"token doc-comment comment"},[a(`/**
 * 层序遍历
 * `),s("span",{class:"token keyword"},"@param"),a(),s("span",{class:"token parameter"},"root"),a(`: 根结点
 * `),s("span",{class:"token keyword"},"@return"),a(` 层序遍历序列数组
 */`)]),a(`
`),s("span",{class:"token keyword"},"public"),a(),s("span",{class:"token class-name"},"List"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">"),s("span",{class:"token punctuation"},">")]),a(),s("span",{class:"token function"},"bfsOrder"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),a(" root"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
  `),s("span",{class:"token comment"},"// 初始化队列, 根结点入队"),a(`
  `),s("span",{class:"token class-name"},"Queue"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">"),s("span",{class:"token punctuation"},">")]),a(" queue "),s("span",{class:"token operator"},"="),a(),s("span",{class:"token keyword"},"new"),a(),s("span",{class:"token class-name"},"LinkedList"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token punctuation"},">")]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
  queue`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"add"),s("span",{class:"token punctuation"},"("),a("root"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
  `),s("span",{class:"token comment"},"// 保存层序遍历的序列"),a(`
  `),s("span",{class:"token class-name"},"List"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">"),s("span",{class:"token punctuation"},">")]),a(" list "),s("span",{class:"token operator"},"="),a(),s("span",{class:"token keyword"},"new"),a(),s("span",{class:"token class-name"},"ArrayList"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token punctuation"},">")]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
  `),s("span",{class:"token keyword"},"while"),a(),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"!"),a("queue"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"isEmpty"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
    `),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),a(" node "),s("span",{class:"token operator"},"="),a(" queue"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"poll"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a("   "),s("span",{class:"token comment"},"// 结点出队"),a(`
    list`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"add"),s("span",{class:"token punctuation"},"("),a("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a("                    "),s("span",{class:"token comment"},"// 保存结点(序列)"),a(`
    `),s("span",{class:"token comment"},"// 访问左子结点"),a(`
    `),s("span",{class:"token keyword"},"if"),s("span",{class:"token punctuation"},"("),a("node"),s("span",{class:"token punctuation"},"."),a("left "),s("span",{class:"token operator"},"!="),a(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
      queue`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"offer"),s("span",{class:"token punctuation"},"("),a("node"),s("span",{class:"token punctuation"},"."),a("left"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
    `),s("span",{class:"token punctuation"},"}"),a(`
    `),s("span",{class:"token comment"},"// 访问右子结点"),a(`
    `),s("span",{class:"token keyword"},"if"),s("span",{class:"token punctuation"},"("),a("node"),s("span",{class:"token punctuation"},"."),a("right "),s("span",{class:"token operator"},"!="),a(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
      queue`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"offer"),s("span",{class:"token punctuation"},"("),a("node"),s("span",{class:"token punctuation"},"."),a("right"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
    `),s("span",{class:"token punctuation"},"}"),a(`
  `),s("span",{class:"token punctuation"},"}"),a(`
  `),s("span",{class:"token keyword"},"return"),a(" list"),s("span",{class:"token punctuation"},";"),a(`
`),s("span",{class:"token punctuation"},"}"),a(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ws=s("div",{class:"language-c++ line-numbers-mode","data-ext":"c++"},[s("pre",{class:"language-c++"},[s("code",null,`
`)]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),xs=i('<h3 id="前序、中序、后序遍历" tabindex="-1"><a class="header-anchor" href="#前序、中序、后序遍历" aria-hidden="true">#</a> 前序、中序、后序遍历</h3><p>相对地，前、中、后序遍历皆属于「深度优先遍历 Depth-First Traversal」，即每次搜索会直接搜索到叶子结点，然后再回溯去搜索其他的结点。</p><p>如下图所示，左侧是深度优先遍历的的示意图，右上方是对应的递归实现代码。深度优先遍历就像是绕着整个二叉树的外围“走”一圈，走的过程中，在每个结点都会遇到三个位置(即是向下继续搜索左子结点、右子结点或是回溯到父结点)，分别对应前序遍历、中序遍历、后序遍历。</p><p><img src="'+T+'" alt="前序,中序,后序遍历" loading="lazy"></p><table><thead><tr><th style="text-align:center;">位置</th><th style="text-align:center;">含义</th><th style="text-align:center;">此处访问结点时对应</th></tr></thead><tbody><tr><td style="text-align:center;">橙色圆圈处</td><td style="text-align:center;">刚进入此结点，即将访问该结点的左子树</td><td style="text-align:center;">前序遍历 Pre-Order Traversal</td></tr><tr><td style="text-align:center;">蓝色圆圈处</td><td style="text-align:center;">已访问完左子树，即将访问右子树</td><td style="text-align:center;">中序遍历 In-Order Traversal</td></tr><tr><td style="text-align:center;">紫色圆圈处</td><td style="text-align:center;">已访问完左子树和右子树，即将返回</td><td style="text-align:center;">后序遍历 Post-Order Traversal</td></tr></tbody></table><h4 id="由遍历序列确认二叉树" tabindex="-1"><a class="header-anchor" href="#由遍历序列确认二叉树" aria-hidden="true">#</a> 由遍历序列确认二叉树</h4><ul><li>前序 / 后序遍历和中序遍历可以唯一确定一颗二叉树</li><li>前序遍历和后序遍历<strong>不能</strong>唯一确定一颗二叉树</li></ul><p><img src="'+z+'" alt="image-20230101154717176" loading="lazy"></p><p>【求解一颗二叉树某一遍历顺序序列】</p><p>这三种序列都是从根结点开始的深搜序列，根据其选择的优先级顺序，例如前序遍历为 <code>(根,左,右)</code> (这是根，左，右是相对而言的，不是整颗树的)，思考过程如下：</p><ol><li>首先是到 <code>A</code> (根)结点，是 “根” ，入序列，然后根据 <code>(根,左,右)</code> 原则遍历该 “根结点” 的 “左” 结点，</li><li>来到左结点 <code>B</code> , 是 “左” ，入序列，因为是深度优先，所以继续根据 <code>(根,左,右)</code> 原则向下遍历以 <code>B</code> 为 “根” 的子树，直至以 <code>B</code> 为 “根” 的子树遍历完毕，</li><li>对于 <code>A</code> (根)结点来说，<code>(根,左)</code> 已经遍历完毕，然后继续遍历 “右” ，即来到 <code>E</code> ,是 “右” ，入序列，然后继续前序遍历原则直接所有结点遍历结束.</li></ol><p>【根据前序 / 后序遍历和中序遍历唯一确定一颗二叉树】</p><p><img src="'+L+'" alt="image-20221227191400186" loading="lazy"></p>',13),_s=s("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[s("pre",{class:"language-rust"},[s("code",null,`
`)]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),fs=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"language-java"},[s("code",null,[s("span",{class:"token doc-comment comment"},[a(`/**
 * 前序遍历(递归), 序列存储在 list 中
 * `),s("span",{class:"token keyword"},"@param"),a(),s("span",{class:"token parameter"},"root"),a(`: 根结点
 * `),s("span",{class:"token keyword"},"@param"),a(),s("span",{class:"token parameter"},"list"),a(`: 存储遍历顺序
 */`)]),a(`
`),s("span",{class:"token keyword"},"public"),a(),s("span",{class:"token keyword"},"void"),a(),s("span",{class:"token function"},"preOrder"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),a(" root"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token class-name"},"ArrayList"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">"),s("span",{class:"token punctuation"},">")]),a(" list"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
  `),s("span",{class:"token keyword"},"if"),a(),s("span",{class:"token punctuation"},"("),a("root "),s("span",{class:"token operator"},"=="),a(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token keyword"},"return"),s("span",{class:"token punctuation"},";"),a(`
  `),s("span",{class:"token comment"},"// 访问优先级： 根结点 -> 左子树 -> 右子树"),a(`
  list`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"add"),s("span",{class:"token punctuation"},"("),a("root"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
  `),s("span",{class:"token function"},"preOrder"),s("span",{class:"token punctuation"},"("),a("root"),s("span",{class:"token punctuation"},"."),a("left"),s("span",{class:"token punctuation"},","),a(" list"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
  `),s("span",{class:"token function"},"preOrder"),s("span",{class:"token punctuation"},"("),a("root"),s("span",{class:"token punctuation"},"."),a("right"),s("span",{class:"token punctuation"},","),a(" list"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
`),s("span",{class:"token punctuation"},"}"),a(`

`),s("span",{class:"token doc-comment comment"},[a(`/**
 * 中序遍历(递归), 序列存储在 list 中
 * `),s("span",{class:"token keyword"},"@param"),a(),s("span",{class:"token parameter"},"root"),a(`: 根结点
 * `),s("span",{class:"token keyword"},"@param"),a(),s("span",{class:"token parameter"},"list"),a(`: 存储遍历顺序
 */`)]),a(`
`),s("span",{class:"token keyword"},"public"),a(),s("span",{class:"token keyword"},"void"),a(),s("span",{class:"token function"},"inOrder"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),a(" root"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token class-name"},"ArrayList"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">"),s("span",{class:"token punctuation"},">")]),a(" list"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
  `),s("span",{class:"token keyword"},"if"),a(),s("span",{class:"token punctuation"},"("),a("root "),s("span",{class:"token operator"},"=="),a(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token keyword"},"return"),s("span",{class:"token punctuation"},";"),a(`
  `),s("span",{class:"token comment"},"// 访问优先级：左子树 -> 根结点 -> 右子树"),a(`
  `),s("span",{class:"token function"},"inOrder"),s("span",{class:"token punctuation"},"("),a("root"),s("span",{class:"token punctuation"},"."),a("left"),s("span",{class:"token punctuation"},","),a(" list"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
  list`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"add"),s("span",{class:"token punctuation"},"("),a("root"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
  `),s("span",{class:"token function"},"inOrder"),s("span",{class:"token punctuation"},"("),a("root"),s("span",{class:"token punctuation"},"."),a("right"),s("span",{class:"token punctuation"},","),a(" list"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
`),s("span",{class:"token punctuation"},"}"),a(`

`),s("span",{class:"token doc-comment comment"},[a(`/**
 * 后序遍历(递归), 序列存储在 list 中
 * `),s("span",{class:"token keyword"},"@param"),a(),s("span",{class:"token parameter"},"root"),a(`: 根结点
 * `),s("span",{class:"token keyword"},"@param"),a(),s("span",{class:"token parameter"},"list"),a(`: 存储遍历顺序
 */`)]),a(`
`),s("span",{class:"token keyword"},"public"),a(),s("span",{class:"token keyword"},"void"),a(),s("span",{class:"token function"},"postOrder"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),a(" root"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token class-name"},"ArrayList"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">"),s("span",{class:"token punctuation"},">")]),a(" list"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
  `),s("span",{class:"token keyword"},"if"),a(),s("span",{class:"token punctuation"},"("),a("root "),s("span",{class:"token operator"},"=="),a(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token keyword"},"return"),s("span",{class:"token punctuation"},";"),a(`
  `),s("span",{class:"token comment"},"// 访问优先级：左子树 -> 右子树 -> 根结点"),a(`
  `),s("span",{class:"token function"},"postOrder"),s("span",{class:"token punctuation"},"("),a("root"),s("span",{class:"token punctuation"},"."),a("left"),s("span",{class:"token punctuation"},","),a(" list"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
  `),s("span",{class:"token function"},"postOrder"),s("span",{class:"token punctuation"},"("),a("root"),s("span",{class:"token punctuation"},"."),a("right"),s("span",{class:"token punctuation"},","),a(" list"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
  list`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"add"),s("span",{class:"token punctuation"},"("),a("root"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
`),s("span",{class:"token punctuation"},"}"),a(`
`)])]),s("div",{class:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"}," "),s("br")]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ms=s("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[s("pre",{class:"language-cpp"},[s("code",null,[s("span",{class:"token comment"},"/* 前序遍历 */"),a(`
`),s("span",{class:"token keyword"},"void"),a(),s("span",{class:"token function"},"preOrder"),s("span",{class:"token punctuation"},"("),a("TreeNode"),s("span",{class:"token operator"},"*"),a(" root"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
    `),s("span",{class:"token keyword"},"if"),a(),s("span",{class:"token punctuation"},"("),a("root "),s("span",{class:"token operator"},"=="),a(),s("span",{class:"token keyword"},"nullptr"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token keyword"},"return"),s("span",{class:"token punctuation"},";"),a(`
    `),s("span",{class:"token comment"},"// 访问优先级：根结点 -> 左子树 -> 右子树"),a(`
    vec`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"push_back"),s("span",{class:"token punctuation"},"("),a("root"),s("span",{class:"token operator"},"->"),a("val"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
    `),s("span",{class:"token function"},"preOrder"),s("span",{class:"token punctuation"},"("),a("root"),s("span",{class:"token operator"},"->"),a("left"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
    `),s("span",{class:"token function"},"preOrder"),s("span",{class:"token punctuation"},"("),a("root"),s("span",{class:"token operator"},"->"),a("right"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
`),s("span",{class:"token punctuation"},"}"),a(`

`),s("span",{class:"token comment"},"/* 中序遍历 */"),a(`
`),s("span",{class:"token keyword"},"void"),a(),s("span",{class:"token function"},"inOrder"),s("span",{class:"token punctuation"},"("),a("TreeNode"),s("span",{class:"token operator"},"*"),a(" root"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
    `),s("span",{class:"token keyword"},"if"),a(),s("span",{class:"token punctuation"},"("),a("root "),s("span",{class:"token operator"},"=="),a(),s("span",{class:"token keyword"},"nullptr"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token keyword"},"return"),s("span",{class:"token punctuation"},";"),a(`
    `),s("span",{class:"token comment"},"// 访问优先级：左子树 -> 根结点 -> 右子树"),a(`
    `),s("span",{class:"token function"},"inOrder"),s("span",{class:"token punctuation"},"("),a("root"),s("span",{class:"token operator"},"->"),a("left"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
    vec`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"push_back"),s("span",{class:"token punctuation"},"("),a("root"),s("span",{class:"token operator"},"->"),a("val"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
    `),s("span",{class:"token function"},"inOrder"),s("span",{class:"token punctuation"},"("),a("root"),s("span",{class:"token operator"},"->"),a("right"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
`),s("span",{class:"token punctuation"},"}"),a(`

`),s("span",{class:"token comment"},"/* 后序遍历 */"),a(`
`),s("span",{class:"token keyword"},"void"),a(),s("span",{class:"token function"},"postOrder"),s("span",{class:"token punctuation"},"("),a("TreeNode"),s("span",{class:"token operator"},"*"),a(" root"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
    `),s("span",{class:"token keyword"},"if"),a(),s("span",{class:"token punctuation"},"("),a("root "),s("span",{class:"token operator"},"=="),a(),s("span",{class:"token keyword"},"nullptr"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token keyword"},"return"),s("span",{class:"token punctuation"},";"),a(`
    `),s("span",{class:"token comment"},"// 访问优先级：左子树 -> 右子树 -> 根结点"),a(`
    `),s("span",{class:"token function"},"postOrder"),s("span",{class:"token punctuation"},"("),a("root"),s("span",{class:"token operator"},"->"),a("left"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
    `),s("span",{class:"token function"},"postOrder"),s("span",{class:"token punctuation"},"("),a("root"),s("span",{class:"token operator"},"->"),a("right"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
    vec`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"push_back"),s("span",{class:"token punctuation"},"("),a("root"),s("span",{class:"token operator"},"->"),a("val"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
`),s("span",{class:"token punctuation"},"}"),a(`
`)])]),s("div",{class:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"}," "),s("br"),s("br")]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ts=s("p",null,"「深度优先遍历 Depth-First Traversal」使用栈作为数据存储结构，递归中使用的系统栈，系统栈会使用后自己回溯，也可以模拟栈来完成遍历。",-1),zs=s("p",null,"以中序遍历为例：",-1),Ls=s("p",null,[s("img",{src:N,alt:"image-20221231175137232",loading:"lazy"})],-1),Ns=s("p",null,[s("img",{src:A,alt:"image-20221231175204123",loading:"lazy"})],-1),As=s("p",null,[s("img",{src:j,alt:"image-20221231175322716",loading:"lazy"})],-1),js=s("p",null,[s("img",{src:O,alt:"image-20221231175356852",loading:"lazy"})],-1),Os=s("p",null,[s("img",{src:B,alt:"image-20221231175423051",loading:"lazy"})],-1),Bs=s("p",null,[s("img",{src:E,alt:"image-20221231175443249",loading:"lazy"})],-1),Es=s("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[s("pre",{class:"language-rust"},[s("code",null,`
`)]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),Ss=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"language-java"},[s("code",null,[s("span",{class:"token doc-comment comment"},[a(`/**
 * 前序遍历(非递归)
 * `),s("span",{class:"token keyword"},"@param"),a("  "),s("span",{class:"token parameter"},"root"),a(` 根结点
 * `),s("span",{class:"token keyword"},"@return"),a(` 前序遍历序列
 */`)]),a(`
`),s("span",{class:"token keyword"},"public"),a(),s("span",{class:"token class-name"},"List"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">"),s("span",{class:"token punctuation"},">")]),a(),s("span",{class:"token class-name"},"NoRecursivePreOrder"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),a(" root"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
  `),s("span",{class:"token keyword"},"if"),a(),s("span",{class:"token punctuation"},"("),a("root "),s("span",{class:"token operator"},"=="),a(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token keyword"},"return"),a(),s("span",{class:"token keyword"},"new"),a(),s("span",{class:"token class-name"},"ArrayList"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token punctuation"},">")]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a("  "),s("span",{class:"token comment"},"// 根结点为空时返回空序列"),a(`
  `),s("span",{class:"token class-name"},"Stack"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">"),s("span",{class:"token punctuation"},">")]),a(" stack "),s("span",{class:"token operator"},"="),a(),s("span",{class:"token keyword"},"new"),a(),s("span",{class:"token class-name"},"Stack"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token punctuation"},">")]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a("    "),s("span",{class:"token comment"},"// 初始化栈"),a(`
  `),s("span",{class:"token class-name"},"List"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">"),s("span",{class:"token punctuation"},">")]),a(" list "),s("span",{class:"token operator"},"="),a(),s("span",{class:"token keyword"},"new"),a(),s("span",{class:"token class-name"},"ArrayList"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token punctuation"},">")]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a("  "),s("span",{class:"token comment"},"// 存储遍历序列"),a(`
  `),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),a(" node "),s("span",{class:"token operator"},"="),a(" root"),s("span",{class:"token punctuation"},";"),a(`
  `),s("span",{class:"token keyword"},"while"),s("span",{class:"token punctuation"},"("),a("node "),s("span",{class:"token operator"},"!="),a(),s("span",{class:"token keyword"},"null"),a(),s("span",{class:"token operator"},"||"),a(),s("span",{class:"token operator"},"!"),a("stack"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"isEmpty"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
    `),s("span",{class:"token keyword"},"while"),a(),s("span",{class:"token punctuation"},"("),a("node "),s("span",{class:"token operator"},"!="),a(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
      list`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"add"),s("span",{class:"token punctuation"},"("),a("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a("            "),s("span",{class:"token comment"},"// 存储结点"),a(`
      stack`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"push"),s("span",{class:"token punctuation"},"("),a("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a("          "),s("span",{class:"token comment"},"// 结点入栈"),a(`
      node `),s("span",{class:"token operator"},"="),a(" node"),s("span",{class:"token punctuation"},"."),a("left"),s("span",{class:"token punctuation"},";"),a("          "),s("span",{class:"token comment"},"// 访问左子结点, 遍历左子树"),a(`
    `),s("span",{class:"token punctuation"},"}"),a(`
    `),s("span",{class:"token keyword"},"if"),a(),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"!"),a("stack"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"isEmpty"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
      node `),s("span",{class:"token operator"},"="),a(" stack"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"pop"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a("        "),s("span",{class:"token comment"},"// 弹出栈顶结点"),a(`
      node `),s("span",{class:"token operator"},"="),a(" node"),s("span",{class:"token punctuation"},"."),a("right"),s("span",{class:"token punctuation"},";"),a("         "),s("span",{class:"token comment"},"// 访问右子结点, 遍历右子树"),a(`
    `),s("span",{class:"token punctuation"},"}"),a(`
  `),s("span",{class:"token punctuation"},"}"),a(`
  `),s("span",{class:"token keyword"},"return"),a(" list"),s("span",{class:"token punctuation"},";"),a(`
`),s("span",{class:"token punctuation"},"}"),a(`
`),s("span",{class:"token doc-comment comment"},[a(`/**
 * 中序遍历(非递归)
 * `),s("span",{class:"token keyword"},"@param"),a("  "),s("span",{class:"token parameter"},"root"),a(` 根结点
 * `),s("span",{class:"token keyword"},"@return"),a(` 中序遍历序列
 */`)]),a(`
`),s("span",{class:"token keyword"},"public"),a(),s("span",{class:"token class-name"},"List"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">"),s("span",{class:"token punctuation"},">")]),a(),s("span",{class:"token class-name"},"NoRecursiveInOrder"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),a(" root"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
  `),s("span",{class:"token keyword"},"if"),a(),s("span",{class:"token punctuation"},"("),a("root "),s("span",{class:"token operator"},"=="),a(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token keyword"},"return"),a(),s("span",{class:"token keyword"},"new"),a(),s("span",{class:"token class-name"},"ArrayList"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token punctuation"},">")]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a("  "),s("span",{class:"token comment"},"// 根结点为空时返回空序列"),a(`
  `),s("span",{class:"token class-name"},"Stack"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">"),s("span",{class:"token punctuation"},">")]),a(" stack "),s("span",{class:"token operator"},"="),a(),s("span",{class:"token keyword"},"new"),a(),s("span",{class:"token class-name"},"Stack"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token punctuation"},">")]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a("    "),s("span",{class:"token comment"},"// 初始化栈"),a(`
  `),s("span",{class:"token class-name"},"List"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">"),s("span",{class:"token punctuation"},">")]),a(" list "),s("span",{class:"token operator"},"="),a(),s("span",{class:"token keyword"},"new"),a(),s("span",{class:"token class-name"},"ArrayList"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token punctuation"},">")]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a("  "),s("span",{class:"token comment"},"// 存储遍历序列"),a(`
  `),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),a(" node "),s("span",{class:"token operator"},"="),a(" root"),s("span",{class:"token punctuation"},";"),a(`
  `),s("span",{class:"token keyword"},"while"),s("span",{class:"token punctuation"},"("),a("node "),s("span",{class:"token operator"},"!="),a(),s("span",{class:"token keyword"},"null"),a(),s("span",{class:"token operator"},"||"),a(),s("span",{class:"token operator"},"!"),a("stack"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"isEmpty"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
    `),s("span",{class:"token keyword"},"while"),a(),s("span",{class:"token punctuation"},"("),a("node "),s("span",{class:"token operator"},"!="),a(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
      stack`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"push"),s("span",{class:"token punctuation"},"("),a("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a("          "),s("span",{class:"token comment"},"// 结点入栈"),a(`
      node `),s("span",{class:"token operator"},"="),a(" node"),s("span",{class:"token punctuation"},"."),a("left"),s("span",{class:"token punctuation"},";"),a("          "),s("span",{class:"token comment"},"// 访问左子结点, 遍历左子树"),a(`
    `),s("span",{class:"token punctuation"},"}"),a(`
    `),s("span",{class:"token keyword"},"if"),a(),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"!"),a("stack"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"isEmpty"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
      node `),s("span",{class:"token operator"},"="),a(" stack"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"pop"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a("        "),s("span",{class:"token comment"},"// 弹出栈顶结点"),a(`
      list`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"add"),s("span",{class:"token punctuation"},"("),a("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a("            "),s("span",{class:"token comment"},"// 存储结点"),a(`
      node `),s("span",{class:"token operator"},"="),a(" node"),s("span",{class:"token punctuation"},"."),a("right"),s("span",{class:"token punctuation"},";"),a("         "),s("span",{class:"token comment"},"// 访问右子结点, 遍历右子树"),a(`
    `),s("span",{class:"token punctuation"},"}"),a(`
  `),s("span",{class:"token punctuation"},"}"),a(`
  `),s("span",{class:"token keyword"},"return"),a(" list"),s("span",{class:"token punctuation"},";"),a(`
`),s("span",{class:"token punctuation"},"}"),a(`
`)])]),s("div",{class:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"}," "),s("br"),s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"}," "),s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br"),s("br")]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Cs=s("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[s("pre",{class:"language-cpp"},[s("code",null,`
`)]),s("div",{class:"highlight-lines"},[s("br")]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),qs=s("p",null,"后序遍历与前序遍历、中序遍历不同，后序遍历过程中，当一个结点作为 “根结点” 时，它的左子树遍历完之后不能出栈，必须等到右子树遍历完成之后才可以出栈，所以需要对当前结点的右子树是否遍历完成做出判断。",-1),Ps=s("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[s("pre",{class:"language-rust"},[s("code",null,`
`)]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),Rs=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"language-java"},[s("code",null,[s("span",{class:"token doc-comment comment"},[a(`/**
 * 后序遍历(非递归)
 * `),s("span",{class:"token keyword"},"@param"),a(),s("span",{class:"token parameter"},"root"),a(` 根结点
 * `),s("span",{class:"token keyword"},"@return"),a(` 后序遍历序列
 */`)]),a(`
`),s("span",{class:"token keyword"},"public"),a(),s("span",{class:"token class-name"},"List"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">"),s("span",{class:"token punctuation"},">")]),a(),s("span",{class:"token class-name"},"NoRecursivePostOrder2"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),a(" root"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
  `),s("span",{class:"token class-name"},"Stack"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">"),s("span",{class:"token punctuation"},">")]),a(" stack "),s("span",{class:"token operator"},"="),a(),s("span",{class:"token keyword"},"new"),a(),s("span",{class:"token class-name"},"Stack"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token punctuation"},">")]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
  `),s("span",{class:"token keyword"},"boolean"),a(" vistited "),s("span",{class:"token operator"},"="),a(),s("span",{class:"token boolean"},"false"),s("span",{class:"token punctuation"},";"),a("  "),s("span",{class:"token comment"},"// 为 false 时 ,当前结点右子树未被访问; 为 true 时, 右子树已被访问"),a(`
  `),s("span",{class:"token class-name"},"List"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">"),s("span",{class:"token punctuation"},">")]),a(" list "),s("span",{class:"token operator"},"="),a(),s("span",{class:"token keyword"},"new"),a(),s("span",{class:"token class-name"},"ArrayList"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token punctuation"},">")]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a("  "),s("span",{class:"token comment"},"// 存储序列"),a(`
  `),s("span",{class:"token keyword"},"while"),a(),s("span",{class:"token punctuation"},"("),a("root "),s("span",{class:"token operator"},"!="),a(),s("span",{class:"token keyword"},"null"),a(),s("span",{class:"token operator"},"||"),a(),s("span",{class:"token operator"},"!"),a("stack"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"isEmpty"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
    `),s("span",{class:"token keyword"},"while"),a(),s("span",{class:"token punctuation"},"("),a("root "),s("span",{class:"token operator"},"!="),a(),s("span",{class:"token keyword"},"null"),a(),s("span",{class:"token operator"},"&&"),a(),s("span",{class:"token operator"},"!"),a("vistited"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
      stack`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"push"),s("span",{class:"token punctuation"},"("),a("root"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
      root `),s("span",{class:"token operator"},"="),a(" root"),s("span",{class:"token punctuation"},"."),a("left"),s("span",{class:"token punctuation"},";"),a(`
    `),s("span",{class:"token punctuation"},"}"),a(`
    `),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),a(" topNode "),s("span",{class:"token operator"},"="),a(" stack"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"peek"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a("        "),s("span",{class:"token comment"},"// 查看栈顶结点"),a(`
    `),s("span",{class:"token keyword"},"if"),a(),s("span",{class:"token punctuation"},"("),a("topNode"),s("span",{class:"token punctuation"},"."),a("right "),s("span",{class:"token operator"},"!="),a(),s("span",{class:"token keyword"},"null"),a(),s("span",{class:"token operator"},"&&"),a(),s("span",{class:"token operator"},"!"),a("vistited"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a("  "),s("span",{class:"token comment"},"// 栈顶结点右子树不为空并且未被访问时"),a(`
      root `),s("span",{class:"token operator"},"="),a(" topNode"),s("span",{class:"token punctuation"},"."),a("right"),s("span",{class:"token punctuation"},";"),a("                    "),s("span",{class:"token comment"},"// 遍历右子树"),a(`
    `),s("span",{class:"token punctuation"},"}"),a(`
    `),s("span",{class:"token keyword"},"else"),a(),s("span",{class:"token punctuation"},"{"),a("                                     "),s("span",{class:"token comment"},"// 栈顶结点右子树为空 或者 已被访问"),a(`
      `),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),a(" node "),s("span",{class:"token operator"},"="),a(" stack"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"pop"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a("          "),s("span",{class:"token comment"},"// 此时该结点可以出栈"),a(`
      list`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"add"),s("span",{class:"token punctuation"},"("),a("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a("                          "),s("span",{class:"token comment"},"// 当前结点已被访问但是右子树不为空"),a(`
      `),s("span",{class:"token keyword"},"if"),a(),s("span",{class:"token punctuation"},"("),a("node"),s("span",{class:"token punctuation"},"."),a("right "),s("span",{class:"token operator"},"!="),a(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a("                "),s("span",{class:"token comment"},"// 当前结点右子树不为空时,说明还未遍历其右子树"),a(`
        vistited `),s("span",{class:"token operator"},"="),a(),s("span",{class:"token boolean"},"false"),s("span",{class:"token punctuation"},";"),a("                      "),s("span",{class:"token comment"},"// 目的是更新之前已经遍历完其他结点的右子树时的 visited = true"),a(`
      `),s("span",{class:"token punctuation"},"}"),a(`
      `),s("span",{class:"token keyword"},"if"),a(),s("span",{class:"token punctuation"},"("),a("stack"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"isEmpty"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
        `),s("span",{class:"token keyword"},"break"),s("span",{class:"token punctuation"},";"),a(`
      `),s("span",{class:"token punctuation"},"}"),a(`
      root `),s("span",{class:"token operator"},"="),a(" stack"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"peek"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),a("right"),s("span",{class:"token punctuation"},";"),a(`
      `),s("span",{class:"token keyword"},"if"),a(),s("span",{class:"token punctuation"},"("),a("root "),s("span",{class:"token operator"},"=="),a(" node"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a("             "),s("span",{class:"token comment"},"// 如果此时栈顶的结点是当前结点作为根结点 的 右子树的根结点时"),a(`
        vistited `),s("span",{class:"token operator"},"="),a(),s("span",{class:"token boolean"},"true"),s("span",{class:"token punctuation"},";"),a("              "),s("span",{class:"token comment"},"// 则右子树已遍历完成"),a(`
      `),s("span",{class:"token punctuation"},"}"),a(`
    `),s("span",{class:"token punctuation"},"}"),a(`
  `),s("span",{class:"token punctuation"},"}"),a(`
  `),s("span",{class:"token keyword"},"return"),a(" list"),s("span",{class:"token punctuation"},";"),a(`
`),s("span",{class:"token punctuation"},"}"),a(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Vs=s("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[s("pre",{class:"language-cpp"},[s("code",null,`
`)]),s("div",{class:"highlight-lines"},[s("br")]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),Ds=s("p",null,"上述思路有些麻烦，原二叉树镜像之后的树的前序遍历的翻转正好是原树的后序遍历，如下图：",-1),Fs=s("p",null,[s("img",{src:S,alt:"image-20230101155358861",loading:"lazy"})],-1),Hs=s("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[s("pre",{class:"language-rust"},[s("code",null,`
`)]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),Is=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"language-java"},[s("code",null,[s("span",{class:"token doc-comment comment"},[a(`/**
 * 后序遍历 (非递归, 镜像后树的前序遍历)
 * `),s("span",{class:"token keyword"},"@param"),a(),s("span",{class:"token parameter"},"root"),a(` 根结点
 * `),s("span",{class:"token keyword"},"@return"),a(` 后序遍历序列
 */`)]),a(`
`),s("span",{class:"token keyword"},"public"),a(),s("span",{class:"token class-name"},"List"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">"),s("span",{class:"token punctuation"},">")]),a(),s("span",{class:"token class-name"},"NoRecursivePostOrder"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),a(" root"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
  `),s("span",{class:"token class-name"},"List"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">"),s("span",{class:"token punctuation"},">")]),a(" list "),s("span",{class:"token operator"},"="),a(),s("span",{class:"token keyword"},"new"),a(),s("span",{class:"token class-name"},"ArrayList"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token punctuation"},">")]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a("     "),s("span",{class:"token comment"},"// 存储序列"),a(`
  `),s("span",{class:"token keyword"},"if"),a(),s("span",{class:"token punctuation"},"("),a("root "),s("span",{class:"token operator"},"!="),a(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
    `),s("span",{class:"token class-name"},"Stack"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">"),s("span",{class:"token punctuation"},">")]),a(" stack "),s("span",{class:"token operator"},"="),a(),s("span",{class:"token keyword"},"new"),a(),s("span",{class:"token class-name"},"Stack"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token punctuation"},">")]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
    stack`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"push"),s("span",{class:"token punctuation"},"("),a("root"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a("                      "),s("span",{class:"token comment"},"// 根结点入栈"),a(`
    `),s("span",{class:"token keyword"},"while"),a(),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"!"),a("stack"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"isEmpty"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
      `),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),a(" node "),s("span",{class:"token operator"},"="),a(" stack"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"pop"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
      list`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"add"),s("span",{class:"token punctuation"},"("),a("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
      `),s("span",{class:"token keyword"},"if"),a(),s("span",{class:"token punctuation"},"("),a("node"),s("span",{class:"token punctuation"},"."),a("left "),s("span",{class:"token operator"},"!="),a(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
        stack`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"push"),s("span",{class:"token punctuation"},"("),a("node"),s("span",{class:"token punctuation"},"."),a("left"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a("             "),s("span",{class:"token comment"},"// 左子结点先入栈 (后出栈)"),a(`
      `),s("span",{class:"token punctuation"},"}"),a(`
      `),s("span",{class:"token keyword"},"if"),a(),s("span",{class:"token punctuation"},"("),a("node"),s("span",{class:"token punctuation"},"."),a("right "),s("span",{class:"token operator"},"!="),a(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token punctuation"},"{"),a(`
        stack`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"push"),s("span",{class:"token punctuation"},"("),a("node"),s("span",{class:"token punctuation"},"."),a("right"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a("            "),s("span",{class:"token comment"},"// 右子结点后入栈 (先出栈)"),a(`
      `),s("span",{class:"token punctuation"},"}"),a(`
    `),s("span",{class:"token punctuation"},"}"),a(`
    `),s("span",{class:"token comment"},"// 上面出栈的顺序是   根 -> 右 -> 左 ,"),a(`
    `),s("span",{class:"token comment"},"// 然后将此反转之后就是 根 -> 左 -> 右, 正好就是后序遍历"),a(`
    `),s("span",{class:"token class-name"},"Collections"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"reverse"),s("span",{class:"token punctuation"},"("),a("list"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),a(`
  `),s("span",{class:"token punctuation"},"}"),a(`
  `),s("span",{class:"token keyword"},"return"),a(" list"),s("span",{class:"token punctuation"},";"),a(`
`),s("span",{class:"token punctuation"},"}"),a(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Qs=s("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[s("pre",{class:"language-cpp"},[s("code",null,`
`)]),s("div",{class:"highlight-lines"},[s("br")]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),Gs=s("h2",{id:"线索二叉树",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#线索二叉树","aria-hidden":"true"},"#"),a(" 线索二叉树")],-1),Js=s("p",null,"「线索二叉树 Thread Binary Tree」利用二叉树中未被利用的指针表示某种遍历序列中前驱和后序信息的二叉树。",-1),Ks=s("p",null,[a("一般的链表存储二叉树时只存储结点之间的父子关系，对于 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])])]),a(" 个结点的二叉树来说，每个结点都有左右两个指针，共有 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2"),s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"2n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mord mathnormal"},"n")])])]),a(" 个，而父子关系 (二叉树中的边) 共有 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n"),s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"n-1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(" ，所以还剩 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n"),s("mo",null,"+"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"n+1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(" 的指针没有表示任何关系 (未被利用)，所以引入线索二叉树的原因是加快查找某种遍历序列下结点的前驱和后继，从而通过某种遍历顺序下结点的前驱和后继直接进行某种顺序的遍历。")],-1),Us=i('<p>线索二叉树的结点表示信息如下：</p><p><img src="'+C+'" alt="image-20221227194004998" loading="lazy"></p><h3 id="中序线索二叉树" tabindex="-1"><a class="header-anchor" href="#中序线索二叉树" aria-hidden="true">#</a> 中序线索二叉树</h3><p><img src="'+q+'" alt="image-20221227200349823" loading="lazy"></p><h3 id="前序线索二叉树" tabindex="-1"><a class="header-anchor" href="#前序线索二叉树" aria-hidden="true">#</a> 前序线索二叉树</h3><h3 id="后序线索二叉树" tabindex="-1"><a class="header-anchor" href="#后序线索二叉树" aria-hidden="true">#</a> 后序线索二叉树</h3><h3 id="层序线索二叉树" tabindex="-1"><a class="header-anchor" href="#层序线索二叉树" aria-hidden="true">#</a> 层序线索二叉树</h3>',7);function Ws(Xs,Ys){const o=p("CodeTabs"),u=p("Tabs");return m(),k("div",null,[R,d(" more "),V,D,F,H,I,Q,G,J,K,U,W,X,Y,Z,$,ss,as,ns,ts,es,ls,cs,os,is,ps,c(o,{id:"290",data:[{title:"rust",value:"rust"},{title:"java",value:"java"},{title:"c++",value:"c++"}],"tab-id":"language"},{tab0:n(({title:t,value:e,isActive:l})=>[us]),tab1:n(({title:t,value:e,isActive:l})=>[rs]),tab2:n(({title:t,value:e,isActive:l})=>[ms]),_:1}),ks,c(o,{id:"304",data:[{title:"rust",value:"rust"},{title:"java",value:"java"},{title:"c++",value:"c++"}],"tab-id":"language"},{tab0:n(({title:t,value:e,isActive:l})=>[ds]),tab1:n(({title:t,value:e,isActive:l})=>[hs]),tab2:n(({title:t,value:e,isActive:l})=>[gs]),_:1}),bs,c(o,{id:"327",data:[{title:"rust",value:"rust"},{title:"java",value:"java"},{title:"c++",value:"c++"}],"tab-id":"language"},{tab0:n(({title:t,value:e,isActive:l})=>[vs]),tab1:n(({title:t,value:e,isActive:l})=>[ys]),tab2:n(({title:t,value:e,isActive:l})=>[ws]),_:1}),xs,c(o,{id:"447",data:[{title:"rust",value:"rust"},{title:"java",value:"java"},{title:"c++",value:"c++"}],"tab-id":"language"},{tab0:n(({title:t,value:e,isActive:l})=>[_s]),tab1:n(({title:t,value:e,isActive:l})=>[fs]),tab2:n(({title:t,value:e,isActive:l})=>[Ms]),_:1}),Ts,zs,c(u,{id:"464",data:[{title:"step1"},{title:"step2"},{title:"step3"},{title:"step4"},{title:"step5"},{title:"step6"}]},{tab0:n(({title:t,value:e,isActive:l})=>[Ls]),tab1:n(({title:t,value:e,isActive:l})=>[Ns]),tab2:n(({title:t,value:e,isActive:l})=>[As]),tab3:n(({title:t,value:e,isActive:l})=>[js]),tab4:n(({title:t,value:e,isActive:l})=>[Os]),tab5:n(({title:t,value:e,isActive:l})=>[Bs]),_:1}),c(o,{id:"496",data:[{title:"rust",value:"rust"},{title:"java",value:"java"},{title:"c++",value:"c++"}],"tab-id":"language"},{tab0:n(({title:t,value:e,isActive:l})=>[Es]),tab1:n(({title:t,value:e,isActive:l})=>[Ss]),tab2:n(({title:t,value:e,isActive:l})=>[Cs]),_:1}),qs,c(o,{id:"510",data:[{title:"rust",value:"rust"},{title:"java",value:"java"},{title:"c++",value:"c++"}],"tab-id":"language"},{tab0:n(({title:t,value:e,isActive:l})=>[Ps]),tab1:n(({title:t,value:e,isActive:l})=>[Rs]),tab2:n(({title:t,value:e,isActive:l})=>[Vs]),_:1}),Ds,Fs,c(o,{id:"527",data:[{title:"rust",value:"rust"},{title:"java",value:"java"},{title:"c++",value:"c++"}],"tab-id":"language"},{tab0:n(({title:t,value:e,isActive:l})=>[Hs]),tab1:n(({title:t,value:e,isActive:l})=>[Is]),tab2:n(({title:t,value:e,isActive:l})=>[Qs]),_:1}),Gs,Js,Ks,Us])}const sa=r(P,[["render",Ws],["__file","2.html.vue"]]);export{sa as default};
