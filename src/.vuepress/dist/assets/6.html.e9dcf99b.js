import{_ as r}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as m,c as k,e as h,a as s,b as n,d as o,w as a,f as t,r as p}from"./app.d359c0d2.js";const d="/aurora-blog/assets/image-20230111114020508.76e3fcf2.png",g="/aurora-blog/assets/image-20230111123808620.0be81030.png",w="/aurora-blog/assets/image-20230111134027322.567890a1.png",v={},y=s("p",null,"「哈夫曼树 Huffman Tree」",-1),x=s("p",null,[n("「哈夫曼树」也称「最优二叉树」，在含有 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])])]),n(" 个带权叶结点的二叉树中，其中带权路径长度 ( WPL ) "),s("strong",null,"最小"),n("的二叉树就是哈夫曼树。")],-1),b=t('<h2 id="哈夫曼树相关术语" tabindex="-1"><a class="header-anchor" href="#哈夫曼树相关术语" aria-hidden="true">#</a> 哈夫曼树相关术语</h2><ul><li>结点的权值 (weight)：有某种现实含义的数值 (如: 表示结点的重要性)</li><li>结点的「<strong>带权路径长度 weighted path length</strong>」(WPL)：从树的根结点到该结点的路径长度 (经过的边数) 与该结点上权值的乘积</li><li><strong>树的</strong>带权路径长度：树中所有<strong>叶结点</strong>的带权路径长度之<strong>和</strong>：</li></ul>',2),_=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"W"),s("mi",null,"P"),s("mi",null,"L"),s("mo",null,"="),s("munderover",null,[s("mo",null,"∑"),s("mrow",null,[s("mi",null,"k"),s("mo",null,"="),s("mn",null,"1")]),s("mi",null,"n")]),s("msub",null,[s("mi",null,"w"),s("mi",null,"k")]),s("mtext",null," "),s("msub",null,[s("mi",null,"l"),s("mi",null,"k")])]),s("annotation",{encoding:"application/x-tex"}," WPL = \\sum_{k=1}^{n}w_k \\ l_k ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"W"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"P"),s("span",{class:"mord mathnormal"},"L"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.9535em","vertical-align":"-1.3021em"}}),s("span",{class:"mop op-limits"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.6514em"}},[s("span",{style:{top:"-1.8479em","margin-left":"0em"}},[s("span",{class:"pstrut",style:{height:"3.05em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3.05em"}},[s("span",{class:"pstrut",style:{height:"3.05em"}}),s("span",null,[s("span",{class:"mop op-symbol large-op"},"∑")])]),s("span",{style:{top:"-4.3em","margin-left":"0em"}},[s("span",{class:"pstrut",style:{height:"3.05em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3021em"}},[s("span")])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3361em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0269em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace"}," "),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3361em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0197em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])])])],-1),f=s("p",null,[n("其中，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"w"),s("mi",null,"k")])]),s("annotation",{encoding:"application/x-tex"},"w_k")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3361em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0269em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),n(" 为第 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"k")]),s("annotation",{encoding:"application/x-tex"},"k")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k")])])]),n(" 个叶子结点的权值，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"l"),s("mi",null,"k")])]),s("annotation",{encoding:"application/x-tex"},"l_k")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8444em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3361em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0197em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),n(" 为从根结点到第 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"k")]),s("annotation",{encoding:"application/x-tex"},"k")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k")])])]),n(" 个叶子结点的路径长度（经过的边数）.")],-1),M=s("p",null,[s("img",{src:d,alt:"image-20230111114020508",loading:"lazy"})],-1),z=s("div",{class:"custom-container info"},[s("p",{class:"custom-container-title"},"相关信息"),s("p",null,"从上图中可以看出，当叶子结点权值越大并且距离根结点越近时，可以使整颗树的 WPL 更小，这也符合哈夫曼树的定义.")],-1),L=s("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[s("pre",{class:"language-rust"},[s("code",null,[s("span",{class:"token keyword"},"use"),n(),s("span",{class:"token namespace"},[n("std"),s("span",{class:"token punctuation"},"::"),n("collections"),s("span",{class:"token punctuation"},"::")]),s("span",{class:"token class-name"},"BinaryHeap"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token keyword"},"use"),n(),s("span",{class:"token namespace"},[n("std"),s("span",{class:"token punctuation"},"::"),n("cmp"),s("span",{class:"token punctuation"},"::")]),s("span",{class:"token class-name"},"Reverse"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token comment"},`/**
 * v: 初始各个结点的值
 * return : wpl 
 */`),n(`
`),s("span",{class:"token keyword"},"fn"),n(),s("span",{class:"token function-definition function"},"cal_wpl"),s("span",{class:"token punctuation"},"("),n("v"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"Vec"),s("span",{class:"token operator"},"<"),s("span",{class:"token keyword"},"usize"),s("span",{class:"token operator"},">"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"->"),n(),s("span",{class:"token keyword"},"usize"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token keyword"},"let"),n(),s("span",{class:"token keyword"},"mut"),n(" heap "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token class-name"},"BinaryHeap"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"Reverse"),s("span",{class:"token operator"},"<"),s("span",{class:"token keyword"},"usize"),s("span",{class:"token operator"},">>"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token function"},"new"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token comment"},"// 初始化小根堆"),n(`
  `),s("span",{class:"token keyword"},"for"),n(" i "),s("span",{class:"token keyword"},"in"),n(" v "),s("span",{class:"token punctuation"},"{"),n(" heap"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"push"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"Reverse"),s("span",{class:"token punctuation"},"("),n("i"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token punctuation"},"}"),n(`
  `),s("span",{class:"token keyword"},"let"),n(),s("span",{class:"token keyword"},"mut"),n(" wpl "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token comment"},"// 每次选择堆中最小的两个元素"),n(`
  `),s("span",{class:"token keyword"},"while"),n(" heap"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"len"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},">"),n(),s("span",{class:"token number"},"1"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"let"),n(" x "),s("span",{class:"token operator"},"="),n(" heap"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"pop"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"unwrap_or"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"Reverse"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token keyword"},"let"),n(" y "),s("span",{class:"token operator"},"="),n(" heap"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"pop"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"unwrap_or"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"Reverse"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    wpl `),s("span",{class:"token operator"},"="),n(" wpl "),s("span",{class:"token operator"},"+"),n(" x"),s("span",{class:"token number"},".0"),n(),s("span",{class:"token operator"},"+"),n(" y"),s("span",{class:"token number"},".0"),s("span",{class:"token punctuation"},";"),n(`
    heap`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"push"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"Reverse"),s("span",{class:"token punctuation"},"("),n("x"),s("span",{class:"token number"},".0"),n(),s("span",{class:"token operator"},"+"),n(" y"),s("span",{class:"token number"},".0"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n("   "),s("span",{class:"token comment"},"// 将合并后的值加入堆中"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`
  wpl
`),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token keyword"},"fn"),n(),s("span",{class:"token function-definition function"},"main"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token keyword"},"let"),n(" v"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"Vec"),s("span",{class:"token operator"},"<"),s("span",{class:"token keyword"},"usize"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token macro property"},"vec!"),s("span",{class:"token punctuation"},"["),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"3"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"4"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"5"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"let"),n(" wpl "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"cal_wpl"),s("span",{class:"token punctuation"},"("),n("v"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token macro property"},"println!"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"{}"'),s("span",{class:"token punctuation"},","),n(" wpl"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),F=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"language-java"},[s("code",null,[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token import"},[s("span",{class:"token namespace"},[n("java"),s("span",{class:"token punctuation"},"."),n("util"),s("span",{class:"token punctuation"},".")]),s("span",{class:"token class-name"},"Arrays")]),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token import"},[s("span",{class:"token namespace"},[n("java"),s("span",{class:"token punctuation"},"."),n("util"),s("span",{class:"token punctuation"},".")]),s("span",{class:"token class-name"},"PriorityQueue")]),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"class"),n(),s("span",{class:"token class-name"},"Huffman"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"static"),n(),s("span",{class:"token keyword"},"void"),n(),s("span",{class:"token function"},"main"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"String"),s("span",{class:"token punctuation"},"["),s("span",{class:"token punctuation"},"]"),n(" args"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token class-name"},"Integer"),n(" a"),s("span",{class:"token punctuation"},"["),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"{"),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"3"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"4"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"5"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token comment"},"// 定义小根堆 PriorityQueue 默认是小根堆"),n(`
    `),s("span",{class:"token class-name"},"PriorityQueue"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"Integer"),s("span",{class:"token punctuation"},">")]),n(" heap "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token class-name"},"PriorityQueue"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token punctuation"},">")]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    heap`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"addAll"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"Arrays"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"asList"),s("span",{class:"token punctuation"},"("),n("a"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token class-name"},"Integer"),n(" wpl "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token comment"},"// 每次选择堆中最小的两个元素"),n(`
    `),s("span",{class:"token keyword"},"while"),n(),s("span",{class:"token punctuation"},"("),n("heap"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"size"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},">"),n(),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
      `),s("span",{class:"token class-name"},"Integer"),n(" x "),s("span",{class:"token operator"},"="),n(" heap"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"poll"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
      `),s("span",{class:"token class-name"},"Integer"),n(" y "),s("span",{class:"token operator"},"="),n(" heap"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"poll"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
      wpl `),s("span",{class:"token operator"},"+="),n(" x "),s("span",{class:"token operator"},"+"),n(" y"),s("span",{class:"token punctuation"},";"),n(`
      heap`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"add"),s("span",{class:"token punctuation"},"("),n("x "),s("span",{class:"token operator"},"+"),n(" y"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n("   "),s("span",{class:"token comment"},"// 将合并后的值加入堆中"),n(`
    `),s("span",{class:"token punctuation"},"}"),n(`
    `),s("span",{class:"token class-name"},"System"),s("span",{class:"token punctuation"},"."),n("out"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"println"),s("span",{class:"token punctuation"},"("),n("wpl"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),A=s("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[s("pre",{class:"language-cpp"},[s("code",null,[s("span",{class:"token macro property"},[s("span",{class:"token directive-hash"},"#"),s("span",{class:"token directive keyword"},"include"),n(),s("span",{class:"token string"},"<iostream>")]),n(`
`),s("span",{class:"token macro property"},[s("span",{class:"token directive-hash"},"#"),s("span",{class:"token directive keyword"},"include"),n(),s("span",{class:"token string"},"<queue>")]),n(`
`),s("span",{class:"token macro property"},[s("span",{class:"token directive-hash"},"#"),s("span",{class:"token directive keyword"},"include"),n(),s("span",{class:"token string"},"<vector>")]),n(`
`),s("span",{class:"token keyword"},"using"),n(),s("span",{class:"token keyword"},"namespace"),n(" std"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token keyword"},"int"),n(),s("span",{class:"token function"},"cal_wpl"),s("span",{class:"token punctuation"},"("),n("vector"),s("span",{class:"token operator"},"<"),s("span",{class:"token keyword"},"int"),s("span",{class:"token operator"},">"),n(" a"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token comment"},"// 定义小根堆"),n(`
  priority_queue`),s("span",{class:"token operator"},"<"),s("span",{class:"token keyword"},"int"),s("span",{class:"token punctuation"},","),n(" vector"),s("span",{class:"token operator"},"<"),s("span",{class:"token keyword"},"int"),s("span",{class:"token operator"},">"),s("span",{class:"token punctuation"},","),n(" greater"),s("span",{class:"token operator"},"<"),s("span",{class:"token keyword"},"int"),s("span",{class:"token operator"},">>"),n(" heap"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token comment"},"// 初始化小根堆"),n(`
  `),s("span",{class:"token keyword"},"for"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"auto"),n(" v"),s("span",{class:"token operator"},":"),n(" a"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(" heap"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"push"),s("span",{class:"token punctuation"},"("),n("v"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),s("span",{class:"token punctuation"},"}"),n(`
  `),s("span",{class:"token keyword"},"int"),n(" wpl "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token comment"},"// 每次选择堆中最小的两个元素"),n(`
  `),s("span",{class:"token keyword"},"while"),n(),s("span",{class:"token punctuation"},"("),n(" heap"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"size"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},">"),n(),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"int"),n(" x "),s("span",{class:"token operator"},"="),n(" heap"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"top"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    heap`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"pop"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token keyword"},"int"),n(" y "),s("span",{class:"token operator"},"="),n(" heap"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"top"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    heap`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"pop"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    wpl `),s("span",{class:"token operator"},"+="),n(" x "),s("span",{class:"token operator"},"+"),n(" y"),s("span",{class:"token punctuation"},";"),n(`
    heap`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"push"),s("span",{class:"token punctuation"},"("),n("x "),s("span",{class:"token operator"},"+"),n(" y"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"// 将合并后的值加入堆中"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`
  `),s("span",{class:"token keyword"},"return"),n(" wpl"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token keyword"},"int"),n(),s("span",{class:"token function"},"main"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
  vector`),s("span",{class:"token operator"},"<"),s("span",{class:"token keyword"},"int"),s("span",{class:"token operator"},">"),n(" a "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"{"),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"3"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"4"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"5"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"int"),n(" wpl "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"cal_wpl"),s("span",{class:"token punctuation"},"("),n("a"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  cout `),s("span",{class:"token operator"},"<<"),n(" wpl "),s("span",{class:"token operator"},"<<"),n(" endl"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),P=s("h2",{id:"哈夫曼树的构造",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#哈夫曼树的构造","aria-hidden":"true"},"#"),n(" 哈夫曼树的构造")],-1),C=s("p",null,[n("给定 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])])]),n(" 个权值分别为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"w"),s("mn",null,"1")])]),s("annotation",{encoding:"application/x-tex"},"w_1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0269em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),n(" ，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"w"),s("mn",null,"2")])]),s("annotation",{encoding:"application/x-tex"},"w_2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0269em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),n(" ，… ，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"w"),s("mi",null,"n")])]),s("annotation",{encoding:"application/x-tex"},"w_n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0269em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),n(" 的结点，构造哈夫曼树的过程如下：")],-1),B=s("ol",null,[s("li",null,[n("将这 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])])]),n(" 个结点分别作为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])])]),n(" 颗仅含一个结点的二叉树，构成森林 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"F")]),s("annotation",{encoding:"application/x-tex"},"F")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"F")])])]),n(" ；")]),s("li",null,[n("构造一个新结点，从 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"F")]),s("annotation",{encoding:"application/x-tex"},"F")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"F")])])]),n(" 中选取两颗根结点权值最小的树作为新结点的左、右子树，并且将新结点的权值置为左、右子树上根结点的权值之和；")]),s("li",null,[n("从 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"F")]),s("annotation",{encoding:"application/x-tex"},"F")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"F")])])]),n(" 中删除已选择的树，同时将新得到的树加入 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"F")]),s("annotation",{encoding:"application/x-tex"},"F")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"F")])])]),n(" 中；")]),s("li",null,[n("重复步骤 "),s("code",null,"2."),n(),s("code",null,"3."),n(" ，直至 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"F")]),s("annotation",{encoding:"application/x-tex"},"F")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"F")])])]),n(" 中只剩下一颗树。")])],-1),R=s("p",null,[s("strong",null,"构造之后的哈夫曼树的性质"),n("：")],-1),W=s("ol",null,[s("li",null,"每个初始结点最终都成为叶结点，且权值越小的结点到根结点的路径长度越长"),s("li",null,[n("哈夫曼树的结点总数为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2"),s("mi",null,"n"),s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"2n-1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])])]),s("li",null,[n("哈夫曼树中不存在度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),n(" 的结点")])],-1),j=t('<p>例如：使用下列结点构造哈夫曼树，结点下方为其权值</p><p><img src="'+g+'" alt="image-20230111123808620" loading="lazy"></p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>构造的哈夫曼树并不唯一，只要是根据上述要求进行构造的且 WPL都是最小且一致的都是哈夫曼树.</p></div><h2 id="哈夫曼树的应用" tabindex="-1"><a class="header-anchor" href="#哈夫曼树的应用" aria-hidden="true">#</a> 哈夫曼树的应用</h2><h3 id="哈夫曼编码" tabindex="-1"><a class="header-anchor" href="#哈夫曼编码" aria-hidden="true">#</a> 哈夫曼编码</h3>',5),I=s("p",null,[n("「等长编码」是指表示字符的编码都是等长的，那么表示 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])])]),n(" 个不同字符需要 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"⌈"),s("mi",null,"l"),s("mi",null,"o"),s("msub",null,[s("mi",null,"g"),s("mn",null,"2")]),s("mtext",null," "),s("mi",null,"n"),s("mo",{stretchy:"false"},"⌉")]),s("annotation",{encoding:"application/x-tex"},"⌈log_2 \\ n⌉")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"⌈"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0359em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace"}," "),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},"⌉")])])]),n(" 位，例如：如果使用等长编码表示 ASCII 字符集，每个字符需要 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"l"),s("mi",null,"o"),s("msub",null,[s("mi",null,"g"),s("mn",null,"2")]),s("mtext",null," "),s("mn",null,"128"),s("mo",null,"="),s("mn",null,"8")]),s("annotation",{encoding:"application/x-tex"},"log_2 \\ 128=8")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0359em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace"}," "),s("span",{class:"mord"},"128"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"8")])])]),n(" 位编码；")],-1),V=t('<p>当每个字符的使用频率相等时，则「等长编码」是一种<strong>空间效率最高</strong>的编码方式，但是当频率不同时，等长编码往往不是最优选择，此时可采用「不等长编码」，将使用频率高的字符使用更少的编码表示，将使用频率低的字符使用更多的编码表示，以此来获得更好的空间效率。</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>对于不等长编码的设计需要谨慎，因为其可能导致歧义，例如：用 <code>0</code> 表示 <code>A</code>，<code>1</code> 表示 <code>B</code> ，用 <code>10</code> 表示 <code>C</code> ，此时发来编码 <code>1010</code> ，则对其的解码可以为 <code>BABA</code> 或者 <code>CC</code> ，这就产生了歧义。</p></div><p>「<strong>前缀编码 prefix code</strong> 」是指一组编码中任一编码都不是其他任何一个编码的前缀。 —— 这就保证了解码时不会出现歧义。</p><p>而「哈夫曼编码」就是一种「前缀编码」，其是<strong>最短的</strong>不等长编码方案。也即有最好的空间效率 (占用最少的空间)。</p><h3 id="哈夫曼编码的构造过程" tabindex="-1"><a class="header-anchor" href="#哈夫曼编码的构造过程" aria-hidden="true">#</a> 哈夫曼编码的构造过程</h3><p>其构造过程就是构造哈夫曼树的过程，将字符出现的频率替换为权值，即可得到哈夫曼编码，如下图：</p><table><thead><tr><th style="text-align:center;">字符</th><th style="text-align:center;">频率</th><th style="text-align:center;">编码</th></tr></thead><tbody><tr><td style="text-align:center;">A</td><td style="text-align:center;">35</td><td style="text-align:center;"><code>10</code></td></tr><tr><td style="text-align:center;">B</td><td style="text-align:center;">25</td><td style="text-align:center;"><code>00</code></td></tr><tr><td style="text-align:center;">C</td><td style="text-align:center;">15</td><td style="text-align:center;"><code>01</code></td></tr><tr><td style="text-align:center;">D</td><td style="text-align:center;">15</td><td style="text-align:center;"><code>110</code></td></tr><tr><td style="text-align:center;">E</td><td style="text-align:center;">10</td><td style="text-align:center;"><code>111</code></td></tr></tbody></table><p><img src="'+w+'" alt="image-20230111134027322" loading="lazy"></p>',8);function N(H,Q){const i=p("RouterLink"),u=p("CodeTabs");return m(),k("div",null,[y,h(" more "),x,b,_,f,M,z,s("p",null,[n("计算 WPL 时可使用「"),o(i,{to:"/Algorithm/data_struct/16.html"},{default:a(()=>[n("小根堆(优先队列)")]),_:1}),n("」来实现：")]),o(u,{id:"42",data:[{title:"rust",value:"rust"},{title:"java",value:"java"},{title:"c++",value:"c++"}],"tab-id":"language"},{tab0:a(({title:e,value:l,isActive:c})=>[L]),tab1:a(({title:e,value:l,isActive:c})=>[F]),tab2:a(({title:e,value:l,isActive:c})=>[A]),_:1}),P,C,B,R,W,j,I,V])}const q=r(v,[["render",N],["__file","6.html.vue"]]);export{q as default};
