import{aP as u,S as d,U as k,ac as m,V as n,af as a,ad as s,a9 as t,aQ as o,D as r}from"./framework-b86c3bdd.js";const h={},g=n("p",null,"请求、响应",-1),b=n("h1",{id:"基于注解的编程模型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#基于注解的编程模型","aria-hidden":"true"},"#"),s(" 基于注解的编程模型")],-1),v=n("h2",{id:"控制器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#控制器","aria-hidden":"true"},"#"),s(" 控制器")],-1),_=n("p",null,"SpringMVC 中的 MVC 模型中的 “C” 就是 Controller .",-1),w=n("p",null,[s("可以在某个类上声明 "),n("code",null,"@Controller"),s(" 作为 web Controller.")],-1),f={href:"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/mvc/Controller.html",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"@Controller",-1),C={href:"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"@RestController",-1),M=n("code",null,"@Controllrt",-1),q=n("code",null,"@ResponseBody",-1),y=o(`<div class="hint-container info"><p class="hint-container-title">相关信息</p><p><code>@RestController</code> 是一个组合注解，如上所示，其用于 RESTful 风格的 API 设计.传统的 web 应用与 前端之间不分离，所以需要 ModeView 模型，那么对于一个请求需要返回一个渲染好的页面，而 <code>@ResponseBody</code> 可以将方法的返回值直接作为响应正文，这样对于前后端分离的应用来说更加适用.</p></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloHandler</span> <span class="token punctuation">{</span>
  
  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>             
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">helloMVC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;Hello StringMVC&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//  访问   ...../test/hello 路径响应 Hello StringMVC </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p><code>@Controller</code> 注解为 Spring 注解模型之一，在 Springboot 中不需要直接配置，因为其启动类上的注解是一个组合注解，其中包含下面的注解扫描方式，在 Spring 中使用需要将其配置在扫描 Bean 的包范围下：</p></div>`,3),S=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Configuration"),s(`
`),n("span",{class:"token annotation punctuation"},"@CompentScan"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"com.learn.Controller"'),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"WebConfig"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token comment"},"// ..."),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),R=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@CompentScan"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"com.learn.Controller"'),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"App"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),V=n("div",{class:"language-xml line-numbers-mode","data-ext":"xml"},[n("pre",{xml:"",class:"language-xml"},[n("code",null,[n("span",{class:"token prolog"},'<?xml version="1.0" encoding="UTF-8"?>'),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("beans")]),s(),n("span",{class:"token attr-name"},"xmlns"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("http://www.springframework.org/schema/beans"),n("span",{class:"token punctuation"},'"')]),s(`
    `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"xmlns:"),s("xsi")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("http://www.w3.org/2001/XMLSchema-instance"),n("span",{class:"token punctuation"},'"')]),s(`
    `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"xmlns:"),s("p")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("http://www.springframework.org/schema/p"),n("span",{class:"token punctuation"},'"')]),s(`
    `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"xmlns:"),s("context")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("http://www.springframework.org/schema/context"),n("span",{class:"token punctuation"},'"')]),s(`
    `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"xsi:"),s("schemaLocation")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s(`
        http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd`),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`

    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token namespace"},"context:"),s("component-scan")]),s(),n("span",{class:"token attr-name"},"base-package"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("org.example.web"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},"/>")]),s(`

    `),n("span",{class:"token comment"},"<!-- ... -->"),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("beans")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),T=n("h2",{id:"请求映射",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#请求映射","aria-hidden":"true"},"#"),s(" 请求映射")],-1),P=n("p",null,"在类上加上 控制器 之后就可以在该类中进行请求映射了。",-1),A={href:"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/RequestMapping.html",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"@RequestMapping",-1),U=n("strong",null,"属性",-1),B={href:"http://docs.jcohy.com/docs/spring-framework/5.3.22/html5/zh-cn/web.html#mvc-ann-requestmapping-uri-templates",target:"_blank",rel:"noopener noreferrer"},H={href:"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/RequestMethod.html",target:"_blank",rel:"noopener noreferrer"},I=n("li",null,"(param) 请求参数，",-1),N=n("li",null,"(headers) 请求头参数，",-1),E=n("li",null,"(consumes，produces) 媒体类型，",-1),G=o("<p>进行匹配. 可以在<strong>类级别</strong>使用它来表示共享映射,或在<strong>方法级</strong>别上用于缩小到特定的请求映射范围.</p><p>封装 Http 请求方法的请求映射注解：</p><ul><li><code>@GetMapping</code></li><li><code>@PostMapping</code></li><li><code>@PutMapping</code></li><li><code>@DeleteMapping</code></li><li><code>@PatchMapping</code></li></ul><blockquote><p><code>consumes</code> 可以根据【<strong>请求的</strong> <code>Content-Type</code>】 缩小请求映射范围</p></blockquote>",4),D=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@PostMapping"),n("span",{class:"token punctuation"},"("),s("path "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"/adduser"'),n("span",{class:"token punctuation"},","),s(` 
             consumes `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"application/json"'),n("span",{class:"token punctuation"},")"),s(` 
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"addUser"),n("span",{class:"token punctuation"},"("),n("span",{class:"token annotation punctuation"},"@RequestBody"),s(),n("span",{class:"token class-name"},"User"),s(" user"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// ..."),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),O={class:"hint-container info"},X=n("p",{class:"hint-container-title"},"相关信息",-1),z=n("p",null,[n("code",null,"consumes"),s(" 属性还支持否定表达式 ：")],-1),F=n("ul",null,[n("li",null,[s("例如,"),n("code",null,"!text/plain"),s(" 表示除 "),n("code",null,"text/plain"),s(" 之外的任何内容类型.")])],-1),J={href:"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/MediaType.html",target:"_blank",rel:"noopener noreferrer"},Q=n("ul",null,[n("li",null,[s("例如, "),n("code",null,"MediaType.APPLICATION_JSON_VALUE")])],-1),W=o('<div class="hint-container warning"><p class="hint-container-title">注意</p><p>可以在类级别声明共享 <code>consumes</code> 属性. 但是,与大多数其他请求映射属性不同,在<strong>类级别</strong>使用时,会对方法级别<code>consumes</code> 属性<strong>覆盖</strong>而不是扩展.</p></div><blockquote><p><code>produces</code> 根据 <code>Accept</code> 请求头和控制器方法<strong>生成的内容</strong>类型列表来缩小请求映射</p></blockquote>',2),K=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@GetMapping"),n("span",{class:"token punctuation"},"("),s("path "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"/users/{userId}"'),n("span",{class:"token punctuation"},","),s(` 
            produces `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"application/json"'),n("span",{class:"token punctuation"},")"),s(` 
`),n("span",{class:"token annotation punctuation"},"@ResponseBody"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"User"),s(),n("span",{class:"token function"},"getUser"),n("span",{class:"token punctuation"},"("),n("span",{class:"token annotation punctuation"},"@PathVariable"),s(),n("span",{class:"token class-name"},"String"),s(" userId"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// ..."),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Y=n("p",null,[s("其性质同 "),n("code",null,"consumes"),s(" 一致。")],-1),Z=n("h1",{id:"函数式编程模型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#函数式编程模型","aria-hidden":"true"},"#"),s(" 函数式编程模型")],-1);function $(nn,sn){const e=r("ExternalLinkIcon"),p=r("CodeTabs");return d(),k("div",null,[g,m(" more "),b,v,_,w,n("ul",null,[n("li",null,[n("p",null,[n("a",f,[x,a(e)])])]),n("li",null,[n("p",null,[n("a",C,[j,a(e)]),s(" = "),M,s(" + "),q])])]),y,a(p,{id:"39",data:[{title:"java 配置类"},{title:"Spring 启动类"},{title:"XML"}]},{tab0:t(({title:l,value:c,isActive:i})=>[S]),tab1:t(({title:l,value:c,isActive:i})=>[R]),tab2:t(({title:l,value:c,isActive:i})=>[V]),_:1}),T,P,n("p",null,[n("a",A,[L,a(e)]),s(" 注解用于将请求映射到控制器方法. 它具有各种"),U,s(",可以通过：")]),n("ul",null,[n("li",null,[s("(path) URL，对于 URL 的模式匹配两种，具体在 "),n("a",B,[s("这里"),a(e)])]),n("li",null,[s("(method) HTTP 方法，可指定的 Http 方法，具体在 "),n("a",H,[s("RequestMethod "),a(e)]),s(" 中")]),I,N,E]),G,D,n("div",O,[X,z,F,n("p",null,[s("也可以指定 "),n("a",J,[s("MediaType"),a(e)]),s(" 中的常量类型作为限制:")]),Q]),W,K,Y,Z])}const en=u(h,[["render",$],["__file","2.html.vue"]]);export{en as default};
