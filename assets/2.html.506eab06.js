import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as r,c as k,e as d,a as n,b as s,d as a,w as o,f as m,r as u}from"./app.1c26b036.js";const b={},v=n("h2",{id:"二叉树相关习题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#二叉树相关习题","aria-hidden":"true"},"#"),s(" 二叉树相关习题")],-1),h={id:"_919-完全二叉树插入器",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#_919-完全二叉树插入器","aria-hidden":"true"},"#",-1),f={href:"https://leetcode.cn/problems/complete-binary-tree-inserter/",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,"题目输入的是一颗使用【二叉链表存储结构的完全二叉树】，然后需要对其进行三个操作：",-1),w=n("ul",null,[n("li",null,"以层序遍历的方式输出结点"),n("li",null,"插入一个结点到二叉树，并返回该插入结点的父结点"),n("li",null,"返回整个完全二叉树的根结点")],-1),g=n("p",null,"【思路】",-1),x=n("p",null,"由于题目中二叉树的存储方式是不存储「父结点」的二叉链表形式，那么此时插入一个结点的话，需要遍历整颗二叉树后寻找其父结点，代价过大。然而完全二叉树还可以使用「数组」以层序遍历的顺序存储，这个可通过索引快速的定位「父结点」。",-1),q=n("p",null,[s("一维数组从 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"0")]),n("annotation",{encoding:"application/x-tex"},"0")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"0")])])]),s(" 开始，当结点的索引为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"i")]),n("annotation",{encoding:"application/x-tex"},"i")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6595em"}}),n("span",{class:"mord mathnormal"},"i")])])]),s(" 时，其父结点的索引为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"⌈"),n("mfrac",null,[n("mrow",null,[n("mi",null,"i"),n("mo",null,"−"),n("mn",null,"1")]),n("mn",null,"2")]),n("mo",{stretchy:"false"},"⌉")]),n("annotation",{encoding:"application/x-tex"},"⌈\\frac{i-1}{2} ⌉")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.2007em","vertical-align":"-0.345em"}}),n("span",{class:"mopen"},"⌈"),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8557em"}},[n("span",{style:{top:"-2.655em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.394em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"i"),n("span",{class:"mbin mtight"},"−"),n("span",{class:"mord mtight"},"1")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.345em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})]),n("span",{class:"mclose"},"⌉")])])]),s(" ，其左子结点的索引为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"2"),n("mo",null,"×"),n("mi",null,"i"),n("mo",null,"+"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"2×i+1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"2"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7429em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1")])])]),s(" ，右子结点的索引为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"2"),n("mo",null,"×"),n("mi",null,"i"),n("mo",null,"+"),n("mn",null,"2")]),n("annotation",{encoding:"application/x-tex"},"2×i+2")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"2"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7429em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"2")])])]),s(" 。")],-1),T=n("p",null,"【步骤】",-1),N=n("ol",null,[n("li",null,"将以二叉链表存储的完全二叉树转换为数组存储，存储顺序为层序遍历，也即对树进行「广度优先遍历」的同时存入数组。"),n("li",null,"插入结点时，直接插入数组末尾即可，然后通过索引寻找「父结点」")],-1),S={class:"custom-container details"},z=n("summary",null,"代码实现",-1),B=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"CBTInserter"),s(),n("span",{class:"token punctuation"},"{"),s(`
`),n("span",{class:"token keyword"},"private"),n("span",{class:"token operator"},":"),s(`
    TreeNode`),n("span",{class:"token operator"},"*"),s(" root"),n("span",{class:"token punctuation"},";"),s("       "),n("span",{class:"token comment"},"// 完全二叉树的根结点"),s(`
    vector`),n("span",{class:"token operator"},"<"),s("TreeNode"),n("span",{class:"token operator"},"*"),n("span",{class:"token operator"},">"),s(" h"),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},"// 以层序遍历存储完全二叉树 "),s(`
`),n("span",{class:"token keyword"},"public"),n("span",{class:"token operator"},":"),s(`
  	`),n("span",{class:"token comment"},"// BFS "),s(`
    `),n("span",{class:"token function"},"CBTInserter"),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"*"),s(" root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),s("root "),n("span",{class:"token operator"},"="),s(" root"),n("span",{class:"token punctuation"},";"),s(`
        queue`),n("span",{class:"token operator"},"<"),s("TreeNode"),n("span",{class:"token operator"},"*"),n("span",{class:"token operator"},">"),s(" q"),n("span",{class:"token punctuation"},";"),s(`
        q`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"empty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"auto"),s(" node "),n("span",{class:"token operator"},"="),s(" q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"front"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            q`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            h`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push_back"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},")"),s(" q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},")"),s(" q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"insert"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" val"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"auto"),s(" t "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token function"},"TreeNode"),n("span",{class:"token punctuation"},"("),s("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        h`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push_back"),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" k "),n("span",{class:"token operator"},"="),s(" h"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"size"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" p "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("k "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"/"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},";"),s("         "),n("span",{class:"token comment"},"// 父结点索引 "),s(`
        `),n("span",{class:"token comment"},"// 判断当前结点是左子结点还是右子结点"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("p "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"=="),s(" k"),n("span",{class:"token punctuation"},")"),s(" h"),n("span",{class:"token punctuation"},"["),s("p"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},"->"),s("left "),n("span",{class:"token operator"},"="),s(" t"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"else"),s(" h"),n("span",{class:"token punctuation"},"["),s("p"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},"->"),s("right "),n("span",{class:"token operator"},"="),s(" t"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" h"),n("span",{class:"token punctuation"},"["),s("p"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},"->"),s("val"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    TreeNode`),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token function"},"get_root"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),s("root"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},`/**
 * Your CBTInserter object will be instantiated and called as such:
 * CBTInserter* obj = new CBTInserter(root);
 * int param_1 = obj->insert(val);
 * TreeNode* param_2 = obj->get_root();
 */`),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),F={id:"_515-在每个树行中找最大值",tabindex:"-1"},M=n("a",{class:"header-anchor",href:"#_515-在每个树行中找最大值","aria-hidden":"true"},"#",-1),C={href:"https://leetcode.cn/problems/find-largest-value-in-each-tree-row/",target:"_blank",rel:"noopener noreferrer"},L=m("<p>题目的要求是求解二叉树中每层结点值的最大值，并且使用的二叉链表存储的二叉树，那么可对整颗二叉树进行一次遍历即可，在遍历的同时更新每层的最大值即可，使用「深度优先遍历」或者「宽度优先遍历」都可以。</p><p>「DFS」做法：</p><p>DFS 每次的操作是向下扩展或者向上回溯，每次的递归操作都伴随着所在层数的改变，由于二叉树的深度未知，所以需要一个 <code>max_depth</code> 在 DFS 的同时记录二叉树的深度，然后每到达一层，就更新这层的最大值。步骤：</p><ol><li><strong>处理边界</strong>：当所在结点为 <code>null</code> 时，回溯。</li><li><strong>DFS 时伴随的操作</strong>：更新最大深度 <code>max_depth</code>，更新每层的最大值(第一次新的一层到达时，直接填入)；</li><li><strong>扩展分支</strong>：因为是二叉树，所以向左扩展，或者向右扩展。</li></ol><p>「BFS」做法：</p><p>BFS 本身就是层序遍历，每次都是遍历一层，但平时写 BFS，一次循环只遍历一层的一个结点，该层的其他结点还在队列中，所以只需要在每次循环中遍历完队列中所有的结点就可以每次遍历一层结点，然后记录最大值即可。</p>",6),V={class:"custom-container details"},D=n("summary",null,"代码实现",-1),I=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token comment"},"// DFS"),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
`),n("span",{class:"token keyword"},"public"),n("span",{class:"token operator"},":"),s(`
  `),n("span",{class:"token comment"},"// 第 key 层的 最大值 value"),s(`
  unordered_map`),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),n("span",{class:"token operator"},">"),s(" hash"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"int"),s(" max_depth "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`

  vector`),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"int"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token function"},"largestValues"),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"*"),s(" root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token function"},"dfs"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    vector`),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"int"),n("span",{class:"token operator"},">"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<="),s(" max_depth "),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(` 
      ans`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"emplace_back"),n("span",{class:"token punctuation"},"("),s("hash"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"dfs"),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"*"),s(" root"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" d"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"/* 问题边界 */"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// 更新层数"),s(`
    max_depth `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"max"),n("span",{class:"token punctuation"},"("),s("max_depth"),n("span",{class:"token punctuation"},","),s(" d"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"/* 到达每层时，需要的操作 */"),s(`
    `),n("span",{class:"token comment"},"// 第一次到达一层时，直接加入"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("hash"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"count"),n("span",{class:"token punctuation"},"("),s("d"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(" hash"),n("span",{class:"token punctuation"},"["),s("d"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" root"),n("span",{class:"token operator"},"->"),s("val"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"else"),s(" hash"),n("span",{class:"token punctuation"},"["),s("d"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"max"),n("span",{class:"token punctuation"},"("),s("hash"),n("span",{class:"token punctuation"},"["),s("d"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" root"),n("span",{class:"token operator"},"->"),s("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 再次到达时，更新最大值"),s(`

    `),n("span",{class:"token comment"},"/* 向下扩展 */"),s(`
    `),n("span",{class:"token comment"},"// 遍历左子树"),s(`
    `),n("span",{class:"token function"},"dfs"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},","),s(" d "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// 遍历右子树"),s(`
    `),n("span",{class:"token function"},"dfs"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},","),s(" d "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"// BFS"),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
`),n("span",{class:"token keyword"},"public"),n("span",{class:"token operator"},":"),s(`
  vector`),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"int"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token function"},"largestValues"),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"*"),s(" root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("root "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
    queue`),n("span",{class:"token operator"},"<"),s("TreeNode"),n("span",{class:"token operator"},"*"),n("span",{class:"token operator"},">"),s(" q"),n("span",{class:"token punctuation"},";"),s(`
    vector`),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"int"),n("span",{class:"token operator"},">"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
    q`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"while"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"empty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token keyword"},"int"),s(" level_node_num "),n("span",{class:"token operator"},"="),s(" q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"size"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token keyword"},"int"),s(" max_val "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token number"},"31"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token comment"},"// 每次遍历完队列里的所有值，也即遍历一层"),s(`
      `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},";"),s("level_node_num"),n("span",{class:"token punctuation"},";"),s("level_node_num"),n("span",{class:"token operator"},"--"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"auto"),s(" t "),n("span",{class:"token operator"},"="),s(" q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"front"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        q`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        max_val `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"max"),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token operator"},"->"),s("val"),n("span",{class:"token punctuation"},","),s(" max_val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},")"),s(" q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},")"),s(" q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
      ans`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"emplace_back"),n("span",{class:"token punctuation"},"("),s("max_val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j={id:"_513-找树左下角的值",tabindex:"-1"},A=n("a",{class:"header-anchor",href:"#_513-找树左下角的值","aria-hidden":"true"},"#",-1),E={href:"https://leetcode.cn/problems/find-bottom-left-tree-value/",target:"_blank",rel:"noopener noreferrer"},O=n("p",null,"题目要求是找树中最底层结点的最左层结点，通过一次遍历即可，「宽度优先遍历」和「深度优先遍历」都可以做到。",-1),Y=n("p",null,"「宽度优先遍历」:BFS 是从上至下，从左到右的层序遍历，所以只需在 BFS 的同时记录每一层的最左结点，然后每到下一层，再更新这个最左结点即可。",-1),G=n("p",null,"「深度优先遍历」:DFS 是深度优先，在 DFS 优先遍历左子树，然后到达每层时，更新最左结点即可。",-1),H={class:"custom-container details"},J=n("summary",null,"代码实现",-1),K=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token comment"},"// DFS"),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
`),n("span",{class:"token keyword"},"public"),n("span",{class:"token operator"},":"),s(`
  `),n("span",{class:"token keyword"},"int"),s(" left_node "),n("span",{class:"token punctuation"},","),s(" max_depth"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"findBottomLeftValue"),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"*"),s(" root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token function"},"dfs"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" left_node"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"dfs"),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"*"),s(" root"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" depth"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// 深度增加时，更新最左结点"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("depth "),n("span",{class:"token operator"},">"),s(" max_depth"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      max_depth `),n("span",{class:"token operator"},"="),s(" depth"),n("span",{class:"token punctuation"},";"),s(`
      left_node `),n("span",{class:"token operator"},"="),s(" root"),n("span",{class:"token operator"},"->"),s("val"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token comment"},"// 先搜左子结点"),s(`
    `),n("span",{class:"token function"},"dfs"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},","),s(" depth "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// 再搜右子结点"),s(`
    `),n("span",{class:"token function"},"dfs"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},","),s(" depth "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`  
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"// BFS"),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
`),n("span",{class:"token keyword"},"public"),n("span",{class:"token operator"},":"),s(`
  `),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"findBottomLeftValue"),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"*"),s(" root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    queue`),n("span",{class:"token operator"},"<"),s("TreeNode"),n("span",{class:"token operator"},"*"),n("span",{class:"token operator"},">"),s(" q"),n("span",{class:"token punctuation"},";"),s(`
    q`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" left_node "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"empty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token keyword"},"int"),s(" level_size "),n("span",{class:"token operator"},"="),s(" q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"size"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token keyword"},"int"),s(" flag "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// 标记"),s(`
      `),n("span",{class:"token keyword"},"for"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},";"),s("level_size "),n("span",{class:"token punctuation"},";"),s("level_size"),n("span",{class:"token operator"},"--"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"auto"),s(" t "),n("span",{class:"token operator"},"="),s(" q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"front"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        q`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("flag"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s("   "),n("span",{class:"token comment"},"// 每遍历到一层，只用这层的第一个元素(最左结点)更新"),s(`
          left_node `),n("span",{class:"token operator"},"="),s(" t"),n("span",{class:"token operator"},"->"),s("val"),n("span",{class:"token punctuation"},";"),s(`
          flag `),n("span",{class:"token operator"},"--"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},")"),s(" q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},")"),s(" q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(` 
    `),n("span",{class:"token keyword"},"return"),s(" left_node"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),P={id:"_103-二叉树的锯齿形层序遍历",tabindex:"-1"},Q=n("a",{class:"header-anchor",href:"#_103-二叉树的锯齿形层序遍历","aria-hidden":"true"},"#",-1),R={href:"https://leetcode.cn/problems/binary-tree-zigzag-level-order-traversal/",target:"_blank",rel:"noopener noreferrer"},U=n("p",null,"题目要求对二叉树奇数深度层进行从左至右的遍历，对偶数层进行从右至左的遍历。可直接使用双端队列：",-1),W=n("ul",null,[n("li",null,"奇数深度时，队列左出右进"),n("li",null,"偶数深度时，队列右出左进")],-1),X={class:"custom-container details"},Z=n("summary",null,"代码实现",-1),$=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
`),n("span",{class:"token keyword"},"public"),n("span",{class:"token operator"},":"),s(`
  vector`),n("span",{class:"token operator"},"<"),s("vector"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"int"),n("span",{class:"token operator"},">>"),s(),n("span",{class:"token function"},"zigzagLevelOrder"),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"*"),s(" root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    deque`),n("span",{class:"token operator"},"<"),s("TreeNode"),n("span",{class:"token operator"},"*"),n("span",{class:"token operator"},">"),s(" q"),n("span",{class:"token punctuation"},";"),s(`
    q`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push_back"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    vector`),n("span",{class:"token operator"},"<"),s("vector"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"int"),n("span",{class:"token operator"},">>"),s(" levels"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(" levels"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"bool"),s(" flag "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},"// 奇数层 == true or 偶数层 == false "),s(`
    `),n("span",{class:"token keyword"},"while"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"empty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token keyword"},"int"),s(" level_size "),n("span",{class:"token operator"},"="),s(" q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"size"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      vector`),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"int"),n("span",{class:"token operator"},">"),s(" cur_level"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},";"),s("level_size"),n("span",{class:"token punctuation"},";"),s(" level_size "),n("span",{class:"token operator"},"--"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("flag"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token comment"},"// 奇数层"),s(`
          `),n("span",{class:"token keyword"},"auto"),s(" t "),n("span",{class:"token operator"},"="),s(" q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"front"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
          q`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop_front"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// 从左至右"),s(`
          cur_level`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push_back"),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token operator"},"->"),s("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
          `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},")"),s(" q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push_back"),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
          `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},")"),s(" q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push_back"),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s("     "),n("span",{class:"token comment"},"// 偶数层"),s(`
          `),n("span",{class:"token keyword"},"auto"),s(" t "),n("span",{class:"token operator"},"="),s(" q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"back"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
          q`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop_back"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("     "),n("span",{class:"token comment"},"// 从右至左"),s(`
          cur_level`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push_back"),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token operator"},"->"),s("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
          `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},")"),s(" q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push_front"),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
          `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},")"),s(" q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push_front"),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
      flag `),n("span",{class:"token operator"},"="),s(" flag "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token boolean"},"true"),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token boolean"},"false"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(`
      levels`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push_back"),n("span",{class:"token punctuation"},"("),s("cur_level"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" levels"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1);function nn(sn,an){const t=u("ExternalLinkIcon"),e=u("CodeTabs");return r(),k("div",null,[d(" more "),v,n("h3",h,[_,s(),n("a",f,[s("919.完全二叉树插入器"),a(t)])]),y,w,g,x,q,T,N,n("details",S,[z,a(e,{id:"52",data:[{title:"c++"}]},{tab0:o(({title:c,value:l,isActive:p})=>[B]),_:1})]),n("h3",F,[M,s(),n("a",C,[s("515.在每个树行中找最大值"),a(t)])]),L,n("details",V,[D,a(e,{id:"94",data:[{title:"c++"}]},{tab0:o(({title:c,value:l,isActive:p})=>[I]),_:1})]),n("h3",j,[A,s(),n("a",E,[s("513.找树左下角的值"),a(t)])]),O,Y,G,n("details",H,[J,a(e,{id:"113",data:[{title:"c++"}]},{tab0:o(({title:c,value:l,isActive:p})=>[K]),_:1})]),n("h3",P,[Q,s(),n("a",R,[s("103. 二叉树的锯齿形层序遍历"),a(t)])]),U,W,n("details",X,[Z,a(e,{id:"138",data:[{title:"c++"}]},{tab0:o(({title:c,value:l,isActive:p})=>[$]),_:1})])])}const on=i(b,[["render",nn],["__file","2.html.vue"]]);export{on as default};
