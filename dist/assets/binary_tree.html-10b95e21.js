import{_ as l,X as r,Y as u,a0 as p,a2 as a,Z as n,$ as s,E as i}from"./framework-4e490e68.js";const k={},d=n("h2",{id:"二叉树",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#二叉树","aria-hidden":"true"},"#"),s(" 二叉树")],-1),b=n("h3",{id:"二叉树结点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#二叉树结点","aria-hidden":"true"},"#"),s(" 二叉树结点")],-1),m=n("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[n("pre",{class:"language-rust"},[n("code",null,`
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),v=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,`
`)]),n("div",{class:"highlight-lines"},[n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),f=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{cpp:"",class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"template"),s(),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"typename"),s(),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"TreeNode"),s(),n("span",{class:"token punctuation"},"{"),s(`
  T value`),n("span",{class:"token punctuation"},";"),s(`
  TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("left"),n("span",{class:"token punctuation"},";"),s(`
  TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("right"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"explicit"),s(),n("span",{class:"token generic-function"},[n("span",{class:"token function"},"TreeNode"),n("span",{class:"token generic class-name"},[n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">")])]),n("span",{class:"token punctuation"},"("),s("T value"),n("span",{class:"token punctuation"},","),s(" TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("left "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},","),s(`
                       TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("right "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},","),n("span",{class:"token punctuation"},")"),s(`
      `),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"value"),n("span",{class:"token punctuation"},"("),s("value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"left"),n("span",{class:"token punctuation"},"("),s("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"right"),n("span",{class:"token punctuation"},"("),s("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"parent"),n("span",{class:"token punctuation"},"("),s("parent"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=n("h3",{id:"二叉树-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#二叉树-1","aria-hidden":"true"},"#"),s(" 二叉树")],-1),w=n("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[n("pre",{class:"language-rust"},[n("code",null,`
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),_=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,`
`)]),n("div",{class:"highlight-lines"},[n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),h=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{cpp:"",class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"template"),s(),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"typename"),s(),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"BinaryTree"),s(),n("span",{class:"token punctuation"},"{"),s(`
`),n("span",{class:"token keyword"},"public"),n("span",{class:"token operator"},":"),s(`
  TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("root"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"explicit"),s(),n("span",{class:"token function"},"BinaryTree"),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("root "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"root"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token keyword"},"explicit"),s(),n("span",{class:"token function"},"BinaryTree"),n("span",{class:"token punctuation"},"("),s("std"),n("span",{class:"token double-colon punctuation"},"::"),s("vector"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(" nodes"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token class-name"},"BinaryTree"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"from_vec"),n("span",{class:"token punctuation"},"("),s("nodes"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token operator"},"~"),n("span",{class:"token function"},"BinaryTree"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),s(`
      `),n("span",{class:"token function"},"destruct_binary"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`

  `),n("span",{class:"token comment"},`/**
   * @brief 从层序遍历存储的节点的数组中构建二叉链表
   * @param nodes 节点数组
   */`),s(`
  `),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"from_vec"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(" std"),n("span",{class:"token double-colon punctuation"},"::"),s("vector"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"&"),s("nodes"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("nodes"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"size"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(`
      `),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("queue"),n("span",{class:"token operator"},"<"),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token operator"},">"),s(" q"),n("span",{class:"token punctuation"},";"),s(`
    TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("cur "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token generic-function"},[n("span",{class:"token function"},"TreeNode"),n("span",{class:"token generic class-name"},[n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">")])]),n("span",{class:"token punctuation"},"("),s("nodes"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    q`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("cur"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"empty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("node "),n("span",{class:"token operator"},"="),s(" q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"front"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      q`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("nodes"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"!="),s(" null_t"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        node`),n("span",{class:"token operator"},"->"),s("left "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token generic-function"},[n("span",{class:"token function"},"TreeNode"),n("span",{class:"token generic class-name"},[n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">")])]),n("span",{class:"token punctuation"},"("),s("nodes"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        q`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
      i`),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("nodes"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"!="),s(" null_t"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        node`),n("span",{class:"token operator"},"->"),s("right "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token generic-function"},[n("span",{class:"token function"},"TreeNode"),n("span",{class:"token generic class-name"},[n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">")])]),n("span",{class:"token punctuation"},"("),s("nodes"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        q`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
      i`),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),s("root "),n("span",{class:"token operator"},"="),s(" cur"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},`/**
   * @brief 层序遍历
   * @return std::vector<T> 层序遍历顺序
   */`),s(`
  std`),n("span",{class:"token double-colon punctuation"},"::"),s("vector"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token function"},"bfs"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("vector"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),s("root "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(`
      `),n("span",{class:"token keyword"},"return"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
    TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("cur "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),s("root"),n("span",{class:"token punctuation"},";"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("queue"),n("span",{class:"token operator"},"<"),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token operator"},">"),s(" q"),n("span",{class:"token punctuation"},";"),s(`
    q`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("cur"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"empty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("node "),n("span",{class:"token operator"},"="),s(" q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"front"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      q`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      ans`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"emplace_back"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("left "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(`
        q`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("right "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(`
        q`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},`/**
   * @brief 中序非递归遍历 (左根右)
   * @return std::vector<T>  中序遍历顺序
   */`),s(`
  std`),n("span",{class:"token double-colon punctuation"},"::"),s("vector"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token function"},"in_order"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("vector"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),s("root "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(`
      `),n("span",{class:"token keyword"},"return"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
    TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("node "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),s("root"),n("span",{class:"token punctuation"},";"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("stack"),n("span",{class:"token operator"},"<"),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token operator"},">"),s(" st"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("node "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),s(),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token operator"},"!"),s("st"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"empty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("node "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        st`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        node `),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
      `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("st"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"empty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        node `),n("span",{class:"token operator"},"="),s(" st"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"top"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        st`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        ans`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"emplace_back"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        node `),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},`/**
   * @brief 先序非递归遍历 (根左右)
   * @return std::vector<T> 先序遍历顺序
   */`),s(`
  std`),n("span",{class:"token double-colon punctuation"},"::"),s("vector"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token function"},"pre_order"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("vector"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),s("root "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(`
      `),n("span",{class:"token keyword"},"return"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
    TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("node "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),s("root"),n("span",{class:"token punctuation"},";"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("stack"),n("span",{class:"token operator"},"<"),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token operator"},">"),s(" st"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("node "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),s(),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token operator"},"!"),s("st"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"empty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("node "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        st`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        ans`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"emplace_back"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        node `),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
      `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("st"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"empty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        node `),n("span",{class:"token operator"},"="),s(" st"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"top"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        st`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        node `),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},`/**
   * @brief 后续非递归遍历 (左右根) 利用镜像二叉树翻转
   * @return std::vector<T>
   */`),s(`
  std`),n("span",{class:"token double-colon punctuation"},"::"),s("vector"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token function"},"post_order"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("vector"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),s("root "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(`
      `),n("span",{class:"token keyword"},"return"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
    TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("node "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),s("root"),n("span",{class:"token punctuation"},";"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("stack"),n("span",{class:"token operator"},"<"),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token operator"},">"),s(" st"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("node "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),s(),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token operator"},"!"),s("st"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"empty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("node "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        st`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        ans`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"emplace_back"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        node `),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
      `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("st"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"empty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        node `),n("span",{class:"token operator"},"="),s(" st"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"top"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        st`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        node `),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"reverse"),n("span",{class:"token punctuation"},"("),s("ans"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"begin"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(" ans"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"end"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token comment"},`/**
   * @brief 后序遍历的非递归算法
   * 后序遍历为 "左右根"， 所以在结点元素出栈之前必须保证其左右子结点都被遍历；
   * 可以使用一个标识 visited 标识当前结点的左右子结点是否都被遍历过；
   * @return std::vector<T> 后序遍历序列
   */`),s(`
  std`),n("span",{class:"token double-colon punctuation"},"::"),s("vector"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token function"},"real_post_order"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("vector"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("root "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
    TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),n("span",{class:"token operator"},"*"),s(" cur "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),s("root"),n("span",{class:"token punctuation"},";"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("stack"),n("span",{class:"token operator"},"<"),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token operator"},">"),s(" st"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},'// 标识, 用于标识 "当前结点" 的左右子结点是否都被遍历'),s(`
    `),n("span",{class:"token keyword"},"bool"),s(" visited "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),s("   "),n("span",{class:"token comment"},"// true 表示都被遍历, false 则反之"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("cur "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),s(),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token operator"},"!"),s("st"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"empty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("cur "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),s(),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token operator"},"!"),s("visited"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        st`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("cur"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        cur `),n("span",{class:"token operator"},"="),s(" cur"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
      TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),n("span",{class:"token operator"},"*"),s(" top_node "),n("span",{class:"token operator"},"="),s(" st"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"top"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token comment"},'// 1. 即将出栈的结点的 "右子结点" 不为空 并且其 左右子结点未全遍历完'),s(`
      `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("top_node"),n("span",{class:"token operator"},"->"),s("right "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),s(),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token operator"},"!"),s("visited"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},'// 将栈顶元素的 "右子结点" 入栈'),s(`
        cur `),n("span",{class:"token operator"},"="),s(" top_node"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
      `),n("span",{class:"token comment"},'// 2. 即将出栈的结点的 "右子结点" 为空 或者其 左右子结点已全遍历完'),s(`
      `),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
        st`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// 此时栈顶元素可以出栈"),s(`
        ans`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"emplace_back"),n("span",{class:"token punctuation"},"("),s("top_node"),n("span",{class:"token operator"},"->"),s("value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("st"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"empty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},`/* 栈中相邻两个元素为 "父子结点" (靠近栈顶的为父结点)
         当 "旧栈顶元素" 和 "新栈顶元素"的右子结点 相等时，也即：已出栈的元素为当前栈顶元素的右子结点，
         说明此时栈顶元素的 "左右子结点" 均已被访问过，此时栈顶可以出栈。*/`),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("top_node "),n("span",{class:"token operator"},"=="),s(" st"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"top"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},")"),s(" visited "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// 已出栈结点 为 当前栈顶结点的左子结点，此时当前栈顶结点的右子结点还未被访问，visited 需要为 false"),s(`
        `),n("span",{class:"token keyword"},"else"),s(" visited "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),s(`  
        `),n("span",{class:"token comment"},'// 访问 "右子树"'),s(`
        cur `),n("span",{class:"token operator"},"="),s(" st"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"top"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},`/**
   * @brief 中序遍历 (递归)
   * @param cur 当前结点
   * @param ans 遍历结果
   */`),s(`
  `),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"in_order_rec"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(" TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),n("span",{class:"token operator"},"*"),s(" cur"),n("span",{class:"token punctuation"},","),s(" std"),n("span",{class:"token double-colon punctuation"},"::"),s("vector"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),n("span",{class:"token operator"},"&"),s(" ans"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("cur "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("cur"),n("span",{class:"token operator"},"->"),s("left "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token function"},"in_order_rec"),n("span",{class:"token punctuation"},"("),s("cur"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},","),s(" ans"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    ans`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"emplace_back"),n("span",{class:"token punctuation"},"("),s("cur"),n("span",{class:"token operator"},"->"),s("value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("cur"),n("span",{class:"token operator"},"->"),s("right "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token function"},"in_order_rec"),n("span",{class:"token punctuation"},"("),s("cur"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},","),s(" ans"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`

  `),n("span",{class:"token comment"},`/**
   * @brief 先序遍历 (递归)
   * @param cur 当前结点
   * @param ans 遍历结果
   */`),s(`
  `),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"pre_order_rec"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(" TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),n("span",{class:"token operator"},"*"),s(" cur"),n("span",{class:"token punctuation"},","),s(" std"),n("span",{class:"token double-colon punctuation"},"::"),s("vector"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),n("span",{class:"token operator"},"&"),s(" ans"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("cur "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
    ans`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"emplace_back"),n("span",{class:"token punctuation"},"("),s("cur"),n("span",{class:"token operator"},"->"),s("value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("cur"),n("span",{class:"token operator"},"->"),s("left "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token function"},"pre_order_cur"),n("span",{class:"token punctuation"},"("),s("cur"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},","),s(" ans"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("cur"),n("span",{class:"token operator"},"->"),s("right "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token function"},"pre_order_rec"),n("span",{class:"token punctuation"},"("),s("cur"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},","),s(" ans"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(` 
  `),n("span",{class:"token punctuation"},"}"),s(` 

  `),n("span",{class:"token comment"},`/**
   * @brief 后序遍历 (递归)
   * @param cur 当前结点
   * @param ans 遍历结果
   */`),s(`
  `),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"post_order_rec"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(" TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),n("span",{class:"token operator"},"*"),s(" cur"),n("span",{class:"token punctuation"},","),s(" std"),n("span",{class:"token double-colon punctuation"},"::"),s("vector"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),n("span",{class:"token operator"},"&"),s(" ans"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("cur "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("cur"),n("span",{class:"token operator"},"->"),s("left "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token function"},"pre_order_cur"),n("span",{class:"token punctuation"},"("),s("cur"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},","),s(" ans"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("cur"),n("span",{class:"token operator"},"->"),s("right "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token function"},"pre_order_rec"),n("span",{class:"token punctuation"},"("),s("cur"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},","),s(" ans"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(` 
    ans`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"emplace_back"),n("span",{class:"token punctuation"},"("),s("cur"),n("span",{class:"token operator"},"->"),s("value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"private"),n("span",{class:"token operator"},":"),s(`
  T null_t `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"T"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 模板默认值, 替代 NULL"),s(`
  std`),n("span",{class:"token double-colon punctuation"},"::"),s("allocator"),n("span",{class:"token operator"},"<"),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">>"),s(" allocator_"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"destruct_binary"),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},")"),s(`
      `),n("span",{class:"token function"},"destruct_binary"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},")"),s(`
      `),n("span",{class:"token function"},"destruct_binary"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    allocator_`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"destroy"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    allocator_`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"deallocate"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=n("h2",{id:"线索二叉树",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#线索二叉树","aria-hidden":"true"},"#"),s(" 线索二叉树")],-1),T=n("h3",{id:"线索二叉树节点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#线索二叉树节点","aria-hidden":"true"},"#"),s(" 线索二叉树节点")],-1),N=n("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[n("pre",{class:"language-rust"},[n("code",null,`
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),x=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,`
`)]),n("div",{class:"highlight-lines"},[n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),j=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{cpp:"",class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"enum"),s(),n("span",{class:"token class-name"},"node_tag"),s(),n("span",{class:"token punctuation"},"{"),s(`
  child_node`),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token comment"},"// 子结点"),s(`
  order_node`),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token comment"},"// 前驱或者后继结点"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"template"),s(),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"typename"),s(),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"TreeNode"),s(),n("span",{class:"token punctuation"},"{"),s(`
  T value`),n("span",{class:"token punctuation"},";"),s(`
  TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("left"),n("span",{class:"token punctuation"},";"),s(`
  TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("right"),n("span",{class:"token punctuation"},";"),s(`

  `),n("span",{class:"token comment"},"/* 线索二叉树节点所需 */"),s(`
  TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("parent"),n("span",{class:"token punctuation"},";"),s(`
  node_tag left_tag `),n("span",{class:"token operator"},"="),s(" child_node"),n("span",{class:"token punctuation"},";"),s(`
  node_tag right_tag `),n("span",{class:"token operator"},"="),s(" child_node"),n("span",{class:"token punctuation"},";"),s(`
  

  `),n("span",{class:"token keyword"},"explicit"),s(),n("span",{class:"token generic-function"},[n("span",{class:"token function"},"TreeNode"),n("span",{class:"token generic class-name"},[n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">")])]),n("span",{class:"token punctuation"},"("),s("T value"),n("span",{class:"token punctuation"},","),s(" TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("left "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},","),s(`
                       TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("right "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},","),s(`
                       TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("parent "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(`
      `),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"value"),n("span",{class:"token punctuation"},"("),s("value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"left"),n("span",{class:"token punctuation"},"("),s("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"right"),n("span",{class:"token punctuation"},"("),s("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"parent"),n("span",{class:"token punctuation"},"("),s("parent"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=n("h3",{id:"线索二叉树-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#线索二叉树-1","aria-hidden":"true"},"#"),s(" 线索二叉树")],-1),A=n("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[n("pre",{class:"language-rust"},[n("code",null,`
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),B=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,`
`)]),n("div",{class:"highlight-lines"},[n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),C=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{cpp:"",class:"language-cpp"},[n("code",null,[n("span",{class:"token comment"},"// 线索化类型"),s(`
`),n("span",{class:"token keyword"},"enum"),s(),n("span",{class:"token class-name"},"threaded_mode"),s(),n("span",{class:"token punctuation"},"{"),s(`
  in_order`),n("span",{class:"token punctuation"},","),s("   "),n("span",{class:"token comment"},"// 中序线索化"),s(`
  pre_order`),n("span",{class:"token punctuation"},","),s("  "),n("span",{class:"token comment"},"// 先序线索化"),s(`
  post_order`),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token comment"},"// 后序线索化"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"template"),s(),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"typename"),s(),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"ThreadedBinaryTree"),s(),n("span",{class:"token punctuation"},"{"),s(`
`),n("span",{class:"token keyword"},"public"),n("span",{class:"token operator"},":"),s(`
  TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("root"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token comment"},`/**
   * @brief 从存储层序遍历二叉树的数组中构建对应的线索化二叉树
   * @param nodes 层序遍历结点数组
   * @param mode 线索化模式
   */`),s(`
  `),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"from_vec"),n("span",{class:"token punctuation"},"("),s("std"),n("span",{class:"token double-colon punctuation"},"::"),s("vector"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(" nodes"),n("span",{class:"token punctuation"},","),s(" threaded_mode mode"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("nodes"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"empty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
      `),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
    TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("cur "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token generic-function"},[n("span",{class:"token function"},"TreeNode"),n("span",{class:"token generic class-name"},[n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">")])]),n("span",{class:"token punctuation"},"("),s("nodes"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("queue"),n("span",{class:"token operator"},"<"),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token operator"},">"),s(" q"),n("span",{class:"token punctuation"},";"),s(`
    q`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("cur"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"empty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("node "),n("span",{class:"token operator"},"="),s(" q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"front"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      q`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("nodes"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"!="),s(" null_t"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        node`),n("span",{class:"token operator"},"->"),s("left "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token generic-function"},[n("span",{class:"token function"},"TreeNode"),n("span",{class:"token generic class-name"},[n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">")])]),n("span",{class:"token punctuation"},"("),s("nodes"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        node`),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token operator"},"->"),s("parent "),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},";"),s(`
        q`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
      i `),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("nodes"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"!="),s(" null_t"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        node`),n("span",{class:"token operator"},"->"),s("right "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token generic-function"},[n("span",{class:"token function"},"TreeNode"),n("span",{class:"token generic class-name"},[n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">")])]),n("span",{class:"token punctuation"},"("),s("nodes"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        node`),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token operator"},"->"),s("parent "),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},";"),s(`
        q`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
      i `),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),s("root "),n("span",{class:"token operator"},"="),s(" cur"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// 线索化"),s(`
    `),n("span",{class:"token keyword"},"switch"),s(),n("span",{class:"token punctuation"},"("),s("mode"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"case"),s(" threaded_mode"),n("span",{class:"token double-colon punctuation"},"::"),s("in_order"),n("span",{class:"token operator"},":"),s(`
      `),n("span",{class:"token function"},"threaded_in_order_tree"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),s("root"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"case"),s(" threaded_mode"),n("span",{class:"token double-colon punctuation"},"::"),s("pre_order"),n("span",{class:"token operator"},":"),s(`
      `),n("span",{class:"token function"},"threaded_pre_order_tree"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),s("root"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"case"),s(" threaded_mode"),n("span",{class:"token double-colon punctuation"},"::"),s("post_order"),n("span",{class:"token operator"},":"),s(`
      `),n("span",{class:"token function"},"threaded_post_order_tree"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),s("root"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"default"),n("span",{class:"token operator"},":"),s(`
      std`),n("span",{class:"token double-colon punctuation"},"::"),s("cout "),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token string"},'"请制定要线索化类型"'),s(),n("span",{class:"token operator"},"<<"),s(" std"),n("span",{class:"token double-colon punctuation"},"::"),s("endl"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},`/**
   * @brief 构建中序线索二叉树
   * @param node 二叉树根节点
   */`),s(`
  `),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"threaded_in_order_tree"),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token function"},"in_order_helper"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},`/**
   * @brief 构建先序线索二叉树
   * @param node 二叉树根节点
   */`),s(`
  `),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"threaded_pre_order_tree"),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token function"},"pre_order_helper"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},`/**
   * @brief 构建后序线索二叉树
   * @param node 二叉树根节点
   */`),s(`
  `),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"threaded_post_order_tree"),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token function"},"post_order_helper"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`

  `),n("span",{class:"token comment"},"// ========== 中序线索化遍历  =========="),s(`
  `),n("span",{class:"token comment"},`/**
   * @brief 对中序线索化后的二叉树进行遍历
   * @return std::vector<T> 遍历结果
   */`),s(`
  std`),n("span",{class:"token double-colon punctuation"},"::"),s("vector"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token function"},"in_order_tbt"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("vector"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("p "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"take_inorder_first"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(" p "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},";"),s(`
         p `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"next_node_inorder"),n("span",{class:"token punctuation"},"("),s("p"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
      ans`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"emplace_back"),n("span",{class:"token punctuation"},"("),s("p"),n("span",{class:"token operator"},"->"),s("value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},`/**
   * @brief 获取二叉树中第一个被中序遍历的结点
   * @param node 二叉树根结点
   * @return TreeNode<T>* 第一个被中序遍历的结点
   */`),s(`
  TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token function"},"take_inorder_first"),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("left_tag "),n("span",{class:"token operator"},"=="),s(" node_tag"),n("span",{class:"token double-colon punctuation"},"::"),s("child_node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      node `),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" node"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},`/**
   * @brief 在中序线索二叉树中寻找结点的后继结点
   * @param node 结点
   * @return TreeNode<T>* 结点的中序后继结点
   */`),s(`
  TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token function"},"next_node_inorder"),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(`
      `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("right_tag "),n("span",{class:"token operator"},"=="),s(" node_tag"),n("span",{class:"token double-colon punctuation"},"::"),s("child_node"),n("span",{class:"token punctuation"},")"),s(`
      `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"take_inorder_first"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"else"),s(`
      `),n("span",{class:"token keyword"},"return"),s(" node"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},`/**
   * @brief 在中序线索二叉树中寻找结点的前驱结点
   * @param node 结点
   * @return TreeNode<T>* 结点的中序前驱结点
   */`),s(`
  TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token function"},"last_node_inorder"),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(`
      `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("left_tag "),n("span",{class:"token operator"},"=="),s(" node_tag"),n("span",{class:"token double-colon punctuation"},"::"),s("child_node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      node `),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("right_tag "),n("span",{class:"token operator"},"=="),s(" node_tag"),n("span",{class:"token double-colon punctuation"},"::"),s("child_node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        node `),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
      `),n("span",{class:"token keyword"},"return"),s(" node"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(`
      `),n("span",{class:"token keyword"},"return"),s(" node"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},"// ==================================="),s(`

  `),n("span",{class:"token comment"},"// ========== 先序线索化遍历  ==========="),s(`
  `),n("span",{class:"token comment"},`/**
   * @brief 对先序线索化的二叉树进行遍历
   * @return std::vector<T> 遍历结果
   */`),s(`
  std`),n("span",{class:"token double-colon punctuation"},"::"),s("vector"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token function"},"pre_order_tbt"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("vector"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("p "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"last_node_preorder"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(" p "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},";"),s(`
         p `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"next_node_preorder"),n("span",{class:"token punctuation"},"("),s("p"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
      ans`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"emplace_back"),n("span",{class:"token punctuation"},"("),s("p"),n("span",{class:"token operator"},"->"),s("value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},`/**
   * @brief 寻找子树中最后一个被前序遍历的结点,即子树中 [最右最左] 结点
   * @param node 子树根结点
   * @return TreeNode<T>* 该子树中最后一个被前序遍历的结点
   */`),s(`
  TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token function"},"take_preorder_end"),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("right_tag "),n("span",{class:"token operator"},"=="),s(" node_tag"),n("span",{class:"token double-colon punctuation"},"::"),s("child_node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        node `),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
      `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("left_tag "),n("span",{class:"token operator"},"=="),s(" node_tag"),n("span",{class:"token double-colon punctuation"},"::"),s("child_node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        node `),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
      `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("left_tag "),n("span",{class:"token operator"},"=="),s(" node_tag"),n("span",{class:"token double-colon punctuation"},"::"),s("order_node "),n("span",{class:"token operator"},"&&"),s(`
          node`),n("span",{class:"token operator"},"->"),s("right_tag "),n("span",{class:"token operator"},"=="),s(" node_tag"),n("span",{class:"token double-colon punctuation"},"::"),s("order_node"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" node"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},`/**
   * @brief 在先序线索二叉树中寻找结点的后继结点
   * @param node 结点
   * @return TreeNode<T>* 结点的先序后继结点
   */`),s(`
  TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token function"},"next_node_preorder"),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("left "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),s(),n("span",{class:"token operator"},"&&"),s(" node"),n("span",{class:"token operator"},"->"),s("left_tag "),n("span",{class:"token operator"},"=="),s(" node_tag"),n("span",{class:"token double-colon punctuation"},"::"),s("child_node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token keyword"},"return"),s(" node"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token keyword"},"return"),s(" node"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},`/**
   * @brief 在先序线索二叉树中寻找结点的前驱结点 (借助结点的父结点完成)
   * @param node 结点
   * @return TreeNode<T>* 结点的先序前驱结点
   */`),s(`
  TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token function"},"last_node_preorder"),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(`
      `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},";"),s(`
    TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("parent "),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token operator"},"->"),s("parent"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("parent "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("parent"),n("span",{class:"token operator"},"->"),s("right "),n("span",{class:"token operator"},"=="),s(" node "),n("span",{class:"token operator"},"&&"),s(" parent"),n("span",{class:"token operator"},"->"),s("left "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"take_preorder_end"),n("span",{class:"token punctuation"},"("),s("parent"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" parent"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},"// ==================================="),s(`

  `),n("span",{class:"token comment"},"// ========== 后序线索化遍历  ==========="),s(`
  `),n("span",{class:"token comment"},`/**
   * @brief 对后序线索化的二叉树进行遍历
   * @return std::vector<T> 遍历结果
   */`),s(`
  std`),n("span",{class:"token double-colon punctuation"},"::"),s("vector"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token function"},"post_order_tbt"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("vector"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
    ans`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"emplace_back"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),s("root"),n("span",{class:"token operator"},"->"),s("value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("p "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"last_node_postorder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token operator"},"->"),s("root"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(" p "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},";"),s(`
         p `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"last_node_postorder"),n("span",{class:"token punctuation"},"("),s("p"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
      ans`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"emplace_back"),n("span",{class:"token punctuation"},"("),s("p"),n("span",{class:"token operator"},"->"),s("value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"reverse"),n("span",{class:"token punctuation"},"("),s("ans"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"begin"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(" ans"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"end"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},`/**
   * @brief 在后序线索二叉树中寻找结点的前驱结点
   * @param node 节点
   * @return TreeNode<T>* 节点的后序前驱结点
   */`),s(`
  TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token function"},"last_node_postorder"),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("right_tag "),n("span",{class:"token operator"},"=="),s(" child_node "),n("span",{class:"token operator"},"&&"),s(" node"),n("span",{class:"token operator"},"->"),s("right "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(`
      `),n("span",{class:"token keyword"},"return"),s(" node"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"else"),s(`
      `),n("span",{class:"token keyword"},"return"),s(" node"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},`/**
   * @brief 寻找子树中第一个被后序遍历的结点, 即子树中 循环[最左最右]
   * @param node 结点
   * @return TreeNode<T>* 该结点子树中第一个被后序遍历的结点
   */`),s(`
  TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token function"},"take_postorder_first"),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("left_tag "),n("span",{class:"token operator"},"=="),s(" node_tag"),n("span",{class:"token double-colon punctuation"},"::"),s("child_node "),n("span",{class:"token operator"},"&&"),s(" node"),n("span",{class:"token operator"},"->"),s("left "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        node `),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
      `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("right_tag "),n("span",{class:"token operator"},"=="),s(" node_tag"),n("span",{class:"token double-colon punctuation"},"::"),s("child_node "),n("span",{class:"token operator"},"&&"),s(`
             node`),n("span",{class:"token operator"},"->"),s("right "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        node `),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
      `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("left_tag "),n("span",{class:"token operator"},"=="),s(" node_tag"),n("span",{class:"token double-colon punctuation"},"::"),s("order_node "),n("span",{class:"token operator"},"&&"),s(`
          node`),n("span",{class:"token operator"},"->"),s("right_tag "),n("span",{class:"token operator"},"=="),s(" node_tag"),n("span",{class:"token double-colon punctuation"},"::"),s("order_node"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" node"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},`/**
   * @brief 在后序线索二叉树中寻找结点的后继结点 (结束父结点实现)
   * @param node 结点
   * @return TreeNode<T>* 结点的后序后继结点
   */`),s(`
  TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token function"},"next_node_postorder"),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(`
      `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},";"),s(`
    TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("parent "),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token operator"},"->"),s("parent"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("parent "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("parent"),n("span",{class:"token operator"},"->"),s("left "),n("span",{class:"token operator"},"=="),s(" node "),n("span",{class:"token operator"},"&&"),s(" parent"),n("span",{class:"token operator"},"->"),s("right "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"take_postorder_first"),n("span",{class:"token punctuation"},"("),s("parent"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token keyword"},"return"),s(" node"),n("span",{class:"token operator"},"->"),s("parent"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},"// =============================="),s(`

`),n("span",{class:"token keyword"},"private"),n("span",{class:"token operator"},":"),s(`
  T null_t `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"T"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("             "),n("span",{class:"token comment"},"// T 的默认值, NULL 的替代品"),s(`
  TreeNode`),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("pre "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 全局父结点"),s(`
  `),n("span",{class:"token comment"},`/**
   * @brief 中序线索化 (边遍历边线索化)
   * @param node 二叉树根节点
   */`),s(`
  `),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"in_order_helper"),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(`
      `),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"in_order_helper"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("left "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      node`),n("span",{class:"token operator"},"->"),s("left "),n("span",{class:"token operator"},"="),s(" pre"),n("span",{class:"token punctuation"},";"),s(`
      node`),n("span",{class:"token operator"},"->"),s("left_tag "),n("span",{class:"token operator"},"="),s(" node_tag"),n("span",{class:"token double-colon punctuation"},"::"),s("order_node"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("right "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(`
      node`),n("span",{class:"token operator"},"->"),s("right_tag "),n("span",{class:"token operator"},"="),s(" node_tag"),n("span",{class:"token double-colon punctuation"},"::"),s("order_node"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("pre "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),s(),n("span",{class:"token operator"},"&&"),s(" pre"),n("span",{class:"token operator"},"->"),s("right "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(`
      pre`),n("span",{class:"token operator"},"->"),s("right "),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},";"),s(`
    pre `),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"in_order_helper"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},`/**
   * @brief 先序线索化 (边遍历边线索化)
   * @param node 二叉树根节点
   */`),s(`
  `),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"pre_order_helper"),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(`
      `),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("left "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      node`),n("span",{class:"token operator"},"->"),s("left "),n("span",{class:"token operator"},"="),s(" pre"),n("span",{class:"token punctuation"},";"),s(`
      node`),n("span",{class:"token operator"},"->"),s("left_tag "),n("span",{class:"token operator"},"="),s(" node_tag"),n("span",{class:"token double-colon punctuation"},"::"),s("order_node"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("right "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(`
      node`),n("span",{class:"token operator"},"->"),s("right_tag "),n("span",{class:"token operator"},"="),s(" node_tag"),n("span",{class:"token double-colon punctuation"},"::"),s("order_node"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("pre "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),s(),n("span",{class:"token operator"},"&&"),s(" pre"),n("span",{class:"token operator"},"->"),s("right "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(`
      pre`),n("span",{class:"token operator"},"->"),s("right "),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},";"),s(`
    pre `),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("left_tag "),n("span",{class:"token operator"},"=="),s(" node_tag"),n("span",{class:"token double-colon punctuation"},"::"),s("child_node"),n("span",{class:"token punctuation"},")"),s(`
      `),n("span",{class:"token function"},"pre_order_helper"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"pre_order_helper"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},`/**
   * @brief 后序线索化 (边遍历边线索化)
   * @param node 二叉树根节点
   */`),s(`
  `),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"post_order_helper"),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"*"),s("node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(`
      `),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"post_order_helper"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"post_order_helper"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("left "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      node`),n("span",{class:"token operator"},"->"),s("left "),n("span",{class:"token operator"},"="),s(" pre"),n("span",{class:"token punctuation"},";"),s(`
      node`),n("span",{class:"token operator"},"->"),s("left_tag "),n("span",{class:"token operator"},"="),s(" node_tag"),n("span",{class:"token double-colon punctuation"},"::"),s("order_node"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"->"),s("right "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(`
      node`),n("span",{class:"token operator"},"->"),s("right_tag "),n("span",{class:"token operator"},"="),s(" node_tag"),n("span",{class:"token double-colon punctuation"},"::"),s("order_node"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("pre "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),s(),n("span",{class:"token operator"},"&&"),s(" pre"),n("span",{class:"token operator"},"->"),s("right "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      pre`),n("span",{class:"token operator"},"->"),s("right "),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    pre `),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1);function L(V,E){const c=i("CodeTabs");return r(),u("div",null,[d,b,p(c,{id:"6",data:[{title:"rust",id:"rust"},{title:"java",id:"java"},{title:"c++",id:"c++"}],"tab-id":"language"},{tab0:a(({title:t,value:e,isActive:o})=>[m]),tab1:a(({title:t,value:e,isActive:o})=>[v]),tab2:a(({title:t,value:e,isActive:o})=>[f]),_:1}),y,p(c,{id:"20",data:[{title:"rust",id:"rust"},{title:"java",id:"java"},{title:"c++",id:"c++"}],"tab-id":"language"},{tab0:a(({title:t,value:e,isActive:o})=>[w]),tab1:a(({title:t,value:e,isActive:o})=>[_]),tab2:a(({title:t,value:e,isActive:o})=>[h]),_:1}),g,T,p(c,{id:"37",data:[{title:"rust",id:"rust"},{title:"java",id:"java"},{title:"c++",id:"c++"}],"tab-id":"language"},{tab0:a(({title:t,value:e,isActive:o})=>[N]),tab1:a(({title:t,value:e,isActive:o})=>[x]),tab2:a(({title:t,value:e,isActive:o})=>[j]),_:1}),q,p(c,{id:"51",data:[{title:"rust",id:"rust"},{title:"java",id:"java"},{title:"c++",id:"c++"}],"tab-id":"language"},{tab0:a(({title:t,value:e,isActive:o})=>[A]),tab1:a(({title:t,value:e,isActive:o})=>[B]),tab2:a(({title:t,value:e,isActive:o})=>[C]),_:1})])}const z=l(k,[["render",L],["__file","binary_tree.html.vue"]]);export{z as default};
