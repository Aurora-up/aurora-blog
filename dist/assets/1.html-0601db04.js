import{_ as c,X as l,Y as i,a1 as r,Z as n,$ as s,a0 as t,a2 as u,a3 as a,E as p}from"./framework-4e490e68.js";const d={},k=n("p",null,"C 和 C ++ 原始指针",-1),m=a('<p>指针在 C 语言中本质就是一种数据类型，不过其他数据类型的变量是指向地址中的存储的数据，而指针是<strong>指向存储数据的地址</strong>。</p><h2 id="指针的使用" tabindex="-1"><a class="header-anchor" href="#指针的使用" aria-hidden="true">#</a> 指针的使用</h2><h3 id="_1-指针表达式" tabindex="-1"><a class="header-anchor" href="#_1-指针表达式" aria-hidden="true">#</a> 1.指针表达式</h3><h3 id="_2-二级指针" tabindex="-1"><a class="header-anchor" href="#_2-二级指针" aria-hidden="true">#</a> 2.二级指针</h3><h2 id="指针运算" tabindex="-1"><a class="header-anchor" href="#指针运算" aria-hidden="true">#</a> 指针运算</h2><h2 id="指针类型" tabindex="-1"><a class="header-anchor" href="#指针类型" aria-hidden="true">#</a> 指针类型</h2><h3 id="_1-基本指针类型" tabindex="-1"><a class="header-anchor" href="#_1-基本指针类型" aria-hidden="true">#</a> 1.基本指针类型</h3><p>基本数据类型中有 <code>int</code> 整型，<code>float</code> 浮点数等等，这些基本类型都对应着基本指针类型，例如：<code>int*</code> ，<code>float*</code> 等。如下表：</p><table><thead><tr><th style="text-align:center;">基本数据类型</th><th style="text-align:center;">占用空间</th><th style="text-align:center;">基本指针类型</th><th style="text-align:center;">占用空间(32 或 64 位机器)</th></tr></thead><tbody><tr><td style="text-align:center;"><code>char</code></td><td style="text-align:center;">1 字节</td><td style="text-align:center;"><code>char*</code></td><td style="text-align:center;">4 或 8 字节</td></tr><tr><td style="text-align:center;"><code>short</code></td><td style="text-align:center;">2 字节</td><td style="text-align:center;"><code>short*</code></td><td style="text-align:center;">4 或 8 字节</td></tr><tr><td style="text-align:center;"><code>int</code></td><td style="text-align:center;">4 字节</td><td style="text-align:center;"><code>int*</code></td><td style="text-align:center;">4 或 8 字节</td></tr><tr><td style="text-align:center;"><code>long</code></td><td style="text-align:center;">4 字节</td><td style="text-align:center;"><code>long*</code></td><td style="text-align:center;">4 或 8 字节</td></tr><tr><td style="text-align:center;"><code>long long</code></td><td style="text-align:center;">8 字节</td><td style="text-align:center;"><code>long long*</code></td><td style="text-align:center;">4 或 8 字节</td></tr><tr><td style="text-align:center;"><code>float</code></td><td style="text-align:center;">4 字节</td><td style="text-align:center;"><code>float*</code></td><td style="text-align:center;">4 或 8 字节</td></tr><tr><td style="text-align:center;"><code>double</code></td><td style="text-align:center;">8 字节</td><td style="text-align:center;"><code>double*</code></td><td style="text-align:center;">4 或 8 字节</td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>虽然指针的占用空间是固定的，但是在进行指针运算时，<strong>每次移动的位数与对应的基本类型相关</strong>。</p></div>',10),v=n("div",{class:"hint-container warning"},[n("p",{class:"hint-container-title"},"基本类型指针之间进行「强制类型转换」时需要注意的问题"),n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{cpp:"",class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"int"),s(" a "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1025"),n("span",{class:"token punctuation"},";"),s("   "),n("span",{class:"token comment"},"// 转为 32 位二进制: 00000000 00000000 00000100 00000001"),s(`
`),n("span",{class:"token keyword"},"int"),n("span",{class:"token operator"},"*"),s(" pa "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"&"),s("a"),n("span",{class:"token punctuation"},";"),s("   "),n("span",{class:"token comment"},"// pa 指向 a"),s(`

`),n("span",{class:"token comment"},`/* 
	将 int* 强制转换为 char* , int* 本应指向对应数据的 4 个字节, 经过 
	强制转换之后, 只能指向第一个字节, 即：指向 00000001 所在地址, 那么转换
	之后的值也就是 00000001
*/`),s(`
`),n("span",{class:"token keyword"},"char"),n("span",{class:"token operator"},"*"),s(" pca "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"char"),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),s(" pa"),n("span",{class:"token punctuation"},";"),s(`   
`),n("span",{class:"token comment"},"// 将 00000001 转为 10 进制输出"),s(`
`),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d\\n"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"*"),s("pca"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("          "),n("span",{class:"token comment"},"// 输出结果: 1"),s(`
`),n("span",{class:"token comment"},"// 进行指针运算, 将 pca 指向 00000100 所在地址并以 10 进制形式输出该地址的数据"),s(`
`),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d\\n"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("pca "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// 输出结果: 4"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),b=a('<h3 id="_2-void-型指针和-null-以及-nullptr" tabindex="-1"><a class="header-anchor" href="#_2-void-型指针和-null-以及-nullptr" aria-hidden="true">#</a> 2.<code>void*</code> 型指针和 <code>NULL</code> 以及 <code>nullptr</code></h3><blockquote><p><code>void*</code> 类型指针</p></blockquote><p><code>void*</code> 指针类型是可以指向<strong>任意类型的数据</strong>，也即可以将 指向任意类型的指针 <strong>直接赋值</strong> 给<code>void*</code> 类型的指针，例如：</p>',3),h=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{cpp:"",class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"int"),n("span",{class:"token operator"},"*"),s(" pa"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"void"),n("span",{class:"token operator"},"*"),s(" pv "),n("span",{class:"token operator"},"="),s(" pa"),n("span",{class:"token punctuation"},";"),s("   "),n("span",{class:"token comment"},"// 将 int* 赋值给 void* "),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("div",{class:"highlight-line"}," ")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=n("p",null,[s("若想将 "),n("code",null,"void*"),s(" 类型的指针赋值给其他类型的指针，则需要进行"),n("strong",null,"强制类型转换"),s("才可以完成赋值，例如：")],-1),y=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{cpp:"",class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"int"),n("span",{class:"token operator"},"*"),s(" pa"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"void"),n("span",{class:"token operator"},"*"),s(" pv"),n("span",{class:"token punctuation"},";"),s(`
pa `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),s(" pv"),n("span",{class:"token punctuation"},";"),s("   "),n("span",{class:"token comment"},"// 将 void* 强制转换为 int*"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("div",{class:"highlight-line"}," "),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=a(`<p>在使用内存分配函数 <code>malloc</code> 函数时，由于其返回值是 <code>void*</code> ，则需要显式说明该指针指向的内存存放的是什么类型的数据，所以需要对其进行强制类型转换，例如：需要分配 100 个整数的内存空间：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span><span class="token operator">*</span> pa <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>对于 <code>void*</code> 型的指针，其是否可以进行<strong>指针运算</strong>取决于编译器遵循的标准，在 GNU 中，<code>void*</code> 在进行指针运算时就像 <code>char*</code> 一样；而在 ANSI 的标准，对 <code>void*</code> 类型的指针进行运算时不被允许的。</p></div>`,3),x=n("code",null,"void*",-1),f={href:"https://www.runoob.com/w3cnote/c-general-function.html",target:"_blank",rel:"noopener noreferrer"},_=a(`<blockquote><p><code>NULL</code> 和 <code>nullptr</code></p></blockquote><p><code>NULL</code> 本身就是一个特殊的指针变量，表示不指向任何东西，可以将 <code>NULL</code> 值赋值给一个指针变量使其不指向任何东西。</p><ul><li>在 C 语言中 <code>NULL</code> 的定义如下：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NULL</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span></span></span>
<span class="token comment">// 或者</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NULL</span> <span class="token expression"><span class="token number">0</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其<strong>会</strong>根据不同类型的指针隐式类型转换为响应的类型；</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span><span class="token operator">*</span> pi <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>   <span class="token comment">// NULL 隐式转换为 int*</span>
<span class="token keyword">char</span><span class="token operator">*</span> pc <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment">// NULL 隐式转换为 char*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 C++ 中，由于C++是强类型的语言的缘故，定义如下：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NULL</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NULL</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>NULL</code> 被定为为了 <code>0</code>， <strong>不会</strong> 隐式的转换为其他类型，在 C++ 11 之后往往使用 <code>nullptr</code> 替代使用 <code>NULL</code>，<code>nullptr</code> 的本质是一个常量，实现代码大致如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">class</span> <span class="token keyword">nullptr</span> <span class="token punctuation">{</span>
  
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
  <span class="token keyword">inline</span> <span class="token keyword">operator</span> T<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>         <span class="token comment">// 可向任意类型的非成员指针转换 </span>
  <span class="token punctuation">{</span> 
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>

  <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
  <span class="token keyword">inline</span> <span class="token keyword">operator</span> T C<span class="token double-colon punctuation">::</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>     <span class="token comment">// 可向任意类型的成员指针转换</span>
  <span class="token punctuation">{</span> 
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>
 
<span class="token keyword">private</span><span class="token operator">:</span>
	<span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>            <span class="token comment">// 不可取地址</span>

<span class="token punctuation">}</span> <span class="token keyword">nullptr</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),q={href:"https://www.stroustrup.com/N1488-nullptr.pdf",target:"_blank",rel:"noopener noreferrer"},L=a(`<div class="hint-container warning"><p class="hint-container-title">注意</p><ul><li>解引用 <code>NULL</code> 指针是非法的行为，在解引用之前，必须保证它是非 <code>NULL</code> 的指针。</li><li><code>nullptr</code> 一些易错点</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">void</span><span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">int</span><span class="token operator">*</span> p2 <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token operator">*</span> p3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">// OK, 0 仍然可以赋值给指针</span>

<span class="token comment">// ----- 不能解引用赋值为 0 或 nullptr 的指针 -----</span>
<span class="token comment">// 不会报错，但是可能导致系统崩溃</span>
<span class="token comment">// cout &lt;&lt; (*p2) &lt;&lt; endl;</span>
<span class="token comment">// cout &lt;&lt; (*p3) &lt;&lt; endl;</span>
<span class="token comment">// ---------------------</span>

cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>p2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>         <span class="token comment">// OK, true</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">nullptr</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// OK, true</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">nullptr</span> <span class="token operator">==</span> p1<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token comment">// OK, true</span>

<span class="token comment">// cout &lt;&lt; (nullptr == n) &lt;&lt; endl; // Err </span>

<span class="token comment">// int n = nullptr;     // Err，不能将 nullptr 赋值给非指针类型</span>
<span class="token comment">// nullptr = 0;         // Err, nullptr 是 const 的，不能被赋值</span>
<span class="token comment">// nullptr + 2;         // Err, nullptr 未重载 + 号，不能使用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="_3-字符指针" tabindex="-1"><a class="header-anchor" href="#_3-字符指针" aria-hidden="true">#</a> 3.字符指针</h3><p>对于 <code>char*</code> 指针来说，一般使用是直接作为指向某个字符的指针，例如：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span><span class="token operator">*</span> pc <span class="token operator">=</span> <span class="token operator">&amp;</span>c<span class="token punctuation">;</span>
<span class="token operator">*</span>pc <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一种用法是使用 <code>char*</code> 指向一连串字符的首个字符，使其代表这一连串的字符。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span><span class="token operator">*</span> pstr <span class="token operator">=</span> <span class="token string">&quot;hello world!&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时 <code>pstr</code> 指向的字符 <code>h</code> 所在的地址，</p><div class="hint-container warning"><p class="hint-container-title">char[] 和 char* 的区别</p><p><code>char[]</code> 是字符数组，是数组；而 <code>char*</code> 是字符指针，是指针。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span> sc1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;houdongdong&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> sc2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;houdongdong&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span><span class="token operator">*</span> pstr1 <span class="token operator">=</span> <span class="token string">&quot;houdongdong&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span><span class="token operator">*</span> pstr2 <span class="token operator">=</span> <span class="token string">&quot;houdongdong&quot;</span><span class="token punctuation">;</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> sc1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//输出: houdongdong</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> pstr1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出: houdongdong</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>pstr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出: h</span>

<span class="token comment">/*
	1.sc1 和 sc2 中的所有数据都是存储在栈上,并且都是单独分配的,所以其首地址是不同的.
	2.pstr1 和 pstr2 指向的是同一常量字符串, c/c++ 会把常量字符串存储到单独的内存区域. 
		当多个指针指向相同的字符串常量时,实际上指向的同一个常量字符串。
		所以 pstr1 和 pstr2 都是存在栈上的指针, 其共同指向 字符串常量区的字符串 &quot;houdongdong&quot;
	
	pstr1 和 pstr2 所指向字符串常量是 不可被修改的
	sc1 和 sc2 中的所有内容都是存储在栈上, 都是 可被修改的
*/</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>sc1 <span class="token operator">==</span> sc2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>      <span class="token comment">// 输出: false</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>pstr1 <span class="token operator">==</span> pstr2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// 输出: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>不同点</strong>：</p><table><thead><tr><th style="text-align:center;">char[]</th><th style="text-align:center;">char*</th></tr></thead><tbody><tr><td style="text-align:center;">数组</td><td style="text-align:center;">指针</td></tr><tr><td style="text-align:center;">字符串存储在栈上，内容可修改</td><td style="text-align:center;">指针存储在栈上，但是其他字符串内容存储在 <strong>字符串常量区</strong>，内容不可修改</td></tr><tr><td style="text-align:center;"><code>sizeof(var)</code>等于数组中所有内容占用的空间</td><td style="text-align:center;"><code>sizeof(var)</code> 等于指针变量的占用的空间</td></tr><tr><td style="text-align:center;">只能使用 <code>0</code> 到 <code>size - 1</code> 之间的索引</td><td style="text-align:center;">其索引的本质是进行指针运算，所以任何数都可以，但是越界的访问可能会出现问题，例如：有<code>char *pc</code> ，而 <code>pc[-1]</code> 是指 指针运算 <code>*(pc-1)</code></td></tr></tbody></table><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;5&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span>ptr1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span>ptr2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c\\n&quot;</span><span class="token punctuation">,</span> ptr1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出 &#39;5&#39; 等价于 *(ptr1 - 1)</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>ptr2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 输出 &#39;2&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="_4-数组指针" tabindex="-1"><a class="header-anchor" href="#_4-数组指针" aria-hidden="true">#</a> 4.数组指针</h3><p>数组指针本质就是指针，例如上面的字符指针，实际就是字符数组；即指针代表数组。例如：整形指针 <code>int* pa</code> 可以代表数组 <code>int pa[]</code> ，或者 <code>int (*pa)[10]</code> 可以代表 <code>int pa[][10]</code>。</p><div class="hint-container warning"><p class="hint-container-title">* 和 [] 同时出现时结合的优先级顺序问题</p><p><code>[]</code> 要比 <code>*</code> 的优先级大，所以下面表达式中：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span><span class="token operator">*</span> pa<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">// 指针数组</span>
<span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>pa<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// 数组指针</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>上面第一个表达式中，pa 会先和 <code>[]</code> 结合，所以其就是数组，数组中的元素类型为 <code>int*</code> ，即存放多个指针的数组；</li><li>第二个表达式中，通过括号将 pa 与 <code>*</code> 先结合，使其成为整形指针，也即一维数组，再与 <code>[]</code> 结合，组成二维数组，即指针 pa 代表整个二维数组。</li></ul></div><blockquote><p>在使用数组指针前，首先需要明白 <code>数组名</code> 和 <code>&amp;数组名</code> 的区别，通过下面代码可看出区别</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%p\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 000000000062fdf0   </span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%p\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 000000000062fdf0  </span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%p\\n&quot;</span><span class="token punctuation">,</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 000000000062fdf4</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%p\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 000000000062fe18</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>数组名</code> 代表数组中 &quot;<strong>首元素</strong>&quot; 的地址</li><li><code>&amp;数组名</code> 代表 数组 的地址</li></ul><p>因为在 c 语言中数组的首元素代表的就是数组，所以上面两者是相同的.</p><ul><li><code>a + 1</code> 对应的地址比 <code>a</code> 的地址大 <code>4</code> 个字节，而数组是 <code>int</code> 类型的，所以 <code>a + 1</code> 代表的是数组中首元素的下一个元素的地址（也即第二个元素的地址）【<strong>一次移动一个元素</strong>】</li><li><code>&amp;a + 1</code> 对应的地址比 <code>&amp;a</code> 的地址大 <code>40</code> 个字节，也即是<strong>整个数组的长度</strong>，那么 <code>&amp;a + 1</code> 代表就是跨过整个数组中所有元素后的第一个地址。【<strong>一次移动一整个数组</strong>】</li></ul><blockquote><p>为数组指针赋值</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment">// 一维数组</span>
<span class="token keyword">int</span> <span class="token operator">*</span>pb <span class="token operator">=</span> a<span class="token punctuation">;</span>           <span class="token comment">// 正确, 且 此时的 pb 是一维数组</span>
<span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>pa<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    <span class="token comment">// 正确, 且 此时的 pa 是二维数组</span>
<span class="token comment">// int (*pa)[10] = a;  // 错误, 不能将 int* 赋值给 int(*)[10]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>因为 <code>pa</code> 代表的是二维数组，它可以看作多个一维数组组成的数组，那么要将一维数组赋值给二维数组时，要将该 “首元素” 的地址，也即<strong>整个一维数组的地址</strong> ( <code>&amp;a</code> ) 赋值给 <code>pa</code>。</li></ul><blockquote><p>数组、指针作为函数参数，指针作为函数返回值</p></blockquote><h4 id="_1-一维参数" tabindex="-1"><a class="header-anchor" href="#_1-一维参数" aria-hidden="true">#</a> 1.一维参数</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">// 一维基本数据类型数组</span>
  <span class="token function">test1</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">test2</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">test3</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment">// 一维指针数组</span>
  <span class="token function">test4</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">test5</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>a[]</code> 等价于 <code>a[10]</code> ，且传参传的是数组名，是数组中<strong>首元素的地址</strong>，也即上述例子中的 <code>int*</code> ，所以 <code>int* a</code> 等价于 <code>int a[]</code> 和<code>int a[N]</code>；</li><li><code>int** a</code> 就是个二级指针，而一级指针 <code>int *a</code> 等价于数组 <code>int a[]</code> ，所以将二级指针中的一级指针变为数组，也即 <code>int* a[]</code> ，这也是等价 <code>int** a</code> 的。</li></ul><h4 id="_2-二维参数" tabindex="-1"><a class="header-anchor" href="#_2-二维参数" aria-hidden="true">#</a> 2.二维参数</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token comment">// 二维基本数据类型数组</span>
  <span class="token function">test1</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">test2</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">test3</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">test4</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>         <span class="token comment">// 一维基本数据类型数组</span>
  <span class="token function">test3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// test3 的参数是代表二维数组的指针，而 b 是一维数组, 所以要传递整个数组的地址</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25),N=n("code",null,"int a[][10]",-1),U=n("code",null,"int a[10][10]",-1),E=n("strong",null,"列值",-1),C=a(`<p>指针作为参数时，也和上面分析一致，只需要注意指针和数组之间的关系以及运算符结合的优先级问题即可。</p><h4 id="_3-指针作为函数返回值" tabindex="-1"><a class="header-anchor" href="#_3-指针作为函数返回值" aria-hidden="true">#</a> 3.指针作为函数返回值</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-指针数组" tabindex="-1"><a class="header-anchor" href="#_5-指针数组" aria-hidden="true">#</a> 5.指针数组</h3><p>指针数组就是存放指针的数组，本质是数组，只是将平时使用的基本类型换成了指针。</p><p>声明形式如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span><span class="token operator">*</span> pa<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">// 一级指针数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>在 <a href="#_4-%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88">数组指针</a> 中已经解释清楚优先级问题，基本的一级指针数组如上，多级指针数组也类似，理清优先级即可分清。</li></ul><p>字符串并不是基本类型，那么要使用字符串数组时，就可以使用指针数组实现：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> MAX <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>names<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;Zara Ali&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;Hina Ali&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;Nuha Ali&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;Sara Ali&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; --- names[i]              = &quot;</span> <span class="token operator">&lt;&lt;</span> names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; --- *names[i]             = &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; --- (*names[i] + 1)       = &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; --- (char)(*names[i] + 1) = &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; ------------------------------------ &quot;</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-函数指针" tabindex="-1"><a class="header-anchor" href="#_6-函数指针" aria-hidden="true">#</a> 6.函数指针</h3><h3 id="_7-对象指针" tabindex="-1"><a class="header-anchor" href="#_7-对象指针" aria-hidden="true">#</a> 7.对象指针</h3><h3 id="_8-常量指针和指针常量以及指向常量的常指针" tabindex="-1"><a class="header-anchor" href="#_8-常量指针和指针常量以及指向常量的常指针" aria-hidden="true">#</a> 8.常量指针和指针常量以及指向常量的常指针</h3><blockquote><p>常量指针</p></blockquote><p>又称常指针，可以理解为常量的指针，<strong>是指针</strong>，且其<strong>指向的是常量</strong>，这个常量是指针的值（地址），而不是地址指向的值。也即：<strong>指向的地址是个常量</strong>。关键点：</p><ul><li>常量指针<strong>指向的对象不能通过这个指针来修改</strong>，可是仍然可以通过原来的声明修改；</li><li>常量指针可以被赋值为变量的地址，之所以叫常量指针，是<strong>限制</strong>了通过这个指针修改变量的值；</li><li>指针还可以指向别处，因为指针本身只是个变量，可以指向任意地址；</li></ul><p>例如： 标志： <code>const *</code></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token keyword">const</span><span class="token operator">*</span> p<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>「常量指针」多用于指针作为参数时不想通过该参数改变指向对象的值时使用。</p><blockquote><p>指针常量</p></blockquote><p>本质是一个常量，而用指针修饰它。指针常量的值是指针，这个值因为是常量，所以不能被赋值。关键点：</p><ul><li>它是个常量！</li><li>指针所保存的地址可以改变，然而指针所指向的值却不可以改变；</li><li>指针本身是常量，指向的地址不可以变化，但是指向的地址所对应的内容可以变化；</li></ul><p>例如： 标志：<code>* const</code></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span><span class="token operator">*</span> <span class="token keyword">const</span> p<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>指向常量的常指针</p></blockquote><p>指向常量的指针常量就是一个常量，且它指向的对象也是一个常量。关键点：</p><ul><li>一个指针常量，指向的是一个指针对象；</li><li>它指向的指针对象且是一个常量，即它指向的对象不能变化。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> <span class="token keyword">const</span> p<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">实例</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">//--------常量指针--------//</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>         <span class="token comment">// OK , 仍然可以通过原来声明修改值，</span>
<span class="token comment">// *p1 = 5;      // Err, 无法通过常指针去修改其所指向的地址的 数据</span>
p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>         <span class="token comment">// OK , 常指针也可以随意指向别处</span>

<span class="token comment">//--------指针常量--------//</span>
<span class="token keyword">int</span> <span class="token keyword">const</span><span class="token operator">*</span> p2 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>         <span class="token comment">// OK , 仍然可以通过原来声明修改值，</span>
<span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>         <span class="token comment">// OK , 可以通过常指针去修改其所指向的地址的 数据</span>
<span class="token comment">// p2 = &amp;b;      // Err, 指针常量本身就是个常量，所以不能改变其值，自然也不能改变其指向</span>

<span class="token comment">//--------指向常量的常量指针--------// 结合了上面两种类型的限制</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span> <span class="token keyword">const</span> p3 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token number">600</span><span class="token punctuation">;</span>         <span class="token comment">// OK , 仍然可以通过原来声明修改值，</span>
<span class="token comment">// *p3 = 5;      // Err </span>
<span class="token comment">// p3 = &amp;b;      // Err</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="和-操作符" tabindex="-1"><a class="header-anchor" href="#和-操作符" aria-hidden="true">#</a> <code>* </code> 和 <code>&amp;</code> 操作符</h2><table><thead><tr><th style="text-align:center;"><code>*</code> 操作符</th><th style="text-align:center;">案例</th></tr></thead><tbody><tr><td style="text-align:center;">「<strong>乘号</strong>」进行乘法运算</td><td style="text-align:center;"><code>int a = b * c;</code></td></tr><tr><td style="text-align:center;">「<strong>定义指针</strong>」定义指针变量时使用</td><td style="text-align:center;"><code>int a = 10; int* p = &amp;a;</code></td></tr><tr><td style="text-align:center;">「<strong>间接操作符</strong>」获取指针指向的数据</td><td style="text-align:center;"><code>int a = 10; int* p = &amp;a; </code> 则有 <code>*p == a</code></td></tr></tbody></table><div class="hint-container warning"><p class="hint-container-title">注意</p><p>当 <code>*</code> 作为间接操作符时，只能作用于指针类型的表达式，不能作用于常量，例如：<code>*100 = 25</code> 是错误的写法。</p></div><table><thead><tr><th style="text-align:center;"><code>&amp;</code> 操作符</th><th style="text-align:center;">案例</th></tr></thead><tbody><tr><td style="text-align:center;">「<strong>逻辑与操作符</strong>」<strong>当且仅当都判断完</strong>两边条件都为假时，最后结果才是假</td><td style="text-align:center;">在下面</td></tr><tr><td style="text-align:center;">「<strong>按位与操作符</strong>」将按位与的操作数转化为二进制然后按位与</td><td style="text-align:center;"><code>8&amp;7</code> 等价于<strong>二进制</strong>下<code>1000(2) &amp; 0111(2) ==0000(2)</code></td></tr><tr><td style="text-align:center;">「<strong>取地址操作符</strong>」取出被使用的变量的地址</td><td style="text-align:center;"><code>int a = 10; int* p = &amp;a; </code> 则有 <code>*p == a</code></td></tr></tbody></table><details class="hint-container details"><summary>&amp;&amp; 与 &amp; 的区别</summary><p>相同点：</p><ul><li>都可以作为<strong>逻辑与操作符</strong>，</li></ul><p>不同点：</p><ul><li><code>&amp;&amp;</code> 具有<strong>短路与</strong>的特性，即如果第一个表达式为 <code>false</code> 时，则不再计算第二个表达式，例如：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> m<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// n != 10 为 false 且 &amp;&amp; 不会执行 m++ == 10</span>
  cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> m <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// 输出结果: 10 100</span>
<span class="token punctuation">}</span> 
<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">10</span> <span class="token operator">&amp;</span> m<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// n != 10 为 false 且 &amp; 会执行 m++ == 10</span>
  cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> m <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// 输出结果: 10 101</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>使用 <code>&amp;</code> 按位与的功能可以实现判别整数的奇偶性：</p><ul><li>当 <code>x &amp; 1 == 0</code> 时为偶数；</li><li>当 <code>x &amp; 1 == 1</code> 时为奇数。</li></ul></div><h2 id="使用指针时的一些危险行为" tabindex="-1"><a class="header-anchor" href="#使用指针时的一些危险行为" aria-hidden="true">#</a> 使用指针时的一些危险行为</h2><h3 id="_1-操作符的使用" tabindex="-1"><a class="header-anchor" href="#_1-操作符的使用" aria-hidden="true">#</a> 1.<code>*</code> 操作符的使用</h3><blockquote><p>指针常量</p></blockquote><p>间接操作符 <code>*</code> 只作用于指针类型的表达式，而不直接作用于常量。例如：</p>`,39),K=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{cpp:"",class:"language-cpp"},[n("code",null,[n("span",{class:"token operator"},"*"),n("span",{class:"token number"},"100"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"25"),n("span",{class:"token punctuation"},";"),s("            "),n("span",{class:"token comment"},"// 错误"),s(`
`),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),n("span",{class:"token number"},"100"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"25"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// 正确"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("div",{class:"highlight-line"}," ")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),O=a(`<p>上面错误写法中，就是直接作用于常量，这是非法的，若想将数据 25 存储于地址 <code>100</code> 处，可以通过强制类型转换写法，即上面的正确写法。这里的地址是内存中真正存在的地址，但是由于编译器的在每次编译时，其所分配的地址都是随机的，那么这种赋值是非常危险的，一般情况下绝不会这样使用 <code>*</code> 操作符，除非在某种特定的、需要使用固定内存地址的情况下才会使用。</p><h3 id="_2-空指针、野指针使用时的注意点" tabindex="-1"><a class="header-anchor" href="#_2-空指针、野指针使用时的注意点" aria-hidden="true">#</a> 2.空指针、野指针使用时的注意点</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//-------空指针-------//</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p4 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token comment">//printf(&quot;%d&quot;,*p4); //运行Error，使用指针时必须先判断是否空指针</span>

<span class="token comment">//-------野指针（悬浮、迷途指针）-------//</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">delete</span> p5<span class="token punctuation">;</span>
p5 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">//一定要有这一步</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">*</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//隐藏bug，delete掉指针后一定要置0，不然指针指向位置不可控，运行中可导致系统挂掉</span>

<span class="token comment">//-------指针的内存泄漏-------//</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//p6原本指向的那块内存尚未释放，结果p6又指向了别处，原来new的内存无法访问，也无法delete了，造成memory leak</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function A(B,T){const e=p("ExternalLinkIcon"),o=p("RouterLink");return l(),i("div",null,[k,r(" more "),m,v,b,h,g,y,w,n("p",null,[x,s(" 属于无类型的指针，那么可以通过其在 C 语言中实现泛型编程。具体参考："),n("a",f,[s("C 语言中的泛型编程"),t(e)])]),_,n("p",null,[s("更多细节在: "),n("a",q,[s("nullptr"),t(e)])]),L,n("ul",null,[n("li",null,[N,s(" 等价于 "),U,s(" ，且二维数组声明时不能省略 "),E,s(" ，具体参考:"),t(o,{to:"/demo/1.html"},{default:u(()=>[s("二维数组不能省略列值的原因")]),_:1})])]),C,K,O])}const z=c(d,[["render",A],["__file","1.html.vue"]]);export{z as default};
