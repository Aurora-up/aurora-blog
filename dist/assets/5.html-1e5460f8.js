import{_ as k,X as m,Y as d,a1 as b,Z as s,$ as n,a0 as l,a2 as a,a3 as u,E as i}from"./framework-4e490e68.js";const v="/aurora-blog/assets/image-20230223090904205-0c21a429.png",h="/aurora-blog/assets/image-20230223091022225-e8ff036e.png",g="/aurora-blog/assets/image-20230102134355550-64cd84a3.png",y="/aurora-blog/assets/image-20230102134453477-e1a5ff34.png",w="/aurora-blog/assets/image-20230102134525630-d3cd47b1.png",f="/aurora-blog/assets/image-20230102134555666-9aa91e0c.png",_="/aurora-blog/assets/image-20230102135633720-25063c24.png",x="/aurora-blog/assets/image-20230102140323493-9459588a.png",T="/aurora-blog/assets/image-20230102140405760-5c9f9e9f.png",L="/aurora-blog/assets/image-20230102140542501-6618b46f.png",N="/aurora-blog/assets/image-20230109111314747-a4c70740.png",A="/aurora-blog/assets/image-20230109113522390-7b05735f.png",M="/aurora-blog/assets/image-20230109120203094-daf937e0.png",V={},j=s("p",null,"「AVL 树」",-1),R=s("p",null,[n('G. M. Adelson-Velsky 和 E. M. Landis 在其 1962 年发表的论文 "An algorithm for the organization of information" 中提出了「AVL 树」。'),s("strong",null,"论文中描述了一系列操作，使得在不断添加与删除结点后，AVL 树仍然不会发生退化"),n("，进而使得各种操作的时间复杂度均能保持在 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"l"),s("mi",null,"o"),s("mi",null,"g"),s("mtext",null," ⁡"),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(log \\ ⁡n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mspace"}," "),s("span",{class:"mord"},"⁡"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),n(" 级别。")],-1),S=s("p",null,"换言之，在频繁增删查改的使用场景中，AVL 树可始终保持很高的数据增删查改效率，具有很好的应用价值。",-1),z=s("h2",{id:"avl-树常见术语",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#avl-树常见术语","aria-hidden":"true"},"#"),n(" AVL 树常见术语")],-1),O=s("p",null,"「AVL 树」既是「二叉搜索树」又是「平衡二叉树」，同时满足这两种二叉树的所有性质，因此又被称为「平衡二叉搜索树」.",-1),C=s("h3",{id:"结点高度",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#结点高度","aria-hidden":"true"},"#"),n(" 结点高度")],-1),B=s("p",null,[n("在 AVL 树的操作中，需要获取结点「高度 Height」，所以给 AVL 树的结点类添加 "),s("code",null,"height"),n(" 变量。")],-1),E=s("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[s("pre",{rust:"",class:"language-rust"},[s("code",null,[s("span",{class:"token comment"},"// AVL 树的结点"),n(`
`),s("span",{class:"token keyword"},"pub"),n(),s("span",{class:"token keyword"},"struct"),n(),s("span",{class:"token type-definition class-name"},"AVLNode"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"Ord"),n(),s("span",{class:"token operator"},"+"),n(),s("span",{class:"token class-name"},"Clone"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token keyword"},"pub"),n(" value"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},","),n("                       "),s("span",{class:"token comment"},"// 结点值"),n(`
  height`),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token keyword"},"usize"),s("span",{class:"token punctuation"},","),n("                      "),s("span",{class:"token comment"},"// 结点高度"),n(`
  `),s("span",{class:"token keyword"},"pub"),n(" left"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"Option"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"Box"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"AVLNode"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token operator"},">>"),s("span",{class:"token operator"},">"),s("span",{class:"token punctuation"},","),n("  "),s("span",{class:"token comment"},"// 左子结点"),n(`
  `),s("span",{class:"token keyword"},"pub"),n(" right"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"Option"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"Box"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"AVLNode"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token operator"},">>"),s("span",{class:"token operator"},">"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token comment"},"// 右子结点"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token comment"},"// AVLNode 的左子树或右子树"),n(`
`),s("span",{class:"token attribute attr-name"},"#[derive(Clone, Copy)]"),n(`
`),s("span",{class:"token keyword"},"pub"),n(),s("span",{class:"token keyword"},"enum"),n(),s("span",{class:"token type-definition class-name"},"Side"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token class-name"},"Left"),s("span",{class:"token punctuation"},","),n(`
  `),s("span",{class:"token class-name"},"Right"),s("span",{class:"token punctuation"},","),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token keyword"},"impl"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"Ord"),n(),s("span",{class:"token operator"},"+"),n(),s("span",{class:"token class-name"},"Clone"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token class-name"},"AVLNode"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token comment"},"/// 返回 左 / 右 子结点的不可变引用"),n(`
  `),s("span",{class:"token keyword"},"pub"),n(),s("span",{class:"token keyword"},"fn"),n(),s("span",{class:"token function-definition function"},"child"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},","),n(" side"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"Side"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"->"),n(),s("span",{class:"token operator"},"&"),s("span",{class:"token class-name"},"Option"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"Box"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"AVLNode"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token operator"},">>"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"match"),n(" side "),s("span",{class:"token punctuation"},"{"),n(`
      `),s("span",{class:"token class-name"},"Side"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token class-name"},"Left"),n(),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),n("left"),s("span",{class:"token punctuation"},","),n(`
      `),s("span",{class:"token class-name"},"Side"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token class-name"},"Right"),n(),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),n("right"),s("span",{class:"token punctuation"},","),n(`
    `),s("span",{class:"token punctuation"},"}"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`

  `),s("span",{class:"token comment"},"/// 返回 左 / 右 子结点的可变引用"),n(`
  `),s("span",{class:"token keyword"},"pub"),n(),s("span",{class:"token keyword"},"fn"),n(),s("span",{class:"token function-definition function"},"child_mut"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"mut"),n(),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},","),n(" side"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"Side"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"->"),n(),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"mut"),n(),s("span",{class:"token class-name"},"Option"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"Box"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"AVLNode"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token operator"},">>"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"match"),n(" side "),s("span",{class:"token punctuation"},"{"),n(`
      `),s("span",{class:"token class-name"},"Side"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token class-name"},"Left"),n(),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"mut"),n(),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),n("left"),s("span",{class:"token punctuation"},","),n(`
      `),s("span",{class:"token class-name"},"Side"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token class-name"},"Right"),n(),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"mut"),n(),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),n("right"),s("span",{class:"token punctuation"},","),n(`
    `),s("span",{class:"token punctuation"},"}"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token comment"},"// 为 Side 实现 ! 操作符"),n(`
`),s("span",{class:"token keyword"},"impl"),n(),s("span",{class:"token class-name"},"Not"),n(),s("span",{class:"token keyword"},"for"),n(),s("span",{class:"token class-name"},"Side"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token keyword"},"type"),n(),s("span",{class:"token type-definition class-name"},"Output"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token class-name"},"Side"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"fn"),n(),s("span",{class:"token function-definition function"},"not"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"->"),n(),s("span",{class:"token keyword"},"Self"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token class-name"},"Output"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"match"),n(),s("span",{class:"token keyword"},"self"),n(),s("span",{class:"token punctuation"},"{"),n(`
      `),s("span",{class:"token class-name"},"Side"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token class-name"},"Left"),n(),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token class-name"},"Side"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token class-name"},"Right"),s("span",{class:"token punctuation"},","),n(`
      `),s("span",{class:"token class-name"},"Side"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token class-name"},"Right"),n(),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token class-name"},"Side"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token class-name"},"Left"),s("span",{class:"token punctuation"},","),n(`
    `),s("span",{class:"token punctuation"},"}"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"highlight-lines"},[s("br"),s("br"),s("br"),s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br")]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),H=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{java:"",class:"language-java"},[s("code",null,[s("span",{class:"token comment"},"// AVL 树的结点"),n(`
`),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"class"),n(),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),n(),s("span",{class:"token keyword"},"extends"),n(),s("span",{class:"token class-name"},"Comparable"),s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">"),s("span",{class:"token punctuation"},">")]),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token class-name"},"T"),n(" value"),s("span",{class:"token punctuation"},";"),n("             "),s("span",{class:"token comment"},"// 结点值"),n(`
  `),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"int"),n(" height"),s("span",{class:"token punctuation"},";"),n("          "),s("span",{class:"token comment"},"// 结点高度"),n(`
  `),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(" left"),s("span",{class:"token punctuation"},";"),n("    "),s("span",{class:"token comment"},"// 左子结点"),n(`
  `),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(" right"),s("span",{class:"token punctuation"},";"),n("   "),s("span",{class:"token comment"},"// 右子结点"),n(`
  
  `),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"T"),n(" value"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},"."),n("value "),s("span",{class:"token operator"},"="),n(" value"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"highlight-lines"},[s("br"),s("br"),s("br"),s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br")]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),F=s("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[s("pre",{cpp:"",class:"language-cpp"},[s("code",null,[s("span",{class:"token comment"},"// AVL 树中的结点"),n(`
`),s("span",{class:"token keyword"},"template"),n(),s("span",{class:"token operator"},"<"),s("span",{class:"token keyword"},"typename"),n(),s("span",{class:"token class-name"},"T"),s("span",{class:"token operator"},">"),n(`
`),s("span",{class:"token keyword"},"struct"),n(),s("span",{class:"token class-name"},"TreeNode"),n(),s("span",{class:"token punctuation"},"{"),n(`
  T value`),s("span",{class:"token punctuation"},";"),n("            "),s("span",{class:"token comment"},"// 结点值"),n(`
  TreeNode`),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token operator"},"*"),n("left"),s("span",{class:"token punctuation"},";"),n("  "),s("span",{class:"token comment"},"// 左子结点"),n(`
  TreeNode`),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token operator"},"*"),n("right"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"// 右子结点"),n(`
  `),s("span",{class:"token keyword"},"int"),n(" height "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},";"),n("     "),s("span",{class:"token comment"},"// 结点高度"),n(`
  `),s("span",{class:"token function"},"TreeNode"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"default"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"explicit"),n(),s("span",{class:"token function"},"TreeNode"),s("span",{class:"token punctuation"},"("),n("T x"),s("span",{class:"token punctuation"},","),n(" TreeNode"),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token operator"},"*"),n("left "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"nullptr"),s("span",{class:"token punctuation"},","),n(" TreeNode"),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token operator"},"*"),n("right "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"nullptr"),s("span",{class:"token punctuation"},")"),n(`
      `),s("span",{class:"token operator"},":"),n(),s("span",{class:"token function"},"value"),s("span",{class:"token punctuation"},"("),n("x"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token function"},"left"),s("span",{class:"token punctuation"},"("),n("left"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token function"},"right"),s("span",{class:"token punctuation"},"("),n("right"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br"),s("br")]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),G=s("p",null,[n("「结点高度」是最远叶结点到该结点的距离，即走过的「边」的数量。需要特别注意，"),s("strong",null,"叶结点的高度为 0 ，空结点的高度为 -1"),n(" 。封装两个工具函数，分别用于获取与更新结点的高度。")],-1),q=s("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[s("pre",{class:"language-rust"},[s("code",null,[s("span",{class:"token keyword"},"impl"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"Ord"),n(),s("span",{class:"token operator"},"+"),n(),s("span",{class:"token class-name"},"Clone"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token class-name"},"AVLNode"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token comment"},"/// 返回 左 / 右 子树高度"),n(`
  `),s("span",{class:"token keyword"},"pub"),n(),s("span",{class:"token keyword"},"fn"),n(),s("span",{class:"token function-definition function"},"height"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},","),n(" side"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"Side"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"->"),n(),s("span",{class:"token keyword"},"usize"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token comment"},"// None(叶子结点) 时高度为 0"),n(`
    `),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"child"),s("span",{class:"token punctuation"},"("),n("side"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"as_ref"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"map_or"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token closure-params"},[s("span",{class:"token closure-punctuation punctuation"},"|"),n("n"),s("span",{class:"token closure-punctuation punctuation"},"|")]),n(" n"),s("span",{class:"token punctuation"},"."),n("height"),s("span",{class:"token punctuation"},")"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`

  `),s("span",{class:"token comment"},"/// 更新结点的高度"),n(`
  `),s("span",{class:"token keyword"},"pub"),n(),s("span",{class:"token keyword"},"fn"),n(),s("span",{class:"token function-definition function"},"update_height"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"mut"),n(),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token comment"},"// 左，右子树高度的最大值 + 1"),n(`
    `),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),n("height "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token namespace"},[n("std"),s("span",{class:"token punctuation"},"::"),n("cmp"),s("span",{class:"token punctuation"},"::")]),s("span",{class:"token function"},"max"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"height"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"Side"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token class-name"},"Left"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"height"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"Side"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token class-name"},"Right"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"+"),n(),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),X=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"language-java"},[s("code",null,[s("span",{class:"token keyword"},"class"),n(),s("span",{class:"token class-name"},"AVLTree"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),n(),s("span",{class:"token keyword"},"extends"),n(),s("span",{class:"token class-name"},"Comparable"),s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">"),s("span",{class:"token punctuation"},">")]),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(" root"),s("span",{class:"token punctuation"},";"),n(`

  `),s("span",{class:"token doc-comment comment"},[n(`/**
   * 获取结点高度
   * `),s("span",{class:"token keyword"},"@param"),n(),s("span",{class:"token parameter"},"node"),n(` 结点信息
   * `),s("span",{class:"token keyword"},"@return"),n(` 结点高度
   */`)]),n(`
  `),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"int"),n(),s("span",{class:"token function"},"height"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(" node"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token comment"},"// 空结点高度为 -1 ，叶结点高度为 0"),n(`
    `),s("span",{class:"token keyword"},"return"),n(" node "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token keyword"},"null"),n(),s("span",{class:"token operator"},"?"),n(),s("span",{class:"token operator"},"-"),s("span",{class:"token number"},"1"),n(),s("span",{class:"token operator"},":"),n(" node"),s("span",{class:"token punctuation"},"."),n("height"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`

  `),s("span",{class:"token doc-comment comment"},[n(`/**
   * 更新结点高度
   * `),s("span",{class:"token keyword"},"@param"),n(),s("span",{class:"token parameter"},"node"),n(`
   */`)]),n(`
  `),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token keyword"},"void"),n(),s("span",{class:"token function"},"updateHeight"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(" node"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token comment"},"// 结点高度等于最高子树高度 + 1"),n(`
    node`),s("span",{class:"token punctuation"},"."),n("height "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token class-name"},"Math"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"max"),s("span",{class:"token punctuation"},"("),s("span",{class:"token function"},"height"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},"."),n("left"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token function"},"height"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},"."),n("right"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"+"),n(),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Y=s("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[s("pre",{class:"language-cpp"},[s("code",null,[s("span",{class:"token keyword"},"template"),n(),s("span",{class:"token operator"},"<"),s("span",{class:"token keyword"},"typename"),n(),s("span",{class:"token class-name"},"T"),s("span",{class:"token operator"},">"),n(`
`),s("span",{class:"token keyword"},"class"),n(),s("span",{class:"token class-name"},"AVLTree"),n(),s("span",{class:"token punctuation"},"{"),n(`
`),s("span",{class:"token keyword"},"private"),s("span",{class:"token operator"},":"),n(`
  TreeNode`),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),s("span",{class:"token operator"},"*"),n(" root"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token comment"},`/**
   * 获取结点高度
   * @param node 结点
   * @return 结点的高度
   */`),n(`
  `),s("span",{class:"token keyword"},"int"),n(),s("span",{class:"token function"},"height"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"const"),n(" TreeNode"),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),s("span",{class:"token operator"},"*"),n(" node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token comment"},"// 空结点高度为 -1, 叶节点高度为 0"),n(`
    `),s("span",{class:"token keyword"},"return"),n(" node "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token keyword"},"nullptr"),n(),s("span",{class:"token operator"},"?"),n(),s("span",{class:"token operator"},"-"),s("span",{class:"token number"},"1"),n(),s("span",{class:"token operator"},":"),n(" node"),s("span",{class:"token operator"},"->"),n("height"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`
  `),s("span",{class:"token comment"},`/**
   * 更新结点高度
   * @param node 结点
   */`),n(`
  `),s("span",{class:"token keyword"},"void"),n(),s("span",{class:"token function"},"update_height"),s("span",{class:"token punctuation"},"("),n("TreeNode"),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),s("span",{class:"token operator"},"*"),n(" node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"{"),n(`
    node`),s("span",{class:"token operator"},"->"),n("height "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"max"),s("span",{class:"token punctuation"},"("),s("span",{class:"token function"},"height"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token operator"},"->"),n("right"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token function"},"height"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token operator"},"->"),n("left"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"+"),n(),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`

`),s("span",{class:"token keyword"},"public"),s("span",{class:"token operator"},":"),n(`
  `),s("span",{class:"token function"},"AVLTree"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"default"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"explicit"),n(),s("span",{class:"token function"},"AVLTree"),s("span",{class:"token punctuation"},"("),n("TreeNode"),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token operator"},"*"),n("node"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},":"),n(),s("span",{class:"token function"},"root"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),n(`
  
  TreeNode`),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token operator"},"*"),n(),s("span",{class:"token function"},"get_root"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token keyword"},"this"),s("span",{class:"token operator"},"->"),n("root"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Z=s("h3",{id:"结点平衡因子",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#结点平衡因子","aria-hidden":"true"},"#"),n(" 结点平衡因子")],-1),$=s("p",null,[n("结点的「平衡因子 Balance Factor」是 "),s("strong",null,"结点的左子树高度减去右子树高度"),n("，并定义空结点的平衡因子为 0 。同样地，将获取结点平衡因子封装成函数，以便后续使用。")],-1),D=s("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[s("pre",{class:"language-rust"},[s("code",null,[s("span",{class:"token keyword"},"impl"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"Ord"),n(),s("span",{class:"token operator"},"+"),n(),s("span",{class:"token class-name"},"Clone"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token class-name"},"AVLNode"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token comment"},"/// 返回该结点的平衡因子"),n(`
  `),s("span",{class:"token keyword"},"pub"),n(),s("span",{class:"token keyword"},"fn"),n(),s("span",{class:"token function-definition function"},"balance_factor"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"->"),n(),s("span",{class:"token keyword"},"i8"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token comment"},"// 结点的左，右子树高度"),n(`
    `),s("span",{class:"token keyword"},"let"),n(),s("span",{class:"token punctuation"},"("),n("left"),s("span",{class:"token punctuation"},","),n(" right"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"height"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"Side"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token class-name"},"Left"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"height"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"Side"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token class-name"},"Right"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token keyword"},"if"),n(" left "),s("span",{class:"token operator"},"<"),n(" right "),s("span",{class:"token punctuation"},"{"),n(`
      `),s("span",{class:"token comment"},"// 右子树高"),n(`
      `),s("span",{class:"token punctuation"},"("),n("right "),s("span",{class:"token operator"},"-"),n(" left"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"as"),n(),s("span",{class:"token keyword"},"i8"),n(`
    `),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token punctuation"},"{"),n(`
      `),s("span",{class:"token comment"},"// 左子树高"),n(`
      `),s("span",{class:"token operator"},"-"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"("),n("right "),s("span",{class:"token operator"},"-"),n(" left"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"as"),n(),s("span",{class:"token keyword"},"i8"),s("span",{class:"token punctuation"},")"),n(`
    `),s("span",{class:"token punctuation"},"}"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),I=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"language-java"},[s("code",null,[s("span",{class:"token doc-comment comment"},[n(`/**
 * 获取该结点的平衡因子
 * `),s("span",{class:"token keyword"},"@param"),n(),s("span",{class:"token parameter"},"node"),n(` 结点
 * `),s("span",{class:"token keyword"},"@return"),n(` 结点的平衡因子
 */`)]),n(`
`),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"int"),n(),s("span",{class:"token function"},"balanceFactor"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(" node"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token comment"},"// 空结点平衡因子为 0"),n(`
  `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("node "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token comment"},"// 结点平衡因子 = 左子树高度 - 右子树高度"),n(`
  `),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token function"},"height"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},"."),n("left"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"-"),n(),s("span",{class:"token function"},"height"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},"."),n("right"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),J=s("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[s("pre",{class:"language-cpp"},[s("code",null,[s("span",{class:"token comment"},`/**
 * 获取结点的平衡因子
 * @param node 结点
 * @return 结点的平衡因子
 */`),n(`
`),s("span",{class:"token keyword"},"int"),n(),s("span",{class:"token function"},"get_balance_factor"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"const"),n(" TreeNode"),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),s("span",{class:"token operator"},"*"),n(" node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token comment"},"// 空结点平衡因子为 0"),n(`
  `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("node "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token keyword"},"nullptr"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token comment"},"// 左子树 - 右子树"),n(`
  `),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token function"},"height"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token operator"},"->"),n("left"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"-"),n(),s("span",{class:"token function"},"height"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token operator"},"->"),n("right"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),K=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"AVL 树性质"),s("ul",null,[s("li",null,[n("设平衡因子为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"f")]),s("annotation",{encoding:"application/x-tex"},"f")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f")])])]),n(" ，则一颗 AVL 树的任意结点的平衡因子皆满足 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"−"),s("mn",null,"1"),s("mo",null,"≤"),s("mi",null,"f"),s("mo",null,"≤"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"-1≤f≤1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7804em","vertical-align":"-0.136em"}}),s("span",{class:"mord"},"−"),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),n(" ；")]),s("li",null,[n("结点数的递推公式："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"n"),s("mn",null,"0")]),s("mo",null,"="),s("mn",null,"0"),s("mo",{separator:"true"},","),s("msub",null,[s("mi",null,"n"),s("mn",null,"1")]),s("mo",null,"="),s("mn",null,"1"),s("mo",{separator:"true"},","),s("msub",null,[s("mi",null,"n"),s("mi",null,"h")]),s("mo",null,"="),s("mn",null,"1"),s("mo",null,"+"),s("msub",null,[s("mi",null,"n"),s("mrow",null,[s("mi",null,"h"),s("mo",null,"−"),s("mn",null,"1")])]),s("mo",null,"+"),s("msub",null,[s("mi",null,"n"),s("mrow",null,[s("mi",null,"h"),s("mo",null,"−"),s("mn",null,"2")])])]),s("annotation",{encoding:"application/x-tex"},"n_0=0, n_1=1, n_h=1+n_{h-1}+n_{h-2}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},"0"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3361em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"h")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7917em","vertical-align":"-0.2083em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3361em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"h"),s("span",{class:"mbin mtight"},"−"),s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2083em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6389em","vertical-align":"-0.2083em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3361em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"h"),s("span",{class:"mbin mtight"},"−"),s("span",{class:"mord mtight"},"2")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2083em"}},[s("span")])])])])])])])]),n("，其中 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"h")]),s("annotation",{encoding:"application/x-tex"},"h")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"h")])])]),n(" 为 AVL树的 "),s("strong",null,"层数"),n(" ，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"n"),s("mi",null,"h")])]),s("annotation",{encoding:"application/x-tex"},"n_h")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3361em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"h")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),n(" 为层数 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"h")]),s("annotation",{encoding:"application/x-tex"},"h")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"h")])])]),n(" 下的 AVL树所需要的"),s("strong",null,"最少结点数"),n("；反过来说 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"h")]),s("annotation",{encoding:"application/x-tex"},"h")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"h")])])]),n(" 就是这些结点可以组成的 AVL树的"),s("strong",null,"最大层数"),n("，并且此时树中的"),s("strong",null,"非叶子结点"),n("的平衡因子 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"∣"),s("mi",null,"f"),s("mi",{mathvariant:"normal"},"∣"),s("mo",null,"="),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"|f|=1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"∣"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),s("span",{class:"mord"},"∣"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),n(" 。")])])],-1),P=s("p",null,[s("img",{src:v,alt:"image-20230223090904205"})],-1),Q=s("p",null,[s("img",{src:h,alt:"image-20230223091022225"})],-1),U=s("h2",{id:"avl-树旋转",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#avl-树旋转","aria-hidden":"true"},"#"),n(" AVL 树旋转")],-1),W=s("p",null,[n("AVL 树的独特之处在于「旋转 Rotation」的操作，其可 "),s("strong",null,"在不影响二叉树中序遍历序列的前提下，使失衡结点重新恢复平衡。"),n(" 换言之，旋转操作既可以使树保持为「二叉搜索树」，也可以使树重新恢复为「平衡二叉树」。")],-1),ss=s("p",null,[n("将平衡因子的绝对值 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,">"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},">1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),s("span",{class:"mrel"},">"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),n(" 的结点称为「失衡结点」。根据结点的失衡情况，旋转操作分为 "),s("strong",null,"右旋、左旋、先右旋后左旋、先左旋后右旋"),n(".")],-1),ns=s("h3",{id:"右旋-顺时针",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#右旋-顺时针","aria-hidden":"true"},"#"),n(" 右旋 (顺时针)")],-1),as=s("p",null,[n("如下图所示（结点下方为「平衡因子」），从底至顶看，二叉树中首个失衡结点是 "),s("strong",null,"结点 3"),n(" 。聚焦在以该失衡结点为根结点的子树上，将该结点记为 "),s("code",null,"node"),n(" ，将其左子结点记为 "),s("code",null,"child"),n(" ，执行「右旋」操作。完成右旋后，该子树已经恢复平衡，并且仍然为二叉搜索树。")],-1),ts=s("p",null,[s("img",{src:g,alt:"image-20230102134355550"})],-1),es=s("p",null,[s("img",{src:y,alt:"image-20230102134453477"})],-1),os=s("p",null,null,-1),ls=s("p",null,[s("img",{src:w,alt:"image-20230102134525630"})],-1),cs=s("p",null,null,-1),ps=s("p",null,[s("img",{src:f,alt:"image-20230102134555666"})],-1),is=s("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[s("pre",{class:"language-rust"},[s("code",null,[s("span",{class:"token keyword"},"impl"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"Ord"),n(),s("span",{class:"token operator"},"+"),n(),s("span",{class:"token class-name"},"Clone"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token class-name"},"AVLNode"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token comment"},"// 执行左旋 / 右旋"),n(`
  `),s("span",{class:"token keyword"},"fn"),n(),s("span",{class:"token function-definition function"},"rotate"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"mut"),n(),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},","),n(" side"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"Side"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token comment"},"// 左旋 / 右旋 时获取 右子结点 / 左子结点 (该点为旋转时的基准原点)"),n(`
    `),s("span",{class:"token keyword"},"let"),n(),s("span",{class:"token keyword"},"mut"),n(" subtree "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"child_mut"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"!"),n("side"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"take"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"unwrap"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token operator"},"*"),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"child_mut"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"!"),n("side"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(" subtree"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"child_mut"),s("span",{class:"token punctuation"},"("),n("side"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"take"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"// 将旋转时被替换的结点的子树接到新的结点上"),n(`
    `),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"update_height"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token namespace"},[n("mem"),s("span",{class:"token punctuation"},"::")]),s("span",{class:"token function"},"swap"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},","),n(" subtree"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"as_mut"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"// 在内存中交换 “根结点” 和子结点"),n(`
    `),s("span",{class:"token operator"},"*"),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"child_mut"),s("span",{class:"token punctuation"},"("),n("side"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token class-name"},"Some"),s("span",{class:"token punctuation"},"("),n("subtree"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"// 将 “根结点” 作为左子结点 / 右子结点的右子结点 / 左子结点"),n(`
    `),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"update_height"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),us=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"language-java"},[s("code",null,[s("span",{class:"token doc-comment comment"},[n(`/**
 * 右旋操作
 * `),s("span",{class:"token keyword"},"@param"),n(),s("span",{class:"token parameter"},"node"),n(` 失衡结点
 * `),s("span",{class:"token keyword"},"@return"),n(` 右转后该子树的根结点
 */`)]),n(`
`),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(),s("span",{class:"token function"},"rightRotate"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(" node"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(" child "),s("span",{class:"token operator"},"="),n(" node"),s("span",{class:"token punctuation"},"."),n("left"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(" grandChild "),s("span",{class:"token operator"},"="),n(" child"),s("span",{class:"token punctuation"},"."),n("right"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token comment"},"// 以 child 为原点, 将 node 向左旋转"),n(`
  child`),s("span",{class:"token punctuation"},"."),n("right "),s("span",{class:"token operator"},"="),n(" node"),s("span",{class:"token punctuation"},";"),n(`
  node`),s("span",{class:"token punctuation"},"."),n("left "),s("span",{class:"token operator"},"="),n(" grandChild"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token comment"},"// 更新结点高度"),n(`
  `),s("span",{class:"token function"},"updateHeight"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token function"},"updateHeight"),s("span",{class:"token punctuation"},"("),n("child"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token comment"},"// 返回旋转后子树的根结点"),n(`
  `),s("span",{class:"token keyword"},"return"),n(" child"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),rs=s("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[s("pre",{class:"language-cpp"},[s("code",null,[s("span",{class:"token comment"},`/**
 * 右旋
 * @param node 失衡结点
 * @return 调正之后的最小不平衡子树的根结点
 */`),n(`
TreeNode`),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),s("span",{class:"token operator"},"*"),n(),s("span",{class:"token function"},"right_rotate"),s("span",{class:"token punctuation"},"("),n("TreeNode"),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),s("span",{class:"token operator"},"*"),n(" node"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
  TreeNode`),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),s("span",{class:"token operator"},"*"),n(" child "),s("span",{class:"token operator"},"="),n(" node"),s("span",{class:"token operator"},"->"),n("left"),s("span",{class:"token punctuation"},";"),n(`
  TreeNode`),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),s("span",{class:"token operator"},"*"),n(" grandChild "),s("span",{class:"token operator"},"="),n(" child"),s("span",{class:"token operator"},"->"),n("right"),s("span",{class:"token punctuation"},";"),n(`
  child`),s("span",{class:"token operator"},"->"),n("right "),s("span",{class:"token operator"},"="),n(" node"),s("span",{class:"token punctuation"},";"),n(`
  node`),s("span",{class:"token operator"},"->"),n("left "),s("span",{class:"token operator"},"="),n(" grandChild"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token function"},"update_height"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token function"},"update_height"),s("span",{class:"token punctuation"},"("),n("child"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"return"),n(" child"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ks=s("h3",{id:"左旋-逆时针",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#左旋-逆时针","aria-hidden":"true"},"#"),n(" 左旋 (逆时针)")],-1),ms=s("p",null,[n("类似地，如果将取上述失衡二叉树的“镜像”，那么则需要「左旋」操作。观察发现，"),s("strong",null,"「左旋」和「右旋」操作是镜像对称的，两者对应解决的两种失衡情况也是对称的"),n("。")],-1),ds=s("p",null,[s("img",{src:_,alt:"image-20230102135633720"})],-1),bs=s("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[s("pre",{class:"language-rust"},[s("code",null,[s("span",{class:"token keyword"},"impl"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"Ord"),n(),s("span",{class:"token operator"},"+"),n(),s("span",{class:"token class-name"},"Clone"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token class-name"},"AVLNode"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token comment"},"// 执行左旋 / 右旋"),n(`
  `),s("span",{class:"token keyword"},"fn"),n(),s("span",{class:"token function-definition function"},"rotate"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"mut"),n(),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},","),n(" side"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"Side"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token comment"},"// 左旋 / 右旋 时获取 右子结点 / 左子结点 (该点为旋转时的基准原点)"),n(`
    `),s("span",{class:"token keyword"},"let"),n(),s("span",{class:"token keyword"},"mut"),n(" subtree "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"child_mut"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"!"),n("side"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"take"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"unwrap"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token operator"},"*"),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"child_mut"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"!"),n("side"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(" subtree"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"child_mut"),s("span",{class:"token punctuation"},"("),n("side"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"take"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"// 将旋转时被替换的结点的子树接到新的结点上"),n(`
    `),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"update_height"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token namespace"},[n("mem"),s("span",{class:"token punctuation"},"::")]),s("span",{class:"token function"},"swap"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},","),n(" subtree"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"as_mut"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"// 在内存中交换 “根结点” 和子结点"),n(`
    `),s("span",{class:"token operator"},"*"),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"child_mut"),s("span",{class:"token punctuation"},"("),n("side"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token class-name"},"Some"),s("span",{class:"token punctuation"},"("),n("subtree"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"// 将 “根结点” 作为左子结点 / 右子结点的右子结点 / 左子结点"),n(`
    `),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"update_height"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),vs=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"language-java"},[s("code",null,[s("span",{class:"token doc-comment comment"},[n(`/**
 * 左旋操作
 * `),s("span",{class:"token keyword"},"@param"),n(),s("span",{class:"token parameter"},"node"),n(` 失衡结点
 * `),s("span",{class:"token keyword"},"@return"),n(` 左旋后该子树的根结点
 */`)]),n(`
`),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(),s("span",{class:"token function"},"leftRotate"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(" node"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(" child "),s("span",{class:"token operator"},"="),n(" node"),s("span",{class:"token punctuation"},"."),n("right"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(" grandChild "),s("span",{class:"token operator"},"="),n(" child"),s("span",{class:"token punctuation"},"."),n("left"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token comment"},"// 以 child 为原点将 node 向左旋转"),n(`
  child`),s("span",{class:"token punctuation"},"."),n("left "),s("span",{class:"token operator"},"="),n(" node"),s("span",{class:"token punctuation"},";"),n(`
  node`),s("span",{class:"token punctuation"},"."),n("right "),s("span",{class:"token operator"},"="),n(" grandChild"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token comment"},"// 更新结点高度"),n(`
  `),s("span",{class:"token function"},"updateHeight"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token function"},"updateHeight"),s("span",{class:"token punctuation"},"("),n("child"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token comment"},"// 返回旋转后子树的根结点"),n(`
  `),s("span",{class:"token keyword"},"return"),n(" child"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),hs=s("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[s("pre",{class:"language-cpp"},[s("code",null,[s("span",{class:"token comment"},`/**
 * 左旋
 * @param node 失衡结点
 * @return 调正之后的最小不平衡子树的根结点
 */`),n(`
TreeNode`),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),s("span",{class:"token operator"},"*"),n(),s("span",{class:"token function"},"left_rotate"),s("span",{class:"token punctuation"},"("),n("TreeNode"),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),s("span",{class:"token operator"},"*"),n(" node"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
  TreeNode`),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),s("span",{class:"token operator"},"*"),n(" child "),s("span",{class:"token operator"},"="),n(" node"),s("span",{class:"token operator"},"->"),n("right"),s("span",{class:"token punctuation"},";"),n(`
  TreeNode`),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),s("span",{class:"token operator"},"*"),n(" grandChild "),s("span",{class:"token operator"},"="),n(" child"),s("span",{class:"token operator"},"->"),n("left"),s("span",{class:"token punctuation"},";"),n(`
  child`),s("span",{class:"token operator"},"->"),n("left "),s("span",{class:"token operator"},"="),n(" node"),s("span",{class:"token punctuation"},";"),n(`
  node`),s("span",{class:"token operator"},"->"),n("right "),s("span",{class:"token operator"},"="),n(" grandChild"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token function"},"update_height"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token function"},"update_height"),s("span",{class:"token punctuation"},"("),n("child"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"return"),n(" child"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),gs=u('<h3 id="先左后右" tabindex="-1"><a class="header-anchor" href="#先左后右" aria-hidden="true">#</a> 先左后右</h3><p>对于下图的失衡结点 3 ，<strong>单一使用左旋或右旋都无法使子树恢复平衡</strong>，此时需要「先左旋后右旋」，即先对 <code>child</code> 执行「左旋」，再对 <code>node</code> 执行「右旋」.</p><p><img src="'+x+'" alt="image-20230102140323493"></p><h3 id="先右后左" tabindex="-1"><a class="header-anchor" href="#先右后左" aria-hidden="true">#</a> 先右后左</h3><p>同理，取以上失衡二叉树的镜像，则需要「先右旋后左旋」，即先对 <code>child</code> 执行「右旋」，然后对 <code>node</code> 执行「左旋」。</p><p><img src="'+T+'" alt="image-20230102140405760"></p><h3 id="旋转的选择" tabindex="-1"><a class="header-anchor" href="#旋转的选择" aria-hidden="true">#</a> 旋转的选择</h3><p>下图描述的四种失衡情况：</p><table><thead><tr><th style="text-align:center;">代称</th><th style="text-align:center;">情况</th><th style="text-align:center;">采取措施</th></tr></thead><tbody><tr><td style="text-align:center;">LL</td><td style="text-align:center;">左子结点的左子树中插入结点</td><td style="text-align:center;">右旋</td></tr><tr><td style="text-align:center;">LR</td><td style="text-align:center;">左子结点的右子树中插入结点</td><td style="text-align:center;">先左旋后右旋</td></tr><tr><td style="text-align:center;">RL</td><td style="text-align:center;">右子结点的左子树中插入结点</td><td style="text-align:center;">先右旋后左旋</td></tr><tr><td style="text-align:center;">RR</td><td style="text-align:center;">右子结点的右子树中插入结点</td><td style="text-align:center;">左旋</td></tr></tbody></table><p><img src="'+L+'" alt="image-20230102140542501"></p><p>具体地，需要使用 <strong>失衡结点的平衡因子、较高一侧子结点的平衡因子</strong> 来确定失衡结点属于上图中的哪种情况。</p>',11),ys=s("table",null,[s("thead",null,[s("tr",null,[s("th",{style:{"text-align":"center"}},"失衡结点的平衡因子"),s("th",{style:{"text-align":"center"}},"子结点的平衡因子"),s("th",{style:{"text-align":"center"}},"应采用的旋转方法")])]),s("tbody",null,[s("tr",null,[s("td",{style:{"text-align":"center"}},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,">"),s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},">0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),s("span",{class:"mrel"},">"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),n(" (左偏树)")]),s("td",{style:{"text-align":"center"}},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"≥"),s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"≥0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7719em","vertical-align":"-0.136em"}}),s("span",{class:"mrel"},"≥"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])])]),s("td",{style:{"text-align":"center"}},"右旋")]),s("tr",null,[s("td",{style:{"text-align":"center"}},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,">"),s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},">0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),s("span",{class:"mrel"},">"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),n(" (左偏树)")]),s("td",{style:{"text-align":"center"}},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"<"),s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"<0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),s("span",{class:"mrel"},"<"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])])]),s("td",{style:{"text-align":"center"}},"先左旋后右旋")]),s("tr",null,[s("td",{style:{"text-align":"center"}},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"<"),s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"<0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),s("span",{class:"mrel"},"<"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),n(" (右偏树)")]),s("td",{style:{"text-align":"center"}},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"≤"),s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"≤0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7719em","vertical-align":"-0.136em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])])]),s("td",{style:{"text-align":"center"}},"左旋")]),s("tr",null,[s("td",{style:{"text-align":"center"}},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"<"),s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"<0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),s("span",{class:"mrel"},"<"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),n(" (右偏树)")]),s("td",{style:{"text-align":"center"}},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,">"),s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},">0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),s("span",{class:"mrel"},">"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])])]),s("td",{style:{"text-align":"center"}},"先右旋后左旋")])])],-1),ws=s("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[s("pre",{class:"language-rust"},[s("code",null,[s("span",{class:"token keyword"},"impl"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"Ord"),n(),s("span",{class:"token operator"},"+"),n(),s("span",{class:"token class-name"},"Clone"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token class-name"},"AVLTree"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token comment"},"/// 调整该结点的子树使其 “平衡”"),n(`
  `),s("span",{class:"token keyword"},"fn"),n(),s("span",{class:"token function-definition function"},"rebalance"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"mut"),n(),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"update_height"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token keyword"},"let"),n(" side "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"match"),n(),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"balance_factor"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
      `),s("span",{class:"token number"},"2"),n(),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token class-name"},"Side"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token class-name"},"Right"),s("span",{class:"token punctuation"},","),n("   "),s("span",{class:"token comment"},"// 右偏树 (RR[左旋] / RL[先右后左])  "),n(`
      `),s("span",{class:"token operator"},"-"),s("span",{class:"token number"},"2"),n(),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token class-name"},"Side"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token class-name"},"Left"),s("span",{class:"token punctuation"},","),n("   "),s("span",{class:"token comment"},"// 左偏树 (LL[右旋] / LR[先左后右])"),n(`
      _ `),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token keyword"},"return"),s("span",{class:"token punctuation"},","),n(`
    `),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),n(`

    `),s("span",{class:"token keyword"},"let"),n(" subtree "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"child_mut"),s("span",{class:"token punctuation"},"("),n("side"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"as_mut"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"unwrap"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token comment"},"// 等于 1 时为LR 型第一步左旋 或者 等于 -1 时为RL 型第一步右旋"),n(`
    `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token keyword"},"let"),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"Side"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token class-name"},"Left"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"Side"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token class-name"},"Right"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token operator"},"-"),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"("),n("side"),s("span",{class:"token punctuation"},","),n(" subtree"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"balance_factor"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
      subtree`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"rotate"),s("span",{class:"token punctuation"},"("),n("side"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token punctuation"},"}"),n(`
    `),s("span",{class:"token comment"},"// LR 型第二步右旋 或者 RL 型第二步左旋"),n(`
    `),s("span",{class:"token comment"},"// LL型 右旋 或者 RR型 左旋 "),n(`
    `),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"rotate"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"!"),n("side"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),fs=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"language-java"},[s("code",null,[s("span",{class:"token doc-comment comment"},[n(`/**
 * 根据结点的平衡因子和子结点的平衡因子选择对应的旋转方式
 * `),s("span",{class:"token keyword"},"@param"),n(),s("span",{class:"token parameter"},"node"),n(` 失衡结点
 * `),s("span",{class:"token keyword"},"@return"),n(` 已经平衡的树的根结点
 */`)]),n(`
`),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(),s("span",{class:"token function"},"rotate"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(" node"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token comment"},"// 获取结点 node 的失衡因子"),n(`
  `),s("span",{class:"token keyword"},"int"),n(" balanceFactor "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"balanceFactor"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token comment"},"// 左偏树"),n(`
  `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("balanceFactor "),s("span",{class:"token operator"},">"),n(),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token function"},"balanceFactor"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},"."),n("left"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},">="),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
      `),s("span",{class:"token comment"},"// 右旋"),n(`
      `),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token function"},"rightRotate"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token punctuation"},"{"),n(`
      `),s("span",{class:"token comment"},"// 先左旋后右旋"),n(`
      node`),s("span",{class:"token punctuation"},"."),n("left "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"leftRotate"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},"."),n("left"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
      `),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token function"},"rightRotate"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token punctuation"},"}"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`
  `),s("span",{class:"token comment"},"// 右偏树"),n(`
  `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("balanceFactor "),s("span",{class:"token operator"},"<"),n(),s("span",{class:"token operator"},"-"),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token function"},"balanceFactor"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},"."),n("right"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"<="),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
      `),s("span",{class:"token comment"},"// 左旋"),n(`
      `),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token function"},"leftRotate"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token punctuation"},"{"),n(`
      `),s("span",{class:"token comment"},"// 先右旋后左旋"),n(`
      node`),s("span",{class:"token punctuation"},"."),n("right "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"rightRotate"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},"."),n("right"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
      `),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token function"},"leftRotate"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token punctuation"},"}"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`
  `),s("span",{class:"token comment"},"// 已经旋转为平衡树, 直接返回"),n(`
  `),s("span",{class:"token keyword"},"return"),n(" node"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),_s=s("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[s("pre",{class:"language-cpp"},[s("code",null,[s("span",{class:"token comment"},`/**
 * 根据结点的平衡因子和子结点的平衡因子选择对应的旋转方式
 * @param node 失衡结点
 * @return 调正之后的子树的根结点
 */`),n(`
TreeNode`),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),s("span",{class:"token operator"},"*"),n(),s("span",{class:"token function"},"rotate"),s("span",{class:"token punctuation"},"("),n("TreeNode"),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token operator"},"*"),n(" node"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token keyword"},"int"),n(" balance_factor "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"get_balance_factor"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token comment"},"// 左偏树  LL[右旋] / LR[先左后右]"),n(`
  `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("balance_factor "),s("span",{class:"token operator"},">"),n(),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token function"},"get_balance_factor"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token operator"},"->"),n("left"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},">="),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n("  "),s("span",{class:"token comment"},"// LL[右旋]"),n(`
      `),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token function"},"right_rotate"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token punctuation"},"}"),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token punctuation"},"{"),n("                                     "),s("span",{class:"token comment"},"// LR[先左后右]"),n(`
      node`),s("span",{class:"token operator"},"->"),n("left "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"left_rotate"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token operator"},"->"),n("left"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
      `),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token function"},"right_rotate"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token punctuation"},"}"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`
  `),s("span",{class:"token comment"},"// 右偏树  RR[左旋] / RL[先右后左]"),n(`
  `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("balance_factor "),s("span",{class:"token operator"},"<"),n(),s("span",{class:"token operator"},"-"),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token function"},"get_balance_factor"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token operator"},"->"),n("right"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"<="),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n("  "),s("span",{class:"token comment"},"//  RR[左旋]"),n(`
      `),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token function"},"left_rotate"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token punctuation"},"}"),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token punctuation"},"{"),n("                                      "),s("span",{class:"token comment"},"//  RL[先右后左]"),n(`
      node`),s("span",{class:"token operator"},"->"),n("right "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"right_rotate"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token operator"},"->"),n("right"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
      `),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token function"},"left_rotate"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token punctuation"},"}"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`
  `),s("span",{class:"token keyword"},"return"),n(" node"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),xs=s("h2",{id:"avl-树常用操作",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#avl-树常用操作","aria-hidden":"true"},"#"),n(" AVL 树常用操作")],-1),Ts=s("h3",{id:"插入结点",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#插入结点","aria-hidden":"true"},"#"),n(" 插入结点")],-1),Ls=s("strong",null,"需要从最底层失衡结点开始，从底至顶地执行旋转操作，使所有失衡结点恢复平衡",-1),Ns=s("strong",null,"最小不平衡子树",-1),As=s("p",null,"【具体思路】",-1),Ms=s("p",null,[n("采用递归策略进行插入操作；这样的做的好处是不需要记录父结点，在上面的"),s("a",{href:"#%E5%8F%B3%E6%97%8B-%E9%A1%BA%E6%97%B6%E9%92%88"},"「旋转操作」"),n("都是对最小不平衡子树进行调整，然后返回调整后的根结点；")],-1),Vs=s("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[s("pre",{rust:"",class:"language-rust"},[s("code",null,[s("span",{class:"token comment"},"/// AVL 树"),n(`
`),s("span",{class:"token keyword"},"pub"),n(),s("span",{class:"token keyword"},"struct"),n(),s("span",{class:"token type-definition class-name"},"AVLTree"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"Ord"),n(),s("span",{class:"token operator"},"+"),n(),s("span",{class:"token class-name"},"Clone"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token punctuation"},"{"),n(`
    root`),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"Option"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"Box"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"AVLNode"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token operator"},">>"),s("span",{class:"token operator"},">"),s("span",{class:"token punctuation"},","),n(`
    length`),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token keyword"},"usize"),s("span",{class:"token punctuation"},","),n(`
`),s("span",{class:"token punctuation"},"}"),n(`

`),s("span",{class:"token keyword"},"impl"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"Ord"),n(),s("span",{class:"token operator"},"+"),n(),s("span",{class:"token class-name"},"Clone"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token class-name"},"AVLTree"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token comment"},"/// 创建一个空的二叉树"),n(`
  `),s("span",{class:"token keyword"},"pub"),n(),s("span",{class:"token keyword"},"fn"),n(),s("span",{class:"token function-definition function"},"new"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"->"),n(),s("span",{class:"token keyword"},"Self"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token class-name"},"AVLTree"),n(),s("span",{class:"token punctuation"},"{"),n(`
      root`),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"None"),s("span",{class:"token punctuation"},","),n(`
      length`),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},","),n(`
    `),s("span",{class:"token punctuation"},"}"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`

  `),s("span",{class:"token comment"},"/// 插入结点"),n(`
  `),s("span",{class:"token keyword"},"pub"),n(),s("span",{class:"token keyword"},"fn"),n(),s("span",{class:"token function-definition function"},"insert"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"mut"),n(),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},","),n(" value"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"->"),n(),s("span",{class:"token keyword"},"bool"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"let"),n(" inserted "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"insert"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"mut"),n(),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),n("root"),s("span",{class:"token punctuation"},","),n(" value"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token keyword"},"if"),n(" inserted "),s("span",{class:"token punctuation"},"{"),n(),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),n("length "),s("span",{class:"token operator"},"+="),n(),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token punctuation"},"}"),n(`
    inserted
  `),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token comment"},"/// 递归的插入结点"),n(`
`),s("span",{class:"token keyword"},"fn"),n(),s("span",{class:"token function-definition function"},"insert"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"Ord"),n(),s("span",{class:"token operator"},"+"),n(),s("span",{class:"token class-name"},"Clone"),s("span",{class:"token operator"},">"),s("span",{class:"token punctuation"},"("),n("tree"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"mut"),n(),s("span",{class:"token class-name"},"Option"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"Box"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"AVLNode"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token operator"},">>"),s("span",{class:"token operator"},">"),s("span",{class:"token punctuation"},","),n(" value"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"->"),n(),s("span",{class:"token keyword"},"bool"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token keyword"},"let"),n(),s("span",{class:"token class-name"},"Some"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(" tree "),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"let"),n(" inserted "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"match"),n(" value"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"cmp"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"&"),n("node"),s("span",{class:"token punctuation"},"."),n("value"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
      `),s("span",{class:"token class-name"},"Ordering"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token class-name"},"Equal"),n(),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token boolean"},"false"),s("span",{class:"token punctuation"},","),n(`
      `),s("span",{class:"token class-name"},"Ordering"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token class-name"},"Less"),n(),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token function"},"insert"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"mut"),n(" node"),s("span",{class:"token punctuation"},"."),n("left"),s("span",{class:"token punctuation"},","),n(" value"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),n(`
      `),s("span",{class:"token class-name"},"Ordering"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token class-name"},"Greater"),n(),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token function"},"insert"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"mut"),n(" node"),s("span",{class:"token punctuation"},"."),n("right"),s("span",{class:"token punctuation"},","),n(" value"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),n(`
    `),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token keyword"},"if"),n(" inserted "),s("span",{class:"token punctuation"},"{"),n(" node"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"rebalance"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token punctuation"},"}"),n(`
    inserted
  `),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token operator"},"*"),n("tree "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token class-name"},"Some"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"Box"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token function"},"new"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"AVLNode"),n(),s("span",{class:"token punctuation"},"{"),n(`
      value`),s("span",{class:"token punctuation"},","),n(`
      height`),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},","),n(`
      left`),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"None"),s("span",{class:"token punctuation"},","),n(`
      right`),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"None"),s("span",{class:"token punctuation"},","),n(`
    `),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token boolean"},"true"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br")]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),js=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{java:"",class:"language-java"},[s("code",null,[s("span",{class:"token doc-comment comment"},[n(`/**
 * 插入结点
 * `),s("span",{class:"token keyword"},"@param"),n(),s("span",{class:"token parameter"},"node"),n(` 待插入结点
 * `),s("span",{class:"token keyword"},"@return"),n(` 插入后 AVL 树的根结点
 */`)]),n(`
`),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(),s("span",{class:"token function"},"insert"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(" node"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
  root `),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"insertHelper"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},"."),n("root"),s("span",{class:"token punctuation"},","),n(" node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"return"),n(" root"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`

`),s("span",{class:"token doc-comment comment"},[n(`/**
 * 递归的插入结点 (辅助函数)
 * `),s("span",{class:"token keyword"},"@param"),n(),s("span",{class:"token parameter"},"node"),n(`   子树的根结点
 * `),s("span",{class:"token keyword"},"@param"),n(),s("span",{class:"token parameter"},"i_node"),n(` 待插入结点
 * `),s("span",{class:"token keyword"},"@return"),n(` 返回子树的根结点
 */`)]),n(`
`),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(),s("span",{class:"token function"},"insertHelper"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(" node"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(" i_node"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("node "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"return"),n(" i_node"),s("span",{class:"token punctuation"},";"),n("         "),s("span",{class:"token comment"},"// 树为空, 插入结点直接作为根结点"),n(`
  `),s("span",{class:"token comment"},"// 1. 查找插入位置，并插入结点"),n(`
  `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("i_node"),s("span",{class:"token punctuation"},"."),n("value"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"compareTo"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},"."),n("value"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"<"),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),n(`
    node`),s("span",{class:"token punctuation"},"."),n("left "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"insertHelper"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},"."),n("left"),s("span",{class:"token punctuation"},","),n(" i_node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("i_node"),s("span",{class:"token punctuation"},"."),n("value"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"compareTo"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},"."),n("value"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},">"),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),n(`
    node`),s("span",{class:"token punctuation"},"."),n("right "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"insertHelper"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},"."),n("right"),s("span",{class:"token punctuation"},","),n(" i_node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"else"),n(`
    `),s("span",{class:"token keyword"},"return"),n(" node"),s("span",{class:"token punctuation"},";"),n("           "),s("span",{class:"token comment"},"// 重复结点不插入，直接返回"),n(`
  `),s("span",{class:"token function"},"updateHeight"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n("      "),s("span",{class:"token comment"},"// 更新结点高度"),n(`
  `),s("span",{class:"token comment"},"// 2. 执行旋转操作, 使子树重新恢复平衡"),n(`
  node `),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"rotate"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"return"),n(" node"),s("span",{class:"token punctuation"},";"),n("              "),s("span",{class:"token comment"},"// 返回子树的根结点"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"}," "),s("br"),s("div",{class:"highlight-line"}," "),s("br"),s("br")]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Rs=s("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[s("pre",{cpp:"",class:"language-cpp"},[s("code",null,[n("TreeNode"),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),s("span",{class:"token operator"},"*"),n(),s("span",{class:"token function"},"insert"),s("span",{class:"token punctuation"},"("),n("T value"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token keyword"},"this"),s("span",{class:"token operator"},"->"),n("root "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"insert_helper"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"this"),s("span",{class:"token operator"},"->"),n("root"),s("span",{class:"token punctuation"},","),n(" value"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"return"),n(" root"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`

TreeNode`),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),s("span",{class:"token operator"},"*"),n(),s("span",{class:"token function"},"insert_helper"),s("span",{class:"token punctuation"},"("),n("TreeNode"),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),s("span",{class:"token operator"},"*"),n(" node"),s("span",{class:"token punctuation"},","),n(" T value"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token keyword"},"auto"),s("span",{class:"token operator"},"*"),n(" i_node "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token generic-function"},[s("span",{class:"token function"},"TreeNode"),s("span",{class:"token generic class-name"},[s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">")])]),s("span",{class:"token punctuation"},"("),n("value"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("node "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token keyword"},"nullptr"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"return"),n(" i_node"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("value "),s("span",{class:"token operator"},">"),n(" node"),s("span",{class:"token operator"},"->"),n("value"),s("span",{class:"token punctuation"},")"),n(`
    node`),s("span",{class:"token operator"},"->"),n("right "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"insert_helper"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token operator"},"->"),n("right"),s("span",{class:"token punctuation"},","),n(" value"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("value "),s("span",{class:"token operator"},"<"),n(" node"),s("span",{class:"token operator"},"->"),n("value"),s("span",{class:"token punctuation"},")"),n(`
    node`),s("span",{class:"token operator"},"->"),n("left "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"insert_helper"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token operator"},"->"),n("left"),s("span",{class:"token punctuation"},","),n(" value"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"else"),n(`
    `),s("span",{class:"token keyword"},"return"),n(" node"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token function"},"update_height"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  node `),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"rotate"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"return"),n(" node"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"}," "),s("div",{class:"highlight-line"}," "),s("br"),s("br")]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ss=s("h3",{id:"删除结点",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#删除结点","aria-hidden":"true"},"#"),n(" 删除结点")],-1),zs=s("strong",null,"在删除结点后，也需要从底至顶地执行旋转操作，使所有失衡结点恢复平衡",-1),Os=s("strong",null,"最小不平衡子树",-1),Cs=s("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[s("pre",{rust:"",class:"language-rust"},[s("code",null,[s("span",{class:"token keyword"},"impl"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"Ord"),n(),s("span",{class:"token operator"},"+"),n(),s("span",{class:"token class-name"},"Clone"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token class-name"},"AVLTree"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token comment"},"/// 删除结点"),n(`
  `),s("span",{class:"token keyword"},"pub"),n(),s("span",{class:"token keyword"},"fn"),n(),s("span",{class:"token function-definition function"},"remove"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"mut"),n(),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},","),n(" value"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token operator"},"&"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"->"),n(),s("span",{class:"token keyword"},"bool"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"let"),n(" removed "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"remove"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"mut"),n(),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),n("root"),s("span",{class:"token punctuation"},","),n(" value"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token keyword"},"if"),n(" removed "),s("span",{class:"token punctuation"},"{"),n(),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),n("length "),s("span",{class:"token operator"},"-="),n(),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},";"),s("span",{class:"token punctuation"},"}"),n(`
    removed
  `),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token comment"},"/// 递归的删除结点"),n(`
`),s("span",{class:"token keyword"},"fn"),n(),s("span",{class:"token function-definition function"},"remove"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"Ord"),n(),s("span",{class:"token operator"},"+"),n(),s("span",{class:"token class-name"},"Clone"),s("span",{class:"token operator"},">"),s("span",{class:"token punctuation"},"("),n("tree"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"mut"),n(),s("span",{class:"token class-name"},"Option"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"Box"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"AVLNode"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token operator"},">>"),s("span",{class:"token operator"},">"),s("span",{class:"token punctuation"},","),n(" value"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token operator"},"&"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"->"),n(),s("span",{class:"token keyword"},"bool"),n(),s("span",{class:"token punctuation"},"{"),n(`
	`),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token keyword"},"let"),n(),s("span",{class:"token class-name"},"Some"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(" tree "),s("span",{class:"token punctuation"},"{"),n(`
		`),s("span",{class:"token keyword"},"let"),n(" removed "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"match"),n(" value"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"cmp"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"&"),n("node"),s("span",{class:"token punctuation"},"."),n("value"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
			`),s("span",{class:"token class-name"},"Ordering"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token class-name"},"Less"),n(),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token function"},"remove"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"mut"),n(" node"),s("span",{class:"token punctuation"},"."),n("left"),s("span",{class:"token punctuation"},","),n(" value"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),n(`
			`),s("span",{class:"token class-name"},"Ordering"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token class-name"},"Greater"),n(),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token function"},"remove"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"mut"),n(" node"),s("span",{class:"token punctuation"},"."),n("right"),s("span",{class:"token punctuation"},","),n(" value"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),n(`
			`),s("span",{class:"token class-name"},"Ordering"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token class-name"},"Equal"),n(),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token punctuation"},"{"),n(`
				`),s("span",{class:"token operator"},"*"),n("tree "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"match"),n(),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},"."),n("left"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"take"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),n(" node"),s("span",{class:"token punctuation"},"."),n("right"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"take"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
					`),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"None"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token class-name"},"None"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token class-name"},"None"),s("span",{class:"token punctuation"},","),n(`
					`),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"Some"),s("span",{class:"token punctuation"},"("),n("b"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token class-name"},"None"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"None"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token class-name"},"Some"),s("span",{class:"token punctuation"},"("),n("b"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token class-name"},"Some"),s("span",{class:"token punctuation"},"("),n("b"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),n(`
					`),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"Some"),s("span",{class:"token punctuation"},"("),n("left"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token class-name"},"Some"),s("span",{class:"token punctuation"},"("),n("right"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token class-name"},"Some"),s("span",{class:"token punctuation"},"("),s("span",{class:"token function"},"merge"),s("span",{class:"token punctuation"},"("),n("left"),s("span",{class:"token punctuation"},","),n(" right"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),n(`
				`),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),n(`
				`),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token boolean"},"true"),s("span",{class:"token punctuation"},";"),n(`
			`),s("span",{class:"token punctuation"},"}"),n(`
		`),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),n(`
		`),s("span",{class:"token keyword"},"if"),n(" removed "),s("span",{class:"token punctuation"},"{"),n(" node"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"rebalance"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token punctuation"},"}"),n(`
		removed
	`),s("span",{class:"token punctuation"},"}"),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token punctuation"},"{"),n(`
		`),s("span",{class:"token boolean"},"false"),n(`
	`),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token comment"},"/// 合并左右子树"),n(`
`),s("span",{class:"token keyword"},"fn"),n(),s("span",{class:"token function-definition function"},"merge"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"Ord"),n(),s("span",{class:"token operator"},"+"),n(),s("span",{class:"token class-name"},"Clone"),s("span",{class:"token operator"},">"),s("span",{class:"token punctuation"},"("),n("left"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"Box"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"AVLNode"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token operator"},">>"),s("span",{class:"token punctuation"},","),n(" right"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"Box"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"AVLNode"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token operator"},">>"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"->"),n(),s("span",{class:"token class-name"},"Box"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"AVLNode"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token operator"},">>"),n(),s("span",{class:"token punctuation"},"{"),n(`
	`),s("span",{class:"token keyword"},"let"),n(),s("span",{class:"token keyword"},"mut"),n(" op_right "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token class-name"},"Some"),s("span",{class:"token punctuation"},"("),n("right"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
	`),s("span",{class:"token keyword"},"let"),n(),s("span",{class:"token keyword"},"mut"),n(" root "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"take_min"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"mut"),n(" op_right"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"unwrap"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
	root`),s("span",{class:"token punctuation"},"."),n("left "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token class-name"},"Some"),s("span",{class:"token punctuation"},"("),n("left"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
	root`),s("span",{class:"token punctuation"},"."),n("right "),s("span",{class:"token operator"},"="),n(" op_right"),s("span",{class:"token punctuation"},";"),n(`
	root`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"balance_factor"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
	root
`),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token comment"},"/// 找最小值"),n(`
`),s("span",{class:"token keyword"},"fn"),n(),s("span",{class:"token function-definition function"},"take_min"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"Ord"),n(),s("span",{class:"token operator"},"+"),n(),s("span",{class:"token class-name"},"Clone"),s("span",{class:"token operator"},">"),s("span",{class:"token punctuation"},"("),n("tree"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"mut"),n(),s("span",{class:"token class-name"},"Option"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"Box"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"AVLNode"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token operator"},">>"),s("span",{class:"token operator"},">"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"->"),n(),s("span",{class:"token class-name"},"Option"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"Box"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"AVLNode"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token operator"},">>"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token punctuation"},"{"),n(`
	`),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token keyword"},"let"),n(),s("span",{class:"token class-name"},"Some"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"mut"),n(" node"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(" tree"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"take"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
		`),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token keyword"},"let"),n(),s("span",{class:"token class-name"},"Some"),s("span",{class:"token punctuation"},"("),n("small"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"take_min"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"mut"),n(" node"),s("span",{class:"token punctuation"},"."),n("left"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
			node`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"rebalance"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
			`),s("span",{class:"token operator"},"*"),n("tree "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token class-name"},"Some"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
			`),s("span",{class:"token class-name"},"Some"),s("span",{class:"token punctuation"},"("),n("small"),s("span",{class:"token punctuation"},")"),n(`
		`),s("span",{class:"token punctuation"},"}"),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token punctuation"},"{"),n(`
			`),s("span",{class:"token operator"},"*"),n("tree "),s("span",{class:"token operator"},"="),n(" node"),s("span",{class:"token punctuation"},"."),n("right"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"take"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
			`),s("span",{class:"token class-name"},"Some"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),n(`
		`),s("span",{class:"token punctuation"},"}"),n(`
	`),s("span",{class:"token punctuation"},"}"),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token punctuation"},"{"),n(`
		`),s("span",{class:"token class-name"},"None"),n(`
	`),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br")]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Bs=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{java:"",class:"language-java"},[s("code",null,[s("span",{class:"token doc-comment comment"},[n(`/**
 * 删除结点
 * `),s("span",{class:"token keyword"},"@param"),n(),s("span",{class:"token parameter"},"node"),n(` 待删除结点
 * `),s("span",{class:"token keyword"},"@return"),n(` 删除后 AVL 树的根结点
 */`)]),n(`
`),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(),s("span",{class:"token function"},"remove"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(" node"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
  root `),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"removeHelper"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},"."),n("root"),s("span",{class:"token punctuation"},","),n(" node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"return"),n(" root"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token doc-comment comment"},[n(`/**
 * 递归地删除结点 (辅助函数)
 * `),s("span",{class:"token keyword"},"@param"),n(),s("span",{class:"token parameter"},"node"),n(` 子树的根结点
 * `),s("span",{class:"token keyword"},"@param"),n(),s("span",{class:"token parameter"},"r_node"),n(` 待删除结点
 * `),s("span",{class:"token keyword"},"@return"),n(` 返回子树的根结点
 */`)]),n(`
`),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(),s("span",{class:"token function"},"removeHelper"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(" node"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(" r_node"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("node "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token comment"},"// 1. 查找结点, 并删除"),n(`
  `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("r_node"),s("span",{class:"token punctuation"},"."),n("value"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"compareTo"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},"."),n("value"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"<"),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),n(`
    node`),s("span",{class:"token punctuation"},"."),n("left "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"removeHelper"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},"."),n("left"),s("span",{class:"token punctuation"},","),n(" r_node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("r_node"),s("span",{class:"token punctuation"},"."),n("value"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"compareTo"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},"."),n("value"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},">"),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),n(`
    node`),s("span",{class:"token punctuation"},"."),n("right "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"removeHelper"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},"."),n("right"),s("span",{class:"token punctuation"},","),n(" r_node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},"."),n("left "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token keyword"},"null"),n(),s("span",{class:"token operator"},"||"),n(" node"),s("span",{class:"token punctuation"},"."),n("right "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
      `),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(" child "),s("span",{class:"token operator"},"="),n(" node"),s("span",{class:"token punctuation"},"."),n("left "),s("span",{class:"token operator"},"!="),n(),s("span",{class:"token keyword"},"null"),n(),s("span",{class:"token operator"},"?"),n(" node"),s("span",{class:"token punctuation"},"."),n("left "),s("span",{class:"token operator"},":"),n(" node"),s("span",{class:"token punctuation"},"."),n("right"),s("span",{class:"token punctuation"},";"),n(`
      `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("child "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),n("    "),s("span",{class:"token comment"},"// 子结点数量 = 0 ，直接删除 node 并返回"),n(`
        `),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},";"),n(`
      `),s("span",{class:"token keyword"},"else"),n("                  "),s("span",{class:"token comment"},"// 子结点数量 = 1 ，直接删除 node"),n(`
        node `),s("span",{class:"token operator"},"="),n(" child"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token punctuation"},"}"),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token punctuation"},"{"),n(`
      `),s("span",{class:"token comment"},"// 子结点数量 = 2 ，则将中序遍历的下个结点删除，并用该结点替换当前结点"),n(`
      `),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(" next "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"inOrderNext"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},"."),n("right"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
      `),s("span",{class:"token class-name"},"T"),n(" tmp "),s("span",{class:"token operator"},"="),n(" next"),s("span",{class:"token punctuation"},"."),n("value"),s("span",{class:"token punctuation"},";"),n(`
      node`),s("span",{class:"token punctuation"},"."),n("right "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"removeHelper"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},"."),n("right"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token punctuation"},">")]),s("span",{class:"token punctuation"},"("),n("tmp"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
      node`),s("span",{class:"token punctuation"},"."),n("value "),s("span",{class:"token operator"},"="),n(" tmp"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token punctuation"},"}"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`
  `),s("span",{class:"token function"},"updateHeight"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n("       "),s("span",{class:"token comment"},"// 更新结点高度"),n(`
  `),s("span",{class:"token comment"},"// 2. 执行旋转操作，使该子树重新恢复平衡"),n(`
  node `),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"rotate"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"return"),n(" node"),s("span",{class:"token punctuation"},";"),n("              "),s("span",{class:"token comment"},"// 返回子树的根结点"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token doc-comment comment"},[n(`/**
 * 获取待删除结点在中序遍历下的后继结点
 * `),s("span",{class:"token keyword"},"@param"),n(),s("span",{class:"token parameter"},"node"),n(` 待删除结点的右子结点
 * `),s("span",{class:"token keyword"},"@return"),n(` 待删除结点在中序遍历下的后继结点
 */`)]),n(`
`),s("span",{class:"token keyword"},"private"),n(),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(),s("span",{class:"token function"},"inOrderNext"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(" node"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("node "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token comment"},"// 循环访问左子结点,直到叶结点时为最小结点,跳出循环"),n(`
  `),s("span",{class:"token keyword"},"while"),n(),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},"."),n("left "),s("span",{class:"token operator"},"!="),n(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
    node `),s("span",{class:"token operator"},"="),n(" node"),s("span",{class:"token punctuation"},"."),n("left"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`
  `),s("span",{class:"token keyword"},"return"),n(" node"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"}," "),s("br"),s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br")]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Es=s("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[s("pre",{cpp:"",class:"language-cpp"},[s("code",null,[n("TreeNode"),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),s("span",{class:"token operator"},"*"),n(),s("span",{class:"token function"},"remove"),s("span",{class:"token punctuation"},"("),n("T value"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token keyword"},"this"),s("span",{class:"token operator"},"->"),n("root "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"remove_helper"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"this"),s("span",{class:"token operator"},"->"),n("root"),s("span",{class:"token punctuation"},","),n(" value"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"return"),n(" root"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`

TreeNode`),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),s("span",{class:"token operator"},"*"),n(),s("span",{class:"token function"},"remove_helper"),s("span",{class:"token punctuation"},"("),n("TreeNode"),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),s("span",{class:"token operator"},"*"),n(" node"),s("span",{class:"token punctuation"},","),n(" T value"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("node "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token keyword"},"nullptr"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token keyword"},"nullptr"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("value "),s("span",{class:"token operator"},"<"),n(" node"),s("span",{class:"token operator"},"->"),n("value"),s("span",{class:"token punctuation"},")"),n(`
    node`),s("span",{class:"token operator"},"->"),n("left "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"remove_helper"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token operator"},"->"),n("left"),s("span",{class:"token punctuation"},","),n(" value"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("value "),s("span",{class:"token operator"},">"),n(" node"),s("span",{class:"token operator"},"->"),n("value"),s("span",{class:"token punctuation"},")"),n(`
    node`),s("span",{class:"token operator"},"->"),n("right "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"remove_helper"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token operator"},"->"),n("right"),s("span",{class:"token punctuation"},","),n(" value"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token operator"},"->"),n("left "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token keyword"},"nullptr"),n(),s("span",{class:"token operator"},"||"),n(" node"),s("span",{class:"token operator"},"->"),n("right "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token keyword"},"nullptr"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
      `),s("span",{class:"token comment"},"// 当子结点数量 = 0 / 1 时， child = nullptr / 该子结点"),n(`
      TreeNode`),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token operator"},"*"),n("child "),s("span",{class:"token operator"},"="),n(" node"),s("span",{class:"token operator"},"->"),n("left "),s("span",{class:"token operator"},"!="),n(),s("span",{class:"token keyword"},"nullptr"),n(),s("span",{class:"token operator"},"?"),n(" node"),s("span",{class:"token operator"},"->"),n("left "),s("span",{class:"token operator"},":"),n(" node"),s("span",{class:"token operator"},"->"),n("right"),s("span",{class:"token punctuation"},";"),n(`
      `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("child "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token keyword"},"nullptr"),s("span",{class:"token punctuation"},")"),n(`
        `),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token keyword"},"nullptr"),s("span",{class:"token punctuation"},";"),n(`
      `),s("span",{class:"token keyword"},"else"),n(`
        node `),s("span",{class:"token operator"},"="),n(" child"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token punctuation"},"}"),n(`
    `),s("span",{class:"token comment"},"// 子结点数量 = 2"),n(`
    `),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token punctuation"},"{"),n(`
      TreeNode`),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),s("span",{class:"token operator"},"*"),n(" next "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"take_min"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token operator"},"->"),n("right"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
      T tmp `),s("span",{class:"token operator"},"="),n(" next"),s("span",{class:"token operator"},"->"),n("value"),s("span",{class:"token punctuation"},";"),n(`
      node`),s("span",{class:"token operator"},"->"),n("right "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"remove_helper"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token operator"},"->"),n("right"),s("span",{class:"token punctuation"},","),n(" tmp"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
      node`),s("span",{class:"token operator"},"->"),n("value "),s("span",{class:"token operator"},"="),n(" tmp"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token punctuation"},"}"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`
  `),s("span",{class:"token function"},"update_height"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  node `),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"rotate"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"return"),n(" node"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`

`),s("span",{class:"token comment"},`/**
 * @brief 获取最小结点
 * @param root 所要寻找结点的右子结点
 * @return TreeNode<T>* 右子树上的最小结点
 */`),n(`
TreeNode`),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),s("span",{class:"token operator"},"*"),n(),s("span",{class:"token function"},"take_min"),s("span",{class:"token punctuation"},"("),n("TreeNode"),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),s("span",{class:"token operator"},"*"),n(" root"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("root "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token keyword"},"nullptr"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"return"),n(" root"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token comment"},"// 循环访问左子结点，直到叶结点时为最小结点返回"),n(`
  `),s("span",{class:"token keyword"},"while"),n(),s("span",{class:"token punctuation"},"("),n("root"),s("span",{class:"token operator"},"->"),n("left "),s("span",{class:"token operator"},"!="),n(),s("span",{class:"token keyword"},"nullptr"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
    root `),s("span",{class:"token operator"},"="),n(" root"),s("span",{class:"token operator"},"->"),n("left"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`
  `),s("span",{class:"token keyword"},"return"),n(" root"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"}," "),s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br")]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Hs=s("h3",{id:"查找结点",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#查找结点","aria-hidden":"true"},"#"),n(" 查找结点")],-1),Fs=s("p",null,[n("在 AVL 树中查找的过程与二叉搜索树相同，假设 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"n"),s("mi",null,"h")])]),s("annotation",{encoding:"application/x-tex"},"n_h")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3361em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"h")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),n(" 表示深度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"h")]),s("annotation",{encoding:"application/x-tex"},"h")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"h")])])]),n(" 的平衡树中含有的"),s("strong",null,"最少结点数"),n("，显然有 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"n"),s("mn",null,"0")]),s("mo",null,"="),s("mn",null,"0"),s("mo",{separator:"true"},","),s("msub",null,[s("mi",null,"n"),s("mn",null,"1")]),s("mo",null,"="),s("mn",null,"1"),s("mo",{separator:"true"},","),s("msub",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mo",null,"="),s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"n_0=0,n_1=1,n_2=2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},"0"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2")])])]),n(" ，并且有 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"n"),s("mi",null,"h")]),s("mo",null,"="),s("msub",null,[s("mi",null,"n"),s("mrow",null,[s("mi",null,"h"),s("mo",null,"−"),s("mn",null,"1")])]),s("mo",null,"+"),s("msub",null,[s("mi",null,"n"),s("mrow",null,[s("mi",null,"h"),s("mo",null,"−"),s("mn",null,"2")])]),s("mo",null,"+"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"n_h=n_{h-1}+n_{h-2}+1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3361em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"h")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7917em","vertical-align":"-0.2083em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3361em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"h"),s("span",{class:"mbin mtight"},"−"),s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2083em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7917em","vertical-align":"-0.2083em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3361em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"h"),s("span",{class:"mbin mtight"},"−"),s("span",{class:"mord mtight"},"2")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2083em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),n(" .")],-1),Gs=s("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[s("pre",{class:"language-rust"},[s("code",null,[s("span",{class:"token keyword"},"impl"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"Ord"),n(),s("span",{class:"token operator"},"+"),n(),s("span",{class:"token class-name"},"Clone"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token class-name"},"AVLTree"),s("span",{class:"token operator"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token comment"},"/// 查找结点值"),n(`
  `),s("span",{class:"token keyword"},"pub"),n(),s("span",{class:"token keyword"},"fn"),n(),s("span",{class:"token function-definition function"},"search"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},","),n(" value"),s("span",{class:"token punctuation"},":"),n(),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"->"),n(),s("span",{class:"token keyword"},"bool"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"let"),n(),s("span",{class:"token keyword"},"mut"),n(" cur "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token operator"},"&"),s("span",{class:"token keyword"},"self"),s("span",{class:"token punctuation"},"."),n("root"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token keyword"},"while"),n(),s("span",{class:"token keyword"},"let"),n(),s("span",{class:"token class-name"},"Some"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"="),n(" cur "),s("span",{class:"token punctuation"},"{"),n(`
      cur `),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"match"),n(" value"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"cmp"),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"&"),n("node"),s("span",{class:"token punctuation"},"."),n("value"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
        `),s("span",{class:"token class-name"},"Ordering"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token class-name"},"Equal"),n(),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token keyword"},"return"),n(),s("span",{class:"token boolean"},"true"),s("span",{class:"token punctuation"},","),n(`
        `),s("span",{class:"token class-name"},"Ordering"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token class-name"},"Less"),n(),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token operator"},"&"),n("node"),s("span",{class:"token punctuation"},"."),n("left"),s("span",{class:"token punctuation"},","),n(`
        `),s("span",{class:"token class-name"},"Ordering"),s("span",{class:"token punctuation"},"::"),s("span",{class:"token class-name"},"Greater"),n(),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token operator"},"&"),n("node"),s("span",{class:"token punctuation"},"."),n("right"),s("span",{class:"token punctuation"},","),n(`
      `),s("span",{class:"token punctuation"},"}"),n(`
    `),s("span",{class:"token punctuation"},"}"),n(`
    `),s("span",{class:"token boolean"},"false"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),qs=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"language-java"},[s("code",null,[s("span",{class:"token doc-comment comment"},[n(`/**
 * 查找结点
 * `),s("span",{class:"token keyword"},"@param"),n(),s("span",{class:"token parameter"},"node"),n(` 带查找的结点
 * `),s("span",{class:"token keyword"},"@return"),n(` 目标结点
 */`)]),n(`
`),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(),s("span",{class:"token function"},"search"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(" node"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token class-name"},"TreeNode"),s("span",{class:"token generics"},[s("span",{class:"token punctuation"},"<"),s("span",{class:"token class-name"},"T"),s("span",{class:"token punctuation"},">")]),n(" cur "),s("span",{class:"token operator"},"="),n(" root"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"while"),n(),s("span",{class:"token punctuation"},"("),n("cur "),s("span",{class:"token operator"},"!="),n(),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("cur"),s("span",{class:"token punctuation"},"."),n("value"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"compareTo"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},"."),n("value"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"<"),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),n("       "),s("span",{class:"token comment"},"// 目标结点在 root 的右子树中"),n(`
      cur `),s("span",{class:"token operator"},"="),n(" cur"),s("span",{class:"token punctuation"},"."),n("right"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("cur"),s("span",{class:"token punctuation"},"."),n("value"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"compareTo"),s("span",{class:"token punctuation"},"("),n("node"),s("span",{class:"token punctuation"},"."),n("value"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},">"),n(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},")"),n("  "),s("span",{class:"token comment"},"// 目标结点在 root 的左子树中"),n(`
      cur `),s("span",{class:"token operator"},"="),n(" cur"),s("span",{class:"token punctuation"},"."),n("left"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token keyword"},"else"),n("             "),s("span",{class:"token comment"},"// 找到目标结点，跳出循环"),n(`
      `),s("span",{class:"token keyword"},"break"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`
  `),s("span",{class:"token keyword"},"return"),n(" cur"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Xs=s("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[s("pre",{class:"language-cpp"},[s("code",null,[s("span",{class:"token comment"},`/**
 * 查找结点
 * @param value 结点值
 * @return 结点信息
 */`),n(`
TreeNode`),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token operator"},"*"),s("span",{class:"token function"},"search"),s("span",{class:"token punctuation"},"("),n("T value"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
  TreeNode`),s("span",{class:"token operator"},"<"),n("T"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token operator"},"*"),n("cur "),s("span",{class:"token operator"},"="),n(" root"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token keyword"},"while"),n(),s("span",{class:"token punctuation"},"("),n("root "),s("span",{class:"token operator"},"!="),n(),s("span",{class:"token keyword"},"nullptr"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("value "),s("span",{class:"token operator"},">"),n(" root"),s("span",{class:"token operator"},"->"),n("value"),s("span",{class:"token punctuation"},")"),n(" cur "),s("span",{class:"token operator"},"="),n(" cur"),s("span",{class:"token operator"},"->"),n("right"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token keyword"},"else"),n(),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("value "),s("span",{class:"token operator"},"<"),n(" root"),s("span",{class:"token operator"},"->"),n("value"),s("span",{class:"token punctuation"},")"),n(`
      cur `),s("span",{class:"token operator"},"="),n(" cur"),s("span",{class:"token operator"},"->"),n("left"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token keyword"},"else"),n(`
      `),s("span",{class:"token keyword"},"break"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token punctuation"},"}"),n(`
  `),s("span",{class:"token keyword"},"return"),n(" cur"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ys=u('<h4 id="调整平衡练习" tabindex="-1"><a class="header-anchor" href="#调整平衡练习" aria-hidden="true">#</a> 调整平衡练习</h4><p>【RR型】</p><p><img src="'+N+'" alt="image-20230109111314747"></p><p>【RL型】</p><p>先以失衡结点的右孩子的左孩子为原点进行右旋，将原点转为失衡结点的右孩子，变为 RR 型，然后再通过左旋将其调整平衡.</p><p><img src="'+A+'" alt="image-20230109113522390"></p><p>【LR型】</p><p>先以失衡结点的左孩子的右孩子为原点进行左旋，将原点转为失衡结点的左孩子，变为 LL 型，然后再通过右旋将其调整平衡.</p><p><img src="'+M+'" alt="image-20230109120203094"></p>',9);function Zs($s,Ds){const p=i("RouterLink"),c=i("CodeTabs"),r=i("Tabs");return m(),d("div",null,[j,b(" more "),s("p",null,[n("在「"),l(p,{to:"/Algorithm/data_struct/3.html"},{default:a(()=>[n("二叉搜索树 - 二叉搜索树的退化")]),_:1}),n("」中，可见二叉搜索树在动态维护中效率并不高。")]),R,S,z,O,C,B,l(c,{id:"25",data:[{title:"rust",id:"rust"},{title:"java",id:"java"},{title:"c++",id:"c++"}],"tab-id":"language"},{tab0:a(({title:t,value:e,isActive:o})=>[E]),tab1:a(({title:t,value:e,isActive:o})=>[H]),tab2:a(({title:t,value:e,isActive:o})=>[F]),_:1}),G,l(c,{id:"39",data:[{title:"rust",id:"rust"},{title:"java",id:"java"},{title:"c++",id:"c++"}],"tab-id":"language"},{tab0:a(({title:t,value:e,isActive:o})=>[q]),tab1:a(({title:t,value:e,isActive:o})=>[X]),tab2:a(({title:t,value:e,isActive:o})=>[Y]),_:1}),Z,$,l(c,{id:"56",data:[{title:"rust",id:"rust"},{title:"java",id:"java"},{title:"c++",id:"c++"}],"tab-id":"language"},{tab0:a(({title:t,value:e,isActive:o})=>[D]),tab1:a(({title:t,value:e,isActive:o})=>[I]),tab2:a(({title:t,value:e,isActive:o})=>[J]),_:1}),K,P,Q,U,W,ss,ns,as,l(r,{id:"102",data:[{title:"step1"},{title:"step2"},{title:"step3"},{title:"step4"}]},{tab0:a(({title:t,value:e,isActive:o})=>[ts]),tab1:a(({title:t,value:e,isActive:o})=>[es,os]),tab2:a(({title:t,value:e,isActive:o})=>[ls,cs]),tab3:a(({title:t,value:e,isActive:o})=>[ps]),_:1}),l(c,{id:"130",data:[{title:"rust",id:"rust"},{title:"java",id:"java"},{title:"c++",id:"c++"}],"tab-id":"language"},{tab0:a(({title:t,value:e,isActive:o})=>[is]),tab1:a(({title:t,value:e,isActive:o})=>[us]),tab2:a(({title:t,value:e,isActive:o})=>[rs]),_:1}),ks,ms,ds,l(c,{id:"150",data:[{title:"rust",id:"rust"},{title:"java",id:"java"},{title:"c++",id:"c++"}],"tab-id":"language"},{tab0:a(({title:t,value:e,isActive:o})=>[bs]),tab1:a(({title:t,value:e,isActive:o})=>[vs]),tab2:a(({title:t,value:e,isActive:o})=>[hs]),_:1}),gs,ys,l(c,{id:"313",data:[{title:"rust",id:"rust"},{title:"java",id:"java"},{title:"c++",id:"c++"}],"tab-id":"language"},{tab0:a(({title:t,value:e,isActive:o})=>[ws]),tab1:a(({title:t,value:e,isActive:o})=>[fs]),tab2:a(({title:t,value:e,isActive:o})=>[_s]),_:1}),xs,Ts,s("p",null,[n("「AVL 树」的结点插入操作与「"),l(p,{to:"/Algorithm/data_struct/3.html#%E6%8F%92%E5%85%A5%E7%BB%93%E7%82%B9"},{default:a(()=>[n("二叉搜索树-插入")]),_:1}),n("」主体类似。不同的是，在插入结点后，从该结点到根结点的路径上会出现一系列「失衡结点」。所以，"),Ls,n("。实际上在调整完"),Ns,n("时就可以使得整颗树达到平衡。")]),As,Ms,l(c,{id:"339",data:[{title:"rust",id:"rust"},{title:"java",id:"java"},{title:"c++",id:"c++"}],"tab-id":"language"},{tab0:a(({title:t,value:e,isActive:o})=>[Vs]),tab1:a(({title:t,value:e,isActive:o})=>[js]),tab2:a(({title:t,value:e,isActive:o})=>[Rs]),_:1}),Ss,s("p",null,[n("「AVL 树」删除结点操作与「"),l(p,{to:"/Algorithm/data_struct/3.html#%E5%88%A0%E9%99%A4%E7%BB%93%E7%82%B9"},{default:a(()=>[n("二叉搜索树-删除")]),_:1}),n("」操作总体相同。类似地，"),zs,n("。实际上在调整完"),Os,n("后就可以使得整颗树达到平衡。")]),l(c,{id:"356",data:[{title:"rust",id:"rust"},{title:"java",id:"java"},{title:"c++",id:"c++"}],"tab-id":"language"},{tab0:a(({title:t,value:e,isActive:o})=>[Cs]),tab1:a(({title:t,value:e,isActive:o})=>[Bs]),tab2:a(({title:t,value:e,isActive:o})=>[Es]),_:1}),Hs,Fs,l(c,{id:"373",data:[{title:"rust",id:"rust"},{title:"java",id:"java"},{title:"c++",id:"c++"}],"tab-id":"language"},{tab0:a(({title:t,value:e,isActive:o})=>[Gs]),tab1:a(({title:t,value:e,isActive:o})=>[qs]),tab2:a(({title:t,value:e,isActive:o})=>[Xs]),_:1}),Ys])}const Js=k(V,[["render",Zs],["__file","5.html.vue"]]);export{Js as default};
